datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_CLOUD_URL")
  directUrl = env("DIRECT_CLOUD_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
// }

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql", "driverAdapters"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator nestjsDto {
  provider            = "prisma-generator-nestjs-dto"
  output              = "../src/generated/nestjs-dto"
  classValidation     = "true"
  prettier            = "true"
  wrapRelationsAsType = "true"
}

enum Role {
  student
  mentor
  admin
}

enum UserStatus {
  active
  disabled
  deleted
}

model User {
  id                   String                  @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  userAccount          UserAccount?
  /// @DtoApiHidden
  userDetails          UserDetails?
  /// @DtoApiHidden
  studentDetails       StudentDetails?
  /// @DtoApiHidden
  staffDetails         StaffDetails?
  /// @DtoApiHidden
  bills                Bill[]
  /// @DtoApiHidden
  notifications        Notification[]
  /// @DtoApiHidden
  courseEnrollment     CourseEnrollment[]
  /// @DtoApiHidden
  courseSections       CourseSection[]
  /// @DtoApiHidden
  submittedAssignments AssignmentSubmission[]
  /// @DtoApiHidden
  grades               AssignmentGradeRecord[]
  /// @DtoApiHidden
  quizAttempts         QuizSubmission[]
  /// @DtoApiHidden
  postedDiscussions    DiscussionPost[]
  /// @DtoApiHidden
  moduleProgress       ContentProgress[]

  firstName  String
  middleName String?
  lastName   String
  /// @DtoReadOnly
  role       Role

  /// @DtoReadOnly
  createdAt  DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt  DateTime  @updatedAt
  /// @DtoReadOnly
  disabledAt DateTime?
  /// @DtoReadOnly
  deletedAt  DateTime?
}

model UserAccount {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  authUid String  @unique
  /// @IsEmail
  email   String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model UserDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dateJoined DateTime
  dob        DateTime?
  gender     String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum StudentType {
  new
  regular
  irregular
  transfer
  returnee
  graduate
  special
}

model StudentDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  studentNumber Int
  studentType   StudentType
  admissionDate DateTime
  otherDetails  Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model StaffDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employeeNumber Int
  department     String
  position       String
  otherDetails   Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Program {
  id     String  @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  majors Major[]

  programCode  String  @unique
  name         String  @unique
  description  String
  yearDuration Int
  isActive     Boolean @default(true)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Major {
  id        String  @id @default(uuid()) @db.Uuid
  programId String  @db.Uuid
  /// @DtoApiHidden
  program   Program @relation(fields: [programId], references: [id])

  /// @DtoApiHidden
  courses Course[]

  /// @DtoApiHidden
  curriculums Curriculum[]

  majorCode   String  @unique
  name        String  @unique
  description String
  isActive    Boolean @default(true)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Course {
  id String @id @default(uuid()) @db.Uuid

  /// @DtoApiHidden
  majors Major[]

  prereqs   Course[] @relation("CoursePrereq")
  prereqFor Course[] @relation("CoursePrereq")

  coreqs   Course[] @relation("CourseCoreq")
  coreqFor Course[] @relation("CourseCoreq")

  curriculumCourses CurriculumCourse[]

  courseCode  String  @unique
  name        String
  description String
  units       Int
  type        String
  isActive    Boolean @default(true)

  /// @DtoApiHidden
  courseOfferings CourseOffering[] // A course can have multiple offerings
  /// @DtoApiHidden
  modules         Module[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Curriculum {
  id String @id @default(uuid()) @db.Uuid

  majorId String @db.Uuid
  /// @DtoApiHidden
  major   Major  @relation(fields: [majorId], references: [id])

  /// @DtoApiHidden
  courses CurriculumCourse[]

  icon        String?
  name        String?
  description String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model CurriculumCourse {
  id String @id @default(uuid()) @db.Uuid

  curriculumId String     @db.Uuid
  /// @DtoApiHidden
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])

  courseId String @db.Uuid
  /// @DtoApiHidden
  course   Course @relation(fields: [courseId], references: [id])

  order    Int
  year     Int
  semester Int

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([curriculumId, courseId])
}

enum EnrollmentStatus {
  draft
  upcoming
  active
  extended
  closed
  canceled
  archived
}

model EnrollmentPeriod {
  id String @id @default(uuid()) @db.Uuid

  courseOfferings CourseOffering[] // An enrollment can have multiple offerings

  startYear Int
  endYear   Int

  term Int

  startDate DateTime
  endDate   DateTime

  status EnrollmentStatus

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model CourseOffering {
  id String @id @default(uuid()) @db.Uuid

  courseId String @db.Uuid // Each offering belongs to one course
  /// @DtoApiHidden
  course   Course @relation(fields: [courseId], references: [id])

  periodId         String           @db.Uuid // Each offering belongs to one enrollment period
  /// @DtoApiHidden
  enrollmentPeriod EnrollmentPeriod @relation(fields: [periodId], references: [id])

  /// @DtoApiHidden
  courseEnrollments CourseEnrollment[] // Each offering can have multiple enrollments
  /// @DtoApiHidden
  courseSections    CourseSection[] // Each offering can have multiple sections
  /// @DtoApiHidden
  modules           Module[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum Days {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

model CourseSection {
  id String @id @default(uuid()) @db.Uuid

  name String

  mentorId String? @db.Uuid // make mentor optional
  /// @DtoApiHidden
  user     User?   @relation(fields: [mentorId], references: [id], onDelete: SetNull)

  courseOfferingId String         @db.Uuid // Each section belong to one offering
  /// @DtoApiHidden
  courseOffering   CourseOffering @relation(fields: [courseOfferingId], references: [id])

  courseEnrollments CourseEnrollment[] // Each course section has multiple student enrolled

  maxSlot Int

  startSched String
  endSched   String

  days Days[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum CourseEnrollmentStatus {
  enlisted
  finalized
  enrolled
  completed
  incomplete
  dropped
  failed
}

model CourseEnrollment {
  id String @id @default(uuid()) @db.Uuid

  courseOfferingId String         @db.Uuid // Each enrolled courses belong to one offering
  /// @DtoApiHidden
  courseOffering   CourseOffering @relation(fields: [courseOfferingId], references: [id])

  courseSectionId String        @db.Uuid // Each student enrollment belong to one section
  /// @DtoApiHidden
  courseSection   CourseSection @relation(fields: [courseSectionId], references: [id])

  studentId String @db.Uuid // Each enrolled course belong to one user i.e student
  /// @DtoApiHidden
  user      User   @relation(fields: [studentId], references: [id])

  status      CourseEnrollmentStatus
  startedAt   DateTime
  completedAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum BillType {
  academic
  administrative
  facilities
  studentServices
  activities
  penalties
}

enum PaymentScheme {
  full
  installment1
  installment2
}

model Bill {
  id     String  @id @default(uuid()) @db.Uuid
  userId String? @db.Uuid

  user             User?             @relation(fields: [userId], references: [id])
  /// @DtoApiHidden
  billInstallments BillInstallment[]
  /// @DtoApiHidden
  billPayments     BillPayment[]

  invoiceId     Int           @default(autoincrement())
  payerName     String
  payerEmail    String
  billType      BillType
  paymentScheme PaymentScheme
  totalAmount   Decimal       @db.Decimal(10, 2)
  /// [CostBreakdown]
  /// @DtoOverrideType(PrismaJson.CostBreakdown)
  costBreakdown Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model BillInstallment {
  id           String        @id @default(uuid()) @db.Uuid
  billId       String        @db.Uuid
  /// @DtoApiHidden
  bill         Bill          @relation(fields: [billId], references: [id])
  /// @DtoApiHidden
  billPayments BillPayment[]

  name             String
  installmentOrder Int
  amountToPay      Decimal  @db.Decimal(10, 2)
  dueAt            DateTime

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum PaymentType {
  card
  paymaya
  gcash
  qrph
  manual
}

model BillPayment {
  id            String           @id @default(uuid()) @db.Uuid
  billId        String           @db.Uuid
  /// @DtoApiHidden
  bill          Bill             @relation(fields: [billId], references: [id])
  installmentId String?          @db.Uuid
  /// @DtoApiHidden
  installment   BillInstallment? @relation(fields: [installmentId], references: [id])

  installmentOrder Int
  amountPaid       Decimal     @db.Decimal(10, 2)
  paymentType      PaymentType
  notes            String
  paymentDate      DateTime
  /// [PayMongoData]
  /// @DtoOverrideType(PrismaJson.PayMongoData)
  paymongoData     Json?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Module {
  id    String @id @default(uuid()) @db.Uuid
  title String

  courseId String @db.Uuid
  /// @DtoApiHidden
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  courseOfferingId String?         @db.Uuid
  /// @DtoApiHidden
  courseOffering   CourseOffering? @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)

  publishedAt DateTime?
  toPublishAt DateTime?

  /// @DtoApiHidden
  moduleSections ModuleSection[]
  /// @DtoApiHidden
  moduleContents ModuleContent[]
  /// @DtoApiHidden
  progresses     ContentProgress[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@index([courseId])
}

model ModuleSection {
  id String @id @default(uuid()) @db.Uuid

  moduleId String @db.Uuid
  /// @DtoApiHidden
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  // self reference subsections
  parentSectionId String?         @db.Uuid
  /// @DtoApiHidden
  parentSection   ModuleSection?  @relation("ModuleSubsection", fields: [parentSectionId], references: [id], onDelete: Cascade)
  /// @DtoApiHidden
  subsections     ModuleSection[] @relation("ModuleSubsection")

  /// @DtoApiHidden
  moduleContents ModuleContent[]

  title String @db.VarChar(255)
  order Int    @default(0)

  publishedAt DateTime?
  toPublishAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([moduleId, order]) // ensure unique order within module
  @@index([moduleId])
  @@index([parentSectionId])
  @@index([order])
  @@index([publishedAt])
}

enum ContentType {
  LESSON
  ASSIGNMENT
  QUIZ
  DISCUSSION
  VIDEO
  URL
  FILE
}

model ModuleContent {
  id String @id @default(uuid()) @db.Uuid

  // moduleId (content can belong to a module even if not in a section)
  // used for storing draft content that is not part of a section
  moduleId String @db.Uuid
  /// @DtoApiHidden
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  // optional: if content is part of a section
  moduleSectionId String?        @db.Uuid
  /// @DtoApiHidden
  moduleSection   ModuleSection? @relation(fields: [moduleSectionId], references: [id], onDelete: Cascade)

  order       Int         @default(0)
  contentType ContentType @default(LESSON)

  publishedAt   DateTime?
  toPublishAt   DateTime?
  unpublishedAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  // Relations to specific content types
  /// @DtoApiHidden
  lesson       Lesson?
  /// @DtoApiHidden
  assignment   Assignment?
  /// @DtoApiHidden
  quiz         Quiz?
  /// @DtoApiHidden
  discussion   Discussion?
  /// @DtoApiHidden
  video        Video?
  /// @DtoApiHidden
  externalUrl  ExternalUrl?
  /// @DtoApiHidden
  fileResource FileResource?

  studentProgress ContentProgress[]

  @@unique([moduleSectionId, order])
  @@index([moduleId, contentType, publishedAt])
  @@index([moduleSectionId])
  @@index([publishedAt])
  @@index([contentType, publishedAt])
}

model Lesson {
  id              String        @id @default(uuid()) @db.Uuid
  moduleContentId String        @unique @db.Uuid
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id], onDelete: Cascade)

  title    String  @db.VarChar(255)
  subtitle String? @db.VarChar(500)
  content  Json? // Structured lesson content

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum AssignmentMode {
  INDIVIDUAL
  GROUP
}

model Assignment {
  id String @id @default(uuid()) @db.Uuid

  moduleContentId String        @unique @db.Uuid
  /// @DtoApiHidden
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id], onDelete: Cascade)

  title    String  @db.VarChar(255)
  subtitle String? @db.VarChar(500)
  content  Json? // Structured assignment content (eg. description, instructions, submission instructions, etc.)

  mode AssignmentMode @default(INDIVIDUAL)

  maxAttempts         Int       @default(1) @db.SmallInt
  allowLateSubmission Boolean   @default(false)
  latePenalty         Decimal   @default(0.0) @db.Decimal(5, 2)
  dueDate             DateTime?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  gradingId String?            @db.Uuid
  grading   AssignmentGrading? @relation(fields: [gradingId], references: [id], onDelete: Restrict)

  /// @DtoApiHidden
  submissions AssignmentSubmission[]

  @@index([moduleContentId])
  @@index([dueDate])
}

model AssignmentSubmission {
  id           String     @id @default(uuid()) @db.Uuid
  assignmentId String     @db.Uuid
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String     @db.Uuid

  /// @DtoApiHidden
  student User @relation(fields: [studentId], references: [id])

  /// Text submission
  content       Json?
  submittedAt   DateTime?
  attemptNumber Int?      @db.SmallInt

  // Late submission tracking
  lateDays Int? @db.SmallInt

  attachments AssignmentAttachment[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([assignmentId, studentId, attemptNumber])
  @@index([assignmentId, studentId])
  @@index([submittedAt])
}

model AssignmentAttachment {
  id String @id @default(uuid()) @db.Uuid

  submissionId String               @db.Uuid
  /// @DtoApiHidden
  submission   AssignmentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  name String

  fileUrl String // Files, links, Images, etc.
  type    String // e.g., "document", "image", "code"
  size    Int // in bytes

  /// @DtoReadOnly
  createdAt DateTime @default(now())
}

model Quiz {
  id              String        @id @default(uuid()) @db.Uuid
  moduleContentId String        @unique @db.Uuid
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id], onDelete: Cascade)
  title           String        @db.VarChar(255)
  subtitle        String?       @db.VarChar(500)
  content         Json // Structured quiz content (eg. description, instructions, etc.)

  timeLimit           Int? // in minutes
  maxAttempts         Int       @default(1) @db.SmallInt
  allowLateSubmission Boolean   @default(false)
  latePenalty         Decimal   @default(0.0) @db.Decimal(5, 2)
  dueDate             DateTime?

  questions Json // Store all questions in a structured format

  /// @DtoApiHidden
  submissions QuizSubmission[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@index([timeLimit])
}

model QuizSubmission {
  id        String @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  quiz      Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String @db.Uuid
  /// @DtoApiHidden
  student   User   @relation(fields: [studentId], references: [id])
  studentId String @db.Uuid

  answers  Json // Student's answers
  rawScore Decimal? @db.Decimal(5, 2)

  questionResults Json? // [{questionId, points, score, feedback}]

  submittedAt   DateTime @default(now())
  timeSpent     Int? // in seconds
  attemptNumber Int      @default(1) @db.SmallInt

  /// @DtoReadOnly
  createdAt DateTime @default(now())

  @@unique([quizId, studentId, attemptNumber])
  @@index([quizId, studentId])
  @@index([submittedAt])
}

model Discussion {
  id              String        @id @default(uuid()) @db.Uuid
  moduleContentId String        @unique @db.Uuid
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id], onDelete: Cascade)

  title    String  @db.VarChar(255)
  subtitle String? @db.VarChar(500)
  content  Json? // Discussion prompt/question

  isThreaded  Boolean @default(true)
  requirePost Boolean @default(false)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  posts DiscussionPost[]

  @@index([moduleContentId])
}

model DiscussionPost {
  id           String     @id @default(uuid()) @db.Uuid
  discussionId String     @db.Uuid
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  authorId     String     @db.Uuid
  author       User       @relation(fields: [authorId], references: [id])

  content Json

  parentId String?          @db.Uuid
  parent   DiscussionPost?  @relation("DiscussionPostReplies", fields: [parentId], references: [id])
  replies  DiscussionPost[] @relation("DiscussionPostReplies")

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@index([discussionId, parentId])
  @@index([createdAt])
}

model Video {
  id              String        @id @default(uuid()) @db.Uuid
  moduleContentId String        @unique @db.Uuid
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id], onDelete: Cascade)

  title    String  @db.VarChar(255)
  subtitle String? @db.VarChar(500)
  content  Json?

  url        String
  duration   Int? // in seconds
  transcript String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model ExternalUrl {
  id              String        @id @default(uuid()) @db.Uuid
  moduleContentId String        @unique @db.Uuid
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id], onDelete: Cascade)

  title    String  @db.VarChar(255)
  subtitle String? @db.VarChar(500)
  content  Json?

  url String

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model FileResource {
  id              String        @id @default(uuid()) @db.Uuid
  moduleContentId String        @unique @db.Uuid
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id], onDelete: Cascade)

  title    String  @db.VarChar(255)
  subtitle String? @db.VarChar(500)
  content  Json?

  name     String
  path     String
  size     Int // in bytes
  mimeType String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model ContentProgress {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id])

  // Denormalized for efficient queries
  /// @DtoApiHidden
  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String @db.Uuid

  /// @DtoApiHidden
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id])
  moduleContentId String        @db.Uuid

  status         ProgressStatus @default(NOT_STARTED)
  completedAt    DateTime?
  timeSpent      Int? // in seconds
  lastAccessedAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime @default(now())
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt

  @@unique([userId, moduleContentId])
  @@index([userId, moduleId])
  @@index([moduleContentId])
  @@index([completedAt])
  @@index([moduleId])
}

// Defines HOW assignment is graded
// Allows reusing the same grading model for multiple assignments
model AssignmentGrading {
  id String @id @default(uuid()) @db.Uuid

  // Grading schema definition
  /// @DtoReadOnly
  gradingSchema Json // Rubric structure, criteria, weights, check rubricDTO
  weight        Decimal @db.Decimal(5, 2) // For final grade calculation

  // Grade processing metadata
  isCurved      Boolean @default(false)
  curveSettings Json? // for adjusting grades (eg. adding points to all grades)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  /// @DtoApiHidden
  assignments  Assignment[] //Many assignments can use the same grading schema
  /// @DtoApiHidden
  gradeRecords AssignmentGradeRecord[]

  @@index([weight])
}

// defines WHAT was actually graded
model AssignmentGradeRecord {
  id        String            @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  grading   AssignmentGrading @relation(fields: [gradingId], references: [id], onDelete: Cascade)
  gradingId String            @db.Uuid
  /// @DtoApiHidden
  student   User              @relation(fields: [studentId], references: [id])
  studentId String            @db.Uuid

  rawScore   Decimal @db.Decimal(5, 2) // Actual grade data
  finalScore Decimal @db.Decimal(5, 2)
  grade      String  @db.VarChar(10) // A, B+, Pass, Fail etc.
  feedback   String?

  /// @DtoApiHidden
  rubricScores RubricScore[] // Detailed scores for each criterion

  // Audit trail
  gradedById String   @db.Uuid
  /// @DtoReadOnly
  gradedAt   DateTime @default(now())
  /// @DtoReadOnly
  updatedAt  DateTime @updatedAt

  @@index([gradingId, studentId])
  @@index([studentId, finalScore])
  @@index([gradedAt])
  @@index([finalScore, gradingId])
}

model RubricScore {
  id            String                @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  gradeRecord   AssignmentGradeRecord @relation(fields: [gradeRecordId], references: [id], onDelete: Cascade)
  gradeRecordId String                @db.Uuid

  criterionKey String
  label        String?
  maxPoints    Decimal @db.Decimal(5, 2)
  score        Decimal @db.Decimal(5, 2)

  @@index([gradeRecordId])
  @@index([criterionKey])
}

model Notification {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id])

  title   String
  content String
  isRead  Boolean @default(false)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  deletedAt DateTime?
}
