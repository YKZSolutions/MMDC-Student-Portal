datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_CLOUD_URL")
  directUrl = env("DIRECT_CLOUD_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
// }

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator nestjsDto {
  provider            = "prisma-generator-nestjs-dto"
  output              = "../src/generated/nestjs-dto"
  classValidation     = "true"
  prettier            = "true"
  wrapRelationsAsType = "true"
}

enum Role {
  student
  mentor
  admin
}

enum UserStatus {
  active
  disabled
  deleted
}

model User {
  id                   String                 @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  userAccount          UserAccount?
  /// @DtoApiHidden
  userDetails          UserDetails?
  /// @DtoApiHidden
  studentDetails       StudentDetails?
  /// @DtoApiHidden
  staffDetails         StaffDetails?
  /// @DtoApiHidden
  bills                Bill[]
  /// @DtoApiHidden
  courseEnrollment     CourseEnrollment[]
  /// @DtoApiHidden
  mentorSections       CourseSection[]
  /// @DtoApiHidden
  submittedAssignments AssignmentSubmission[]
  /// @DtoApiHidden
  grades               GradeRecord[]
  /// @DtoApiHidden
  moduleProgress       ContentProgress[]
  /// @DtoApiHidden
  groups               GroupMember[]
  /// @DtoApiHidden
  appointmentStudents  Appointment[]          @relation("AppointmentStudent")
  /// @DtoApiHidden
  appointmentMentors   Appointment[]          @relation("AppointmentMentor")
  /// @DtoApiHidden
  notifications        NotificationReceipt[]
  /// @DtoApiHidden
  transcripts          Transcript[]

  firstName  String
  middleName String?
  lastName   String
  /// @DtoReadOnly
  role       Role

  /// @DtoReadOnly
  createdAt  DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt  DateTime  @updatedAt
  /// @DtoReadOnly
  disabledAt DateTime?
  /// @DtoReadOnly
  deletedAt  DateTime?
}

model UserAccount {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  authUid String  @unique
  /// @IsEmail
  email   String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model UserDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dateJoined DateTime
  dob        DateTime?
  gender     String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum StudentType {
  new
  regular
  irregular
  transfer
  returnee
  graduate
  special
}

model StudentDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  studentNumber String      @unique
  studentType   StudentType
  admissionDate DateTime
  otherDetails  Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@index(studentNumber)
}

model StaffDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employeeNumber Int    @unique
  department     String
  position       String
  otherDetails   Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Program {
  id     String  @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  majors Major[]

  programCode  String  @unique
  name         String  @unique
  description  String
  yearDuration Int
  isActive     Boolean @default(true)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Major {
  id        String  @id @default(uuid()) @db.Uuid
  programId String  @db.Uuid
  /// @DtoApiHidden
  program   Program @relation(fields: [programId], references: [id])

  /// @DtoApiHidden
  courses Course[]

  /// @DtoApiHidden
  curriculums Curriculum[]

  majorCode   String  @unique
  name        String  @unique
  description String
  isActive    Boolean @default(true)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Course {
  id String @id @default(uuid()) @db.Uuid

  /// @DtoApiHidden
  majors Major[]

  prereqs   Course[] @relation("CoursePrereq")
  prereqFor Course[] @relation("CoursePrereq")

  coreqs   Course[] @relation("CourseCoreq")
  coreqFor Course[] @relation("CourseCoreq")

  /// @DtoApiHidden
  modules Module[]

  curriculumCourses CurriculumCourse[]

  courseCode  String  @unique
  name        String  @unique
  description String
  units       Int
  type        String
  isActive    Boolean @default(true)

  /// @DtoApiHidden
  courseOfferings CourseOffering[] // A course can have multiple offerings

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Curriculum {
  id String @id @default(uuid()) @db.Uuid

  majorId String @db.Uuid
  /// @DtoApiHidden
  major   Major  @relation(fields: [majorId], references: [id])

  /// @DtoApiHidden
  courses CurriculumCourse[]

  icon        String?
  name        String?
  description String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model CurriculumCourse {
  id String @id @default(uuid()) @db.Uuid

  curriculumId String     @db.Uuid
  /// @DtoApiHidden
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])

  courseId String @db.Uuid
  /// @DtoApiHidden
  course   Course @relation(fields: [courseId], references: [id])

  order    Int
  year     Int
  semester Int

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([curriculumId, courseId])
}

enum EnrollmentStatus {
  draft
  upcoming
  active
  extended
  closed
  canceled
  archived
}

model EnrollmentPeriod {
  id String @id @default(uuid()) @db.Uuid

  courseOfferings CourseOffering[] // An enrollment can have multiple offerings
  pricingGroupId  String?          @db.Uuid
  /// @DtoApiHidden
  pricingGroup    PricingGroup?    @relation(fields: [pricingGroupId], references: [id])

  startYear Int
  endYear   Int

  term Int

  startDate DateTime
  endDate   DateTime

  status EnrollmentStatus

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([startYear, endYear, term])
}

model CourseOffering {
  id String @id @default(uuid()) @db.Uuid

  courseId String @db.Uuid // Each offering belongs to one course
  /// @DtoApiHidden
  course   Course @relation(fields: [courseId], references: [id])

  periodId         String           @db.Uuid // Each offering belongs to one enrollment period
  /// @DtoApiHidden
  enrollmentPeriod EnrollmentPeriod @relation(fields: [periodId], references: [id])

  /// @DtoApiHidden
  courseEnrollments CourseEnrollment[] // Each offering can have multiple enrollments
  /// @DtoApiHidden
  courseSections    CourseSection[] // Each offering can have multiple sections
  /// @DtoApiHidden
  modules           Module[]
  /// @DtoApiHidden
  appointments      Appointment[]
  /// @DtoApiHidden
  transcripts       Transcript[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([courseId, periodId])
}

enum Days {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

model CourseSection {
  id String @id @default(uuid()) @db.Uuid

  name String

  /// @DtoApiHidden
  mentor   User?   @relation(fields: [mentorId], references: [id], onDelete: SetNull)
  mentorId String? @db.Uuid // make mentor optional

  /// @DtoApiHidden
  courseOffering   CourseOffering @relation(fields: [courseOfferingId], references: [id])
  courseOfferingId String         @db.Uuid // Each section belong to one offering

  courseEnrollments CourseEnrollment[] // Each course section has multiple student enrolled

  maxSlot Int

  startSched String
  endSched   String

  days Days[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  /// @DtoApiHidden
  sectionModules SectionModule[]

  @@unique([courseOfferingId, name])
}

enum CourseEnrollmentStatus {
  enlisted
  finalized
  enrolled
  completed
  incomplete
  dropped
  failed
}

model CourseEnrollment {
  id String @id @default(uuid()) @db.Uuid

  /// @DtoApiHidden
  courseOffering   CourseOffering @relation(fields: [courseOfferingId], references: [id])
  courseOfferingId String         @db.Uuid // Each enrolled courses belong to one offering

  /// @DtoApiHidden
  courseSection   CourseSection @relation(fields: [courseSectionId], references: [id])
  courseSectionId String        @db.Uuid // Each student enrollment belong to one section

  /// @DtoApiHidden
  student   User   @relation(fields: [studentId], references: [id])
  studentId String @db.Uuid // Each enrolled course belong to one user i.e student

  status      CourseEnrollmentStatus
  startedAt   DateTime
  completedAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([courseOfferingId, studentId])
}

enum BillType {
  academic
  administrative
  facilities
  studentServices
  activities
  penalties
}

enum PaymentScheme {
  full
  installment1
  installment2
}

model Bill {
  id     String  @id @default(uuid()) @db.Uuid
  userId String? @db.Uuid

  user             User?             @relation(fields: [userId], references: [id])
  /// @DtoApiHidden
  billInstallments BillInstallment[]
  /// @DtoApiHidden
  billPayments     BillPayment[]

  invoiceId     Int           @unique @default(autoincrement())
  payerName     String
  payerEmail    String
  billType      BillType
  paymentScheme PaymentScheme
  totalAmount   Decimal       @db.Decimal(10, 2)
  /// [CostBreakdown]
  /// @DtoOverrideType(PrismaJson.CostBreakdown)
  costBreakdown Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model BillInstallment {
  id           String        @id @default(uuid()) @db.Uuid
  billId       String        @db.Uuid
  /// @DtoApiHidden
  bill         Bill          @relation(fields: [billId], references: [id])
  /// @DtoApiHidden
  billPayments BillPayment[]

  name             String
  installmentOrder Int
  amountToPay      Decimal  @db.Decimal(10, 2)
  dueAt            DateTime

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum PaymentType {
  card
  paymaya
  gcash
  qrph
  manual
}

model BillPayment {
  id            String           @id @default(uuid()) @db.Uuid
  billId        String           @db.Uuid
  /// @DtoApiHidden
  bill          Bill             @relation(fields: [billId], references: [id])
  installmentId String?          @db.Uuid
  /// @DtoApiHidden
  installment   BillInstallment? @relation(fields: [installmentId], references: [id])

  installmentOrder Int
  amountPaid       Decimal     @db.Decimal(10, 2)
  paymentType      PaymentType
  notes            String
  paymentDate      DateTime
  /// [PayMongoData]
  /// @DtoOverrideType(PrismaJson.PayMongoData)
  paymongoData     Json?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum PricingType {
  tuition
  lab
  misc
  other
}

model Pricing {
  id          String         @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  priceGroups PricingGroup[]

  type    PricingType
  name    String      @unique
  amount  Decimal     @db.Decimal(10, 2)
  enabled Boolean     @default(true)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model PricingGroup {
  id                String             @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  prices            Pricing[]
  /// @DtoApiHidden
  enrollmentPeriods EnrollmentPeriod[]

  name    String  @unique
  amount  Decimal @db.Decimal(10, 2)
  enabled Boolean @default(true)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Group {
  id String @id @default(uuid()) @db.Uuid

  moduleId String @db.Uuid
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  groupNumber Int
  groupName   String?
  /// @DtoApiHidden
  members     GroupMember[]
  /// @DtoApiHidden
  submissions AssignmentSubmission[]

  /// @DtoReadOnly
  createdAt DateTime @default(now())
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt

  @@unique([moduleId, groupNumber])
}

model GroupMember {
  id String @id @default(uuid()) @db.Uuid

  groupId String @db.Uuid
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  studentId String @db.Uuid
  student   User   @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupId, studentId])
}

model Module {
  id    String @id @default(uuid()) @db.Uuid
  title String

  /// @DtoApiHidden
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String? @db.Uuid

  /// @DtoApiHidden
  courseOffering   CourseOffering? @relation(fields: [courseOfferingId], references: [id])
  courseOfferingId String?         @db.Uuid

  /// @DtoApiHidden
  sectionModules SectionModule[]
  /// @DtoApiHidden
  moduleSections ModuleSection[]
  /// @DtoApiHidden
  progresses     ContentProgress[]
  /// @DtoApiHidden
  groups         Group[]

  /// @DtoReadOnly
  publishedAt   DateTime?
  /// @DtoReadOnly
  unpublishedAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([courseId, courseOfferingId])
  @@unique([courseId, courseOfferingId, title])
}

model SectionModule {
  id              String        @id @default(uuid()) @db.Uuid
  courseSection   CourseSection @relation(fields: [courseSectionId], references: [id], onDelete: Cascade)
  courseSectionId String        @db.Uuid

  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String @db.Uuid

  classMeetings Json[]

  @@unique([courseSectionId, moduleId])
  @@index([courseSectionId])
  @@index([moduleId])
}

model ModuleSection {
  id String @id @default(uuid()) @db.Uuid

  /// @DtoApiHidden
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId String @db.Uuid

  // self reference subsections
  /// @DtoApiHidden
  parentSection   ModuleSection?  @relation("ModuleSubsection", fields: [parentSectionId], references: [id], onDelete: Cascade)
  parentSectionId String?         @db.Uuid
  /// @DtoApiHidden
  subsections     ModuleSection[] @relation("ModuleSubsection")

  /// @DtoApiHidden
  prerequisiteSection   ModuleSection? @relation("ModulePrerequisite", fields: [prerequisiteSectionId], references: [id])
  prerequisiteSectionId String?        @db.Uuid

  /// @DtoApiHidden
  dependentSections ModuleSection[] @relation("ModulePrerequisite")

  /// @DtoApiHidden
  moduleContents ModuleContent[]

  title String @db.VarChar(255)
  order Int?   @default(0)

  /// @DtoReadOnly
  publishedAt   DateTime?
  /// @DtoReadOnly
  unpublishedAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@index([moduleId, order])
  @@index([moduleId])
  @@index([parentSectionId])
  @@index([order])
  @@index([publishedAt])
}

enum ContentType {
  LESSON
  ASSIGNMENT
}

model ModuleContent {
  id String @id @default(uuid()) @db.Uuid

  /// @DtoRelationCanConnectOnCreate
  /// @DtoRelationCanConnectOnUpdate
  moduleSection   ModuleSection @relation(fields: [moduleSectionId], references: [id], onDelete: Cascade)
  moduleSectionId String        @db.Uuid

  /// @DtoCreateOptional
  contentType ContentType @default(LESSON)

  title    String  @db.VarChar(255)
  subtitle String? @db.VarChar(500)

  content Json[] // BlockNote content

  /// @DtoUpdateOptional
  order Int @default(1) @db.SmallInt

  publishedAt   DateTime?
  unpublishedAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  assignment Assignment?

  studentProgress ContentProgress[]

  @@unique([moduleSectionId, order])
  @@index([moduleSectionId])
  @@index([publishedAt])
  @@index([contentType, publishedAt])
}

model RubricTemplate {
  id String @id @default(uuid()) @db.Uuid

  // Identification fields (for editors/developers)
  name        String  @unique @db.VarChar(255)
  description String? @db.VarChar(1000)

  // Force using analytics for now since it's the most common in MMDC
  // rubricType  RubricType? // Enum for Analytic, Holistic, Single-Point

  // Metadata for filtering and organization
  tags String[] // e.g., ["math", "writing", "project"]

  // Rubric structure fields (criteria and levels would typically be in related tables)
  /// [RubricCriterion]
  /// @DtoOverrideType(PrismaJson.RubricCriterion)
  criteriaJson Json? // Stores the actual structure of the rubric (criteria, levels, weigths)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  // Relationship back to Assignments that use this template
  /// @DtoApiHidden
  assignments Assignment[]

  @@index([name])
  @@index([tags], type: Gin)
}

// enum RubricType {
//   ANALYTIC
//   HOLISTIC
//   SINGLE_POINT
// }

enum AssignmentMode {
  INDIVIDUAL
  GROUP
}

model Assignment {
  id String @id @default(uuid()) @db.Uuid

  /// @DtoApiHidden
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id], onDelete: Cascade)
  moduleContentId String        @unique @db.Uuid

  rubricTemplate   RubricTemplate? @relation(fields: [rubricTemplateId], references: [id], onDelete: Restrict)
  rubricTemplateId String?         @db.Uuid

  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  mode AssignmentMode @default(INDIVIDUAL)

  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  maxScore         Int @default(0) @db.SmallInt
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  weightPercentage Int @default(0) @db.SmallInt

  maxAttempts         Int?      @db.SmallInt
  allowLateSubmission Boolean?  @default(false)
  latePenalty         Int?      @db.SmallInt // Percentage penalty per late day
  dueDate             DateTime?
  gracePeriodMinutes  Int?      @default(0) // Grace period in minutes

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  /// @DtoApiHidden
  submissions AssignmentSubmission[]

  @@index([moduleContentId])
  @@index([dueDate])
  @@index([rubricTemplateId])
}

enum SubmissionState {
  // Work-in-progress submission
  // Student is still working on the assignment/quiz
  // Can be saved multiple times without counting as an attempt
  // Not visible to instructors for grading
  DRAFT

  // Student has completed and submitted work
  // Submission is now "locked in" for evaluation
  // Counts as an attempt toward maxAttempts
  // Becomes visible to instructors
  SUBMITTED

  // Instructor has started grading process
  // Prevents concurrent grading by multiple instructors
  // Provides status transparency to student
  // Allows for complex multi-stage evaluation processes
  UNDER_REVIEW

  // Final grades and feedback have been provided
  // Student can view their grade and feedback
  // Submission is now read-only
  // Marks the end of successful evaluation process
  GRADED

  // Submission requires student action/resubmission
  // Work didn't meet requirements or needs correction
  // Student can revise and resubmit (if attempts remain)
  // Creates feedback loop for improvement
  RETURNED
}

model AssignmentSubmission {
  id String @id @default(uuid()) @db.Uuid

  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String     @db.Uuid

  /// @DtoApiHidden
  student   User   @relation(fields: [studentId], references: [id])
  studentId String @db.Uuid

  // Group submissions
  groupId       String? @db.Uuid
  group         Group?  @relation(fields: [groupId], references: [id])
  groupSnapshot Json?

  state SubmissionState

  /// @DtoApiHidden
  gradeRecord GradeRecord?

  /// Text submission
  content       Json[]
  submittedAt   DateTime?
  attemptNumber Int       @default(1) @db.SmallInt

  // Late submission tracking
  lateDays Int? @db.SmallInt

  /// @DtoCreateOptional
  /// @DtoRelationCanCreateOnCreate
  /// @DtoRelationCanCreateOnUpdate
  attachments SubmissionAttachment[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([assignmentId, studentId, attemptNumber])
  @@index([assignmentId, studentId])
  @@index([submittedAt])
}

model SubmissionAttachment {
  id String @id @default(uuid()) @db.Uuid

  /// @DtoApiHidden
  assignmentSubmission   AssignmentSubmission? @relation(fields: [assignmentSubmissionId], references: [id], onDelete: Cascade)
  assignmentSubmissionId String?               @db.Uuid

  name String

  url  String // Files, links, Images, etc.
  type String // e.g., "document", "image", "code"
  size Int // in bytes

  /// @DtoReadOnly
  createdAt DateTime @default(now())
}

// defines WHAT was actually graded
model GradeRecord {
  id        String @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  student   User   @relation(fields: [studentId], references: [id])
  studentId String @db.Uuid

  // @DtoApiHidden
  assignmentSubmission   AssignmentSubmission? @relation(fields: [assignmentSubmissionId], references: [id])
  assignmentSubmissionId String?               @unique @db.Uuid

  // Common grade data
  rawScore   Decimal @db.Decimal(5, 2) // Actual grade data
  finalScore Decimal @db.Decimal(5, 2)
  grade      String  @db.VarChar(10) // Pass, Fail etc.
  feedback   String?

  /// [RubricEvaluationDetail]
  /// @DtoOverrideType(PrismaJson.RubricEvaluationDetail)
  rubricEvaluationDetails Json[] // Flexible detail fields

  /// @DtoReadOnly
  gradedAt  DateTime @default(now())
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt

  @@index([studentId, finalScore])
  @@index([gradedAt])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model ContentProgress {
  id String @id @default(uuid()) @db.Uuid

  /// @DtoApiHidden
  student   User   @relation(fields: [studentId], references: [id])
  studentId String @db.Uuid

  // Denormalized for efficient queries
  /// @DtoApiHidden
  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String @db.Uuid

  /// @DtoApiHidden
  moduleContent   ModuleContent @relation(fields: [moduleContentId], references: [id])
  moduleContentId String        @db.Uuid

  status         ProgressStatus @default(NOT_STARTED)
  completedAt    DateTime?
  lastAccessedAt DateTime?

  /// @DtoReadOnly
  createdAt DateTime @default(now())
  /// @DtoReadOnly
  updatedAt DateTime @updatedAt

  @@unique([studentId, moduleContentId])
  @@index([studentId, moduleId])
  @@index([moduleContentId])
  @@index([completedAt])
  @@index([moduleId])
}

enum AppointmentStatus {
  booked
  approved
  cancelled
  rescheduled
  finished
  extended
}

model Appointment {
  id String @id @default(uuid()) @db.Uuid

  courseOfferingId String         @db.Uuid
  /// @DtoApiHidden
  courseOffering   CourseOffering @relation(fields: [courseOfferingId], references: [id])
  studentId        String         @db.Uuid
  /// @DtoApiHidden
  student          User           @relation("AppointmentStudent", fields: [studentId], references: [id])
  mentorId         String         @db.Uuid
  /// @DtoApiHidden
  mentor           User           @relation("AppointmentMentor", fields: [mentorId], references: [id])

  title        String
  description  String
  startAt      DateTime
  endAt        DateTime
  status       AppointmentStatus @default(booked)
  gmeetLink    String?
  cancelReason String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([studentId, mentorId, startAt])
}

model Notification {
  id String @id @default(uuid()) @db.Uuid

  receipts NotificationReceipt[]

  title   String
  content String
  role    Role[]

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  deletedAt DateTime?
}

model NotificationReceipt {
  id String @id @default(uuid()) @db.Uuid

  notificationId String       @db.Uuid
  notification   Notification @relation(fields: [notificationId], references: [id])
  userId         String       @db.Uuid
  /// @DtoApiHidden
  user           User         @relation(fields: [userId], references: [id])

  isRead Boolean @default(false)

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  deletedAt DateTime?

  @@unique([notificationId, userId])
}

enum GradeLetter {
  pass
  fail
  incomplete
}

model Transcript {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id])

  courseOfferingId String         @db.Uuid
  /// @DtoApiHidden
  courseOffering   CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)

  grade       Decimal      @db.Decimal(5, 2)
  gradeLetter GradeLetter?
  gradePoints Decimal      @db.Decimal(5, 2)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
