datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_CLOUD_URL")
  directUrl = env("DIRECT_CLOUD_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator nestjsDto {
  provider            = "prisma-generator-nestjs-dto"
  output              = "../src/generated/nestjs-dto"
  classValidation     = "true"
  prettier            = "true"
  wrapRelationsAsType = "true"
}

enum Role {
  student
  mentor
  admin
}

enum UserStatus {
  active
  disabled
  deleted
}

model User {
  id             String          @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  userAccount    UserAccount?
  /// @DtoApiHidden
  userDetails    UserDetails?
  /// @DtoApiHidden
  studentDetails StudentDetails?
  /// @DtoApiHidden
  staffDetails   StaffDetails?
  /// @DtoApiHidden
  bills          Bill[]
  /// @DtoApiHidden
  notifications  Notification[]

  firstName  String
  middleName String?
  lastName   String
  /// @DtoReadOnly
  role       Role

  /// @DtoReadOnly
  createdAt  DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt  DateTime  @updatedAt
  /// @DtoReadOnly
  disabledAt DateTime?
  /// @DtoReadOnly
  deletedAt  DateTime?
}

model UserAccount {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  authUid String  @unique
  /// @IsEmail
  email   String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model UserDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dateJoined DateTime
  dob        DateTime?
  gender     String?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum StudentType {
  new
  regular
  irregular
  transfer
  returnee
  graduate
  special
}

model StudentDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  studentNumber Int
  studentType   StudentType
  admissionDate DateTime
  otherDetails  Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model StaffDetails {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employeeNumber Int
  department     String
  position       String
  otherDetails   Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Program {
  id     String  @id @default(uuid()) @db.Uuid
  /// @DtoApiHidden
  majors Major[]

  code        String @unique
  name        String @unique
  description String

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Major {
  id        String   @id @default(uuid()) @db.Uuid
  programId String   @db.Uuid
  /// @DtoApiHidden
  program   Program  @relation(fields: [programId], references: [id])
  courses   Course[]

  name        String @unique
  description String

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Course {
  id    String  @id @default(uuid()) @db.Uuid
  major Major[]

  prereqs   Course[] @relation("CoursePrereq")
  prereqFor Course[] @relation("CoursePrereq")

  coreqs   Course[] @relation("CourseCoreq")
  coreqFor Course[] @relation("CourseCoreq")

  courseCode  String @unique
  name        String
  description String
  year        String
  semester    String
  units       Int

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum BillType {
  full
  installment
}

model Bill {
  id     String  @id @default(uuid()) @db.Uuid
  userId String? @db.Uuid

  user         User?         @relation(fields: [userId], references: [id])
  /// @DtoApiHidden
  billPayments BillPayment[]

  invoiceId     Int      @default(autoincrement())
  payerName     String
  payerEmail    String
  billType      BillType
  amountToPay   Decimal  @db.Decimal(10, 2)
  dueAt         DateTime
  issuedAt      DateTime
  /// [CostBreakdown]
  /// @DtoOverrideType(PrismaJson.CostBreakdown)
  costBreakdown Json

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

enum PaymentType {
  card
  maya
  gcash
  manual
}

model BillPayment {
  id     String @id @default(uuid()) @db.Uuid
  billId String @db.Uuid
  /// @DtoApiHidden
  bill   Bill   @relation(fields: [billId], references: [id])

  amountPaid   Decimal  @db.Decimal(10, 2)
  paymentType  PaymentType
  notes        String
  paymentDate  DateTime
  /// [PayMongoData]
  /// @DtoOverrideType(PrismaJson.PayMongoData)
  paymongoData Json?

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  updatedAt DateTime  @updatedAt
  /// @DtoReadOnly
  deletedAt DateTime?
}

model Notification {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  /// @DtoApiHidden
  user   User   @relation(fields: [userId], references: [id])

  title   String
  content String
  isRead  String

  /// @DtoReadOnly
  createdAt DateTime  @default(now())
  /// @DtoReadOnly
  deletedAt DateTime?
}
