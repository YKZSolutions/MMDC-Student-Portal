/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as protectedRouteRouteImport } from './routes/(protected)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as protectedUsersRouteImport } from './routes/(protected)/users'
import { Route as protectedProfileRouteImport } from './routes/(protected)/profile'
import { Route as protectedDashboardRouteImport } from './routes/(protected)/dashboard'
import { Route as authLoginRouteImport } from './routes/(auth)/login'

const protectedRouteRoute = protectedRouteRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedUsersRoute = protectedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => protectedRouteRoute,
} as any)
const protectedProfileRoute = protectedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => protectedRouteRoute,
} as any)
const protectedDashboardRoute = protectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => protectedRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/dashboard': typeof protectedDashboardRoute
  '/profile': typeof protectedProfileRoute
  '/users': typeof protectedUsersRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}
export interface FileRoutesByTo {
  '/': typeof protectedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/dashboard': typeof protectedDashboardRoute
  '/profile': typeof protectedProfileRoute
  '/users': typeof protectedUsersRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(protected)/dashboard': typeof protectedDashboardRoute
  '/(protected)/profile': typeof protectedProfileRoute
  '/(protected)/users': typeof protectedUsersRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/profile'
    | '/users'
    | '/demo/tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/profile'
    | '/users'
    | '/demo/tanstack-query'
  id:
    | '__root__'
    | '/'
    | '/(protected)'
    | '/(auth)/login'
    | '/(protected)/dashboard'
    | '/(protected)/profile'
    | '/(protected)/users'
    | '/demo/tanstack-query'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/users': {
      id: '/(protected)/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof protectedUsersRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/profile': {
      id: '/(protected)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof protectedProfileRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/dashboard': {
      id: '/(protected)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedDashboardRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface protectedRouteRouteChildren {
  protectedDashboardRoute: typeof protectedDashboardRoute
  protectedProfileRoute: typeof protectedProfileRoute
  protectedUsersRoute: typeof protectedUsersRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedDashboardRoute: protectedDashboardRoute,
  protectedProfileRoute: protectedProfileRoute,
  protectedUsersRoute: protectedUsersRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  protectedRouteRoute: protectedRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
