{
  "openapi": "3.0.0",
  "paths": {
    "/test/student": {
      "get": {
        "operationId": "TestController_testStudent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Test"
        ]
      }
    },
    "/test/admin": {
      "get": {
        "operationId": "TestController_testAdmin",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Test"
        ]
      }
    },
    "/test/{id}": {
      "post": {
        "description": "Test the logging & prisma error handling functionality",
        "operationId": "TestController_test",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestBodyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Logging Test",
        "tags": [
          "Test"
        ]
      }
    },
    "/users": {
      "post": {
        "description": "This operation creates both a user and a supabase auth account",
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserFullDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new user",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Retrieves a paginated list of users based on the provided filter parameters.\n- **Access: ** Requires `ADMIN` role.\n- **Filtering & Pagination: ** Uses the `FilterUserDto` to define query parameters such as search terms, sorting, and page size.",
        "operationId": "UsersController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "student",
                "mentor",
                "admin"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUsersDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/student": {
      "post": {
        "description": "This operation creates both a user and a supabase auth account.\nIt also has additional properties for student-specific details.",
        "operationId": "UsersController_createStudent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserStudentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new student user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/staff": {
      "post": {
        "description": "This operation creates both a user and a supabase auth account.\nIt also has additional properties for staff-specific details.",
        "operationId": "UsersController_createStaff",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserStaffDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new staff user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/invite": {
      "post": {
        "description": "This operation creates both a user and a supabase auth account",
        "operationId": "UsersController_inviteUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Invite a new user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "description": "This endpoint returns the full profile of the currently authenticated user.\nThe structure of the returned object depends on the user's role:\n\n- `UserStudentDetailsDto` for users with the `student` role\n- `UserStaffDetailsDto` for users with the `mentor` or `admin` role",
        "operationId": "UsersController_getMe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current user details fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UserStudentDetailsDto"
                    },
                    {
                      "$ref": "#/components/schemas/UserStaffDetailsDto"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "UnauthorizedException": {
                    "description": "Unauthorized",
                    "value": {
                      "statusCode": 401,
                      "message": "Unauthorized",
                      "error": "Unauthorized"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get the currently authenticated user",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "This operation updates the user details in the database",
        "operationId": "UsersController_updateOwnUserDetails",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserBaseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update personal details",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/student": {
      "put": {
        "description": "This operation updates the user details in the database.\nThe user should have a student role.",
        "operationId": "UsersController_updateUserStudentDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserStudentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update student user details (Admin only)",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/staff": {
      "put": {
        "description": "This operation updates the user details in the database.\nThe user should have a mentor or admin role.",
        "operationId": "UsersController_updateUserStaffDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserStaffDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update staff user details (Admin only)",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieves a specific user by their unique identifier.\n- **Validation: ** Ensures the provided `id` is a valid identifier format.\n- **Not Found Handling: ** Throws an error if no matching user is found.",
        "operationId": "UsersController_findOne",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user by id",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "This endpoint performs either a soft delete or a permanent deletion of a user depending on the current state of the user or the query parameter provided:\n\n- If `directDelete` is true, the user is **permanently deleted** without checking if they are already softly deleted.\n- If `directDelete` is not provided or false:\n  - If the user is not yet softly deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.\n  - If the user is already softly deleted, a **permanent delete** is executed.\n\nAll the user details and the supabase auth account will be deleted from the cloud on hard delete\n\nUse this endpoint to manage user deletion workflows flexibly through a single API.",
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "examples": [
                        "User has been soft deleted.",
                        "User has been permanently deleted."
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes a user (soft and hard delete)",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/status": {
      "patch": {
        "description": "This endpoint toggles the user's status between active and disabled\nby updating the `disabledAt` field. The change is also reflected in\nthe authentication provider's metadata.",
        "operationId": "UsersController_updateUserStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "examples": [
                        "User enabled successfully.",
                        "User disabled successfully."
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Updates the status of a user (enable/disable).",
        "tags": [
          "Users"
        ]
      }
    },
    "/courses": {
      "post": {
        "description": "This operations creates a new course.\nRequires `ADMIN` role.",
        "operationId": "CoursesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseDto"
                }
              }
            }
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "ConflictException": {
                    "description": "Conflict",
                    "value": {
                      "statusCode": 409,
                      "message": "Conflict",
                      "error": "Conflict"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Creates a course",
        "tags": [
          "Courses"
        ]
      },
      "get": {
        "description": "Retrives a paginated list of courses based on the provided filters.\nRequires `ADMIN` role.",
        "operationId": "CoursesController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCoursesDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrive all courses",
        "tags": [
          "Courses"
        ]
      }
    },
    "/courses/{id}": {
      "get": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CoursesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a specific course by ID",
        "tags": [
          "Courses"
        ]
      },
      "patch": {
        "description": "This operation updates the details of an existing course.\nRequires `ADMIN` role.",
        "operationId": "CoursesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "ConflictException": {
                    "description": "Conflict",
                    "value": {
                      "statusCode": 409,
                      "message": "Conflict",
                      "error": "Conflict"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update a course",
        "tags": [
          "Courses"
        ]
      },
      "delete": {
        "description": "This operation permanently deletes a course from the system.\nRequires `ADMIN` role.",
        "operationId": "CoursesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "examples": [
                        "Course marked for deletion",
                        "Course permanently deleted"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete a course",
        "tags": [
          "Courses"
        ]
      }
    },
    "/auth/{uid}/metadata": {
      "get": {
        "description": "Retrieves the supabase auth account's metadata based on the uid given",
        "operationId": "AuthController_getMetadata",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthMetadataDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "If the uid provided is invalid",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "description": "If the uid provided is invalid",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "If an unexpected server error has occured",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "description": "If an unexpected server error has occured",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get User Account Metadata",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "description": "Login via email & password",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentialsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "UnauthorizedException": {
                    "description": "Unauthorized",
                    "value": {
                      "statusCode": 401,
                      "message": "Unauthorized",
                      "error": "Unauthorized"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Login Account",
        "tags": [
          "Auth"
        ]
      }
    },
    "/billing": {
      "post": {
        "description": "Creates a new bill item and can optionally attach a user",
        "operationId": "BillingController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBillingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new bill",
        "tags": [
          "Billing"
        ]
      },
      "get": {
        "description": "Fetch bills with the option to filter and sort them.\nContents of the returned list will depend on the user and their role.\nReturns a paginated response.",
        "operationId": "BillingController_findAll",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "schema": {
              "default": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "scheme",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaymentScheme"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/BillType"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "amountToPay",
                "totalPaid",
                "createdAt"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "unpaid",
                "partial",
                "paid",
                "overpaid"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBillsDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch bills",
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing/{id}": {
      "get": {
        "description": "If the user is not an admin, they are only limited to querying their own bills.",
        "operationId": "BillingController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedBillDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch a single bill",
        "tags": [
          "Billing"
        ]
      },
      "patch": {
        "description": "Change the bill's details",
        "operationId": "BillingController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBillDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update bill data",
        "tags": [
          "Billing"
        ]
      },
      "delete": {
        "description": "This endpoint performs either a soft delete or a permanent deletion of a bill depending on the current state of the nill or the query parameter provided:\n\n- If `directDelete` is true, the bill is **permanently deleted** without checking if they are already softly deleted.\n- If `directDelete` is not provided or false:\n  - If the bill is not yet softly deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.\n  - If the bill is already softly deleted, a **permanent delete** is executed.",
        "operationId": "BillingController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes a bill (temporary or permanent)",
        "tags": [
          "Billing"
        ]
      }
    },
    "/billing/{billId}/installments": {
      "get": {
        "description": "Fetch installments ordered by descending createdAt date\nContents of the returned list will depend on the user and their role.\nReturns a paginated response.",
        "operationId": "InstallmentController_findAll",
        "parameters": [
          {
            "name": "billId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillInstallmentItemDto"
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Fetch installments",
        "tags": [
          "Installment"
        ]
      }
    },
    "/billing/{billId}/installments/{id}": {
      "get": {
        "description": "If the user is not an admin, they are only limited to querying their own installments.",
        "operationId": "InstallmentController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillInstallmentItemDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Fetch a single installment",
        "tags": [
          "Installment"
        ]
      }
    },
    "/billing/{billId}/payments/pay": {
      "post": {
        "description": "Handles the payment intent and payment gateway redirect of paymongo",
        "operationId": "PaymentsController_pay",
        "parameters": [
          {
            "name": "billId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponseDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Initiate paymongo payment intent",
        "tags": [
          "Payments"
        ]
      }
    },
    "/billing/{billId}/payments": {
      "post": {
        "description": "Creates a new payment item",
        "operationId": "PaymentsController_create",
        "parameters": [
          {
            "name": "billId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillPaymentDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new payment",
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "description": "Fetch payments ordered by descending payment date\nContents of the returned list will depend on the user and their role.\nReturns a paginated response.",
        "operationId": "PaymentsController_findAll",
        "parameters": [
          {
            "name": "billId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillPaymentDto"
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Fetch payments",
        "tags": [
          "Payments"
        ]
      }
    },
    "/billing/{billId}/payments/{id}": {
      "get": {
        "description": "If the user is not an admin, they are only limited to querying their own payments.",
        "operationId": "PaymentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillPaymentDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Fetch a single payment",
        "tags": [
          "Payments"
        ]
      },
      "patch": {
        "description": "Change the payment's details",
        "operationId": "PaymentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBillPaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillPaymentDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update payment data",
        "tags": [
          "Payments"
        ]
      },
      "delete": {
        "description": "This endpoint performs either a soft delete or a permanent deletion of a payment depending on the current state of the nill or the query parameter provided:\n\n- If `directDelete` is true, the payment is **permanently deleted** without checking if they are already softly deleted.\n- If `directDelete` is not provided or false:\n  - If the payment is not yet softly deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.\n  - If the payment is already softly deleted, a **permanent delete** is executed.",
        "operationId": "PaymentsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Deletes a payment (temporary or permanent)",
        "tags": [
          "Payments"
        ]
      }
    },
    "/programs": {
      "post": {
        "description": "This operation creates a new academic program.\nRequires `ADMIN` role.",
        "operationId": "ProgramController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProgramDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Program"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create a new program",
        "tags": [
          "Program"
        ]
      },
      "get": {
        "description": "Retrieves a paginated list of programs based on the provided filters.\nRequires `ADMIN` role.",
        "operationId": "ProgramController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of programs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProgramsDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve all programs",
        "tags": [
          "Program"
        ]
      }
    },
    "/programs/{programId}/majors": {
      "get": {
        "description": "Retrives a paginated list of majors based on the program id and provided filters.\nRequires `ADMIN` role.",
        "operationId": "ProgramController_findAllMajors",
        "parameters": [
          {
            "name": "programId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMajorsDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrive all majors of a program",
        "tags": [
          "Program"
        ]
      }
    },
    "/programs/{id}": {
      "get": {
        "description": "Requires `ADMIN` role.",
        "operationId": "ProgramController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Program"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a specific program by ID",
        "tags": [
          "Program"
        ]
      },
      "patch": {
        "description": "This operation updates the details of an existing program.\nRequires `ADMIN` role.",
        "operationId": "ProgramController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProgramDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Program updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Program"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update a program",
        "tags": [
          "Program"
        ]
      },
      "delete": {
        "description": "This operation permanently deletes a program from the system.\nRequires `ADMIN` role.",
        "operationId": "ProgramController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Program deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Program has been permanently deleted."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete a program",
        "tags": [
          "Program"
        ]
      }
    },
    "/chatbot": {
      "post": {
        "operationId": "ChatbotController_prompt",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatbotResponseDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "Chatbot"
        ]
      }
    },
    "/majors": {
      "post": {
        "description": "This operation creates a new academic major.\nRequries `ADMIN` role.",
        "operationId": "MajorController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProgramMajorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MajorDto"
                }
              }
            }
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "ConflictException #1": {
                    "description": "Conflict",
                    "value": {
                      "statusCode": 409,
                      "message": "Conflict",
                      "error": "Conflict"
                    }
                  },
                  "ConflictException #2": {
                    "description": "Conflict",
                    "value": {
                      "statusCode": 409,
                      "message": "Conflict",
                      "error": "Conflict"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Creates a major.",
        "tags": [
          "Major"
        ]
      },
      "get": {
        "description": "Retrives a paginated list of majors based on the provided filters.\nRequires `ADMIN` role.",
        "operationId": "MajorController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedMajorsDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrive all majors",
        "tags": [
          "Major"
        ]
      }
    },
    "/majors/{id}": {
      "get": {
        "description": "Requires `ADMIN` role.",
        "operationId": "MajorController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MajorItemDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve a specific major by ID",
        "tags": [
          "Major"
        ]
      },
      "patch": {
        "description": "This operation updates the details of an existing major.\nRequires `ADMIN` role.",
        "operationId": "MajorController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMajorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Major"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "ConflictException": {
                    "description": "Conflict",
                    "value": {
                      "statusCode": 409,
                      "message": "Conflict",
                      "error": "Conflict"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Conflict"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Update a major",
        "tags": [
          "Major"
        ]
      },
      "delete": {
        "description": "This operation permanently deletes a major from the system.\nRequires `ADMIN` role.",
        "operationId": "MajorController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Major has been permanently deleted."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete a major",
        "tags": [
          "Major"
        ]
      }
    },
    "/enrollments": {
      "post": {
        "description": "This operation creates a new enrollment period for managing course registrations.\nRequires `ADMIN` role.",
        "operationId": "EnrollmentController_createEnrollment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnrollmentPeriodDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentPeriodDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Creates a new enrollment period",
        "tags": [
          "Enrollment"
        ]
      },
      "get": {
        "description": "Fetches a paginated list of enrollment periods.\nRequires `ADMIN` role.",
        "operationId": "EnrollmentController_findAllEnrollments",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEnrollmentPeriodsDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieves all enrollment periods",
        "tags": [
          "Enrollment"
        ]
      }
    },
    "/enrollments/active": {
      "get": {
        "description": "Requires `ADMIN` or `STUDENT` roles.",
        "operationId": "EnrollmentController_findActiveEnrollment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentPeriodDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieves the currently active enrollment period",
        "tags": [
          "Enrollment"
        ]
      }
    },
    "/enrollments/{enrollmentId}": {
      "get": {
        "description": "Requires `ADMIN` role.",
        "operationId": "EnrollmentController_findOneEnrollment",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentPeriodDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieves a specific enrollment period by ID",
        "tags": [
          "Enrollment"
        ]
      },
      "patch": {
        "description": "Requires `ADMIN` role.",
        "operationId": "EnrollmentController_updateEnrollment",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnrollmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentPeriodDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Updates an enrollment period",
        "tags": [
          "Enrollment"
        ]
      },
      "delete": {
        "description": "Requires `ADMIN` role.",
        "operationId": "EnrollmentController_removeEnrollment",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Removes (soft or hard deletes) an enrollment period",
        "tags": [
          "Enrollment"
        ]
      }
    },
    "/enrollments/{enrollmentId}/status": {
      "patch": {
        "description": "Requires `ADMIN` role.",
        "operationId": "EnrollmentController_updateEnrollmentStatus",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnrollmentStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentPeriodDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Updates the status of an enrollment period",
        "tags": [
          "Enrollment"
        ]
      }
    },
    "/enrollments/{enrollmentId}/offerings": {
      "post": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CourseOfferingController_createCourseOffering",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseOfferingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseOffering"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Creates a new course offering under a specific enrollment period",
        "tags": [
          "CourseOffering"
        ]
      },
      "get": {
        "description": "Fetches a paginated list of course offerings for the given period.\nRequires `ADMIN` or `STUDENT` role.",
        "operationId": "CourseOfferingController_findCourseOfferingsByPeriod",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "periodId",
            "required": false,
            "in": "query",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "not enrolled",
                "enrolled"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCourseOfferingsDto"
                }
              }
            }
          }
        },
        "summary": "Retrieves all course offerings in a specific enrollment period",
        "tags": [
          "CourseOffering"
        ]
      }
    },
    "/enrollments/{enrollmentId}/curriculum": {
      "post": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CourseOfferingController_createCourseOfferingsByCurriculumId",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseOfferingCurriculumDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseOffering"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Creates a course offerings given a curriculum",
        "tags": [
          "CourseOffering"
        ]
      }
    },
    "/enrollments/{enrollmentId}/offerings/{offeringId}": {
      "get": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CourseOfferingController_findOneCourseOffering",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offeringId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseOfferingDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieves a specific course offering by ID",
        "tags": [
          "CourseOffering"
        ]
      },
      "delete": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CourseOfferingController_removeCourseOffering",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offeringId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Removes a course offering from a specific enrollment period",
        "tags": [
          "CourseOffering"
        ]
      }
    },
    "/enrollments/{enrollmentId}/sections": {
      "get": {
        "description": "Fetches a paginated list of course sections.\nRequires `ADMIN` role.",
        "operationId": "CourseSectionController_findAllCourseSections",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCourseSectionsDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieves all sections for a specific enrollment period",
        "tags": [
          "CourseSection"
        ]
      }
    },
    "/enrollments/{enrollmentId}/offerings/{offeringId}/sections": {
      "get": {
        "description": "Fetches a paginated list of course sections.\nRequires `ADMIN` role.",
        "operationId": "CourseSectionController_findAllCourseSectionsForOffering",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offeringId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCourseSectionsDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieves all sections for a specific course offering",
        "tags": [
          "CourseSection"
        ]
      },
      "post": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CourseSectionController_createCourseSection",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offeringId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseSectionFullDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseSectionDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Creates a new course section under a specific course offering",
        "tags": [
          "CourseSection"
        ]
      }
    },
    "/enrollments/{enrollmentId}/offerings/{offeringId}/sections/{sectionId}": {
      "get": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CourseSectionController_findOneCourseSection",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offeringId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sectionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseSectionDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieves a specific course section under a course offering",
        "tags": [
          "CourseSection"
        ]
      },
      "patch": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CourseSectionController_updateCourseSection",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offeringId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sectionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseSectionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseSectionDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Updates a course section under a specific course offering",
        "tags": [
          "CourseSection"
        ]
      },
      "delete": {
        "description": "Requires `ADMIN` role.",
        "operationId": "CourseSectionController_removeCourseSection",
        "parameters": [
          {
            "name": "enrollmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offeringId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sectionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Removes a course section from a specific course offering",
        "tags": [
          "CourseSection"
        ]
      }
    },
    "/enrollment/student/sections": {
      "post": {
        "description": "- `STUDENT` will receive their own enlisted enrollments for the active enrollment period.\n- `ADMIN` may call this endpoint (typically for inspection); use DTO body to scope to another student when supported.\n- Each returned record includes related course offering, course section and mentor/user data.",
        "operationId": "CourseEnrollmentController_getCourseEnrollments",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DetailedCourseEnrollmentDto"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Retrieve all active (enlisted) course enrollments for the authenticated user.",
        "tags": [
          "CourseEnrollment"
        ]
      }
    },
    "/enrollment/student/sections/{sectionId}": {
      "post": {
        "description": "- `STUDENT` can only enroll themselves.\n- `ADMIN` can enroll on behalf of another student (using `studentId` in body).",
        "operationId": "CourseEnrollmentController_createCourseEnrollment",
        "parameters": [
          {
            "name": "sectionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentIdentifierDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseEnrollmentDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Enroll a student in a course section.",
        "tags": [
          "CourseEnrollment"
        ]
      },
      "delete": {
        "description": "- `STUDENT` can only drop themselves.\n- `ADMIN` can drop on behalf of another student (using `studentId` in body).",
        "operationId": "CourseEnrollmentController_dropCourseEnrollment",
        "parameters": [
          {
            "name": "sectionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentIdentifierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Drop a student from a course section.",
        "tags": [
          "CourseEnrollment"
        ]
      }
    },
    "/enrollment/student/finalize": {
      "post": {
        "description": "- Sets all enrolled courses for the student to `finalized`.\n- `STUDENT` can finalize only their own enrollments.\n- `ADMIN` can finalize for any student by providing `studentId` in the request body.",
        "operationId": "CourseEnrollmentController_finalizeCourseEnrollment",
        "parameters": [],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentIdentifierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "studentId": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Finalize all course enrollments for a student.",
        "tags": [
          "CourseEnrollment"
        ]
      }
    },
    "/curriculum": {
      "post": {
        "description": "Creates a new curriculum with attached course plan",
        "operationId": "CurriculumController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCurriculumWithCoursesDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurriculumDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new curriculum",
        "tags": [
          "Curriculum"
        ]
      },
      "get": {
        "description": "Fetches all of the curriculums\nReturns a list",
        "operationId": "CurriculumController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CurriculumItemDto"
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch curriculums",
        "tags": [
          "Curriculum"
        ]
      }
    },
    "/curriculum/{id}": {
      "get": {
        "description": "Fetch the curriculum details and the courses attached to it.\nCan find by id or find by code with a format of (programCode-majorCode)",
        "operationId": "CurriculumController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurriculumWithCoursesDto"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch a single curriculum",
        "tags": [
          "Curriculum"
        ]
      },
      "patch": {
        "description": "Updates an existing curriculum and course plan",
        "operationId": "CurriculumController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCurriculumWithCourseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurriculumDto"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update curriculum",
        "tags": [
          "Curriculum"
        ]
      },
      "delete": {
        "description": "This endpoint performs either a soft delete or a permanent deletion of a curriculum depending on the current state of the nill or the query parameter provided:\n\n- If `directDelete` is true, the curriculum is **permanently deleted** without checking if they are already softly deleted.\n- If `directDelete` is not provided or false:\n  - If the curriculum is not yet softly deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.\n  - If the curriculum is already softly deleted, a **permanent delete** is executed.",
        "operationId": "CurriculumController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Not Found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": [
                    "statusCode",
                    "message"
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deletes a curriculum (temporary or permanent)",
        "tags": [
          "Curriculum"
        ]
      }
    },
    "/swaggy": {
      "get": {
        "operationId": "SwaggerController_downloadAllSpecs",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Swagger"
        ]
      }
    }
  },
  "info": {
    "title": "API",
    "description": "Description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "api",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "TestBodyNestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "TestBodyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id shit"
          },
          "nested": {
            "$ref": "#/components/schemas/TestBodyNestDto"
          }
        },
        "required": [
          "id",
          "nested"
        ]
      },
      "Role": {
        "type": "string",
        "enum": [
          "student",
          "mentor",
          "admin"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName"
        ]
      },
      "UserCredentialsDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "CreateUserDetailsDto": {
        "type": "object",
        "properties": {
          "dateJoined": {
            "type": "string",
            "format": "date-time"
          },
          "dob": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "dateJoined"
        ]
      },
      "CreateUserFullDto": {
        "type": "object",
        "properties": {
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "user": {
            "$ref": "#/components/schemas/CreateUserDto"
          },
          "credentials": {
            "$ref": "#/components/schemas/UserCredentialsDto"
          },
          "userDetails": {
            "$ref": "#/components/schemas/CreateUserDetailsDto"
          }
        },
        "required": [
          "role",
          "user",
          "credentials"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "disabledAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "createdAt",
          "updatedAt",
          "disabledAt",
          "deletedAt"
        ]
      },
      "StudentType": {
        "type": "string",
        "enum": [
          "new",
          "regular",
          "irregular",
          "transfer",
          "returnee",
          "graduate",
          "special"
        ]
      },
      "CreateStudentDetailsDto": {
        "type": "object",
        "properties": {
          "studentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "studentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentType"
              }
            ]
          },
          "admissionDate": {
            "type": "string",
            "format": "date-time"
          },
          "otherDetails": {
            "type": "object"
          }
        },
        "required": [
          "studentNumber",
          "studentType",
          "admissionDate",
          "otherDetails"
        ]
      },
      "CreateUserStudentDto": {
        "type": "object",
        "properties": {
          "specificDetails": {
            "$ref": "#/components/schemas/CreateStudentDetailsDto"
          },
          "user": {
            "$ref": "#/components/schemas/CreateUserDto"
          },
          "credentials": {
            "$ref": "#/components/schemas/UserCredentialsDto"
          },
          "userDetails": {
            "$ref": "#/components/schemas/CreateUserDetailsDto"
          }
        },
        "required": [
          "specificDetails",
          "user",
          "credentials"
        ]
      },
      "StaffRole": {
        "type": "string",
        "enum": [
          "mentor",
          "admin"
        ]
      },
      "CreateStaffDetailsDto": {
        "type": "object",
        "properties": {
          "employeeNumber": {
            "type": "integer",
            "format": "int32"
          },
          "department": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "otherDetails": {
            "type": "object"
          }
        },
        "required": [
          "employeeNumber",
          "department",
          "position",
          "otherDetails"
        ]
      },
      "CreateUserStaffDto": {
        "type": "object",
        "properties": {
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffRole"
              }
            ]
          },
          "specificDetails": {
            "$ref": "#/components/schemas/CreateStaffDetailsDto"
          },
          "user": {
            "$ref": "#/components/schemas/CreateUserDto"
          },
          "credentials": {
            "$ref": "#/components/schemas/UserCredentialsDto"
          },
          "userDetails": {
            "$ref": "#/components/schemas/CreateUserDetailsDto"
          }
        },
        "required": [
          "role",
          "specificDetails",
          "user",
          "credentials"
        ]
      },
      "InviteUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "role",
          "email"
        ]
      },
      "UserDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "dateJoined": {
            "type": "string",
            "format": "date-time"
          },
          "dob": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "dateJoined",
          "dob",
          "gender",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UserDetailsFullDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "student",
              "mentor",
              "admin"
            ]
          },
          "userDetails": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "userDetails"
        ]
      },
      "StudentDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "studentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "studentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentType"
              }
            ]
          },
          "admissionDate": {
            "type": "string",
            "format": "date-time"
          },
          "otherDetails": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "studentNumber",
          "studentType",
          "admissionDate",
          "otherDetails",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UserStudentDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "student",
              "mentor",
              "admin"
            ]
          },
          "userDetails": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            ]
          },
          "studentDetails": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentDetailsDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "userDetails",
          "studentDetails"
        ]
      },
      "StaffDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "employeeNumber": {
            "type": "integer",
            "format": "int32"
          },
          "department": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "otherDetails": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "employeeNumber",
          "department",
          "position",
          "otherDetails",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UserStaffDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "student",
              "mentor",
              "admin"
            ]
          },
          "userDetails": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            ]
          },
          "staffDetails": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffDetailsDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "userDetails",
          "staffDetails"
        ]
      },
      "UpdateStudentDetailsDto": {
        "type": "object",
        "properties": {
          "studentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "studentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentType"
              }
            ]
          },
          "admissionDate": {
            "type": "string",
            "format": "date-time"
          },
          "otherDetails": {
            "type": "object"
          }
        }
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "UpdateUserDetailsDto": {
        "type": "object",
        "properties": {
          "dateJoined": {
            "type": "string",
            "format": "date-time"
          },
          "dob": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateUserStudentDto": {
        "type": "object",
        "properties": {
          "specificDetails": {
            "$ref": "#/components/schemas/UpdateStudentDetailsDto"
          },
          "user": {
            "$ref": "#/components/schemas/UpdateUserDto"
          },
          "userDetails": {
            "$ref": "#/components/schemas/UpdateUserDetailsDto"
          }
        }
      },
      "UpdateStaffDetailsDto": {
        "type": "object",
        "properties": {
          "employeeNumber": {
            "type": "integer",
            "format": "int32"
          },
          "department": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "otherDetails": {
            "type": "object"
          }
        }
      },
      "UpdateUserStaffDto": {
        "type": "object",
        "properties": {
          "specificDetails": {
            "$ref": "#/components/schemas/UpdateStaffDetailsDto"
          },
          "user": {
            "$ref": "#/components/schemas/UpdateUserDto"
          },
          "userDetails": {
            "$ref": "#/components/schemas/UpdateUserDetailsDto"
          }
        }
      },
      "UpdateUserBaseDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UpdateUserDto"
          },
          "userDetails": {
            "$ref": "#/components/schemas/UpdateUserDetailsDto"
          }
        }
      },
      "PaginationMetaDto": {
        "type": "object",
        "properties": {
          "isFirstPage": {
            "type": "boolean",
            "example": true
          },
          "isLastPage": {
            "type": "boolean",
            "example": true
          },
          "currentPage": {
            "type": "number",
            "example": 1
          },
          "previousPage": {
            "type": "number",
            "nullable": true,
            "example": null
          },
          "nextPage": {
            "type": "number",
            "nullable": true,
            "example": null
          },
          "pageCount": {
            "type": "number",
            "example": 1
          },
          "totalCount": {
            "type": "number",
            "example": 42
          }
        },
        "required": [
          "isFirstPage",
          "isLastPage",
          "currentPage",
          "previousPage",
          "nextPage",
          "pageCount",
          "totalCount"
        ]
      },
      "UserAccountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "authUid": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "authUid",
          "email",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UserWithRelations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "disabledAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "userAccount": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserAccountDto"
              }
            ]
          },
          "userDetails": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "createdAt",
          "updatedAt",
          "disabledAt",
          "deletedAt",
          "userAccount",
          "userDetails"
        ]
      },
      "PaginatedUsersDto": {
        "type": "object",
        "properties": {
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserWithRelations"
            }
          }
        },
        "required": [
          "meta",
          "users"
        ]
      },
      "CreateCourseDto": {
        "type": "object",
        "properties": {
          "courseCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "units": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "majorIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "prereqIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "coreqIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "required": [
          "courseCode",
          "name",
          "description",
          "units",
          "type"
        ]
      },
      "CourseRelationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "courseCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "courseCode",
          "name"
        ]
      },
      "CourseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "courseCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "units": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "prereqs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseRelationDto"
            }
          },
          "prereqFor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseRelationDto"
            }
          },
          "coreqs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseRelationDto"
            }
          },
          "coreqFor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseRelationDto"
            }
          }
        },
        "required": [
          "id",
          "courseCode",
          "name",
          "description",
          "units",
          "type",
          "isActive",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "prereqs",
          "prereqFor",
          "coreqs",
          "coreqFor"
        ]
      },
      "PaginatedCoursesDto": {
        "type": "object",
        "properties": {
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          },
          "courses": {
            "description": "List of courses for the current page",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseDto"
            }
          }
        },
        "required": [
          "meta",
          "courses"
        ]
      },
      "UpdateCourseDto": {
        "type": "object",
        "properties": {
          "courseCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "units": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "majorIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "prereqIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "coreqIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "UserStatus": {
        "type": "string",
        "enum": [
          "active",
          "disabled",
          "deleted"
        ]
      },
      "AuthMetadataDto": {
        "type": "object",
        "properties": {
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserStatus"
              }
            ]
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "BillType": {
        "type": "string",
        "enum": [
          "academic",
          "administrative",
          "facilities",
          "studentServices",
          "activities",
          "penalties"
        ]
      },
      "PaymentScheme": {
        "type": "string",
        "enum": [
          "full",
          "installment1",
          "installment2"
        ]
      },
      "BillingCostBreakdown": {
        "type": "object",
        "properties": {
          "cost": {
            "type": "string",
            "format": "Decimal.js"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          }
        },
        "required": [
          "cost",
          "name",
          "category"
        ]
      },
      "CreateBillingTypedBreakdownDto": {
        "type": "object",
        "properties": {
          "payerName": {
            "type": "string"
          },
          "payerEmail": {
            "type": "string"
          },
          "billType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillType"
              }
            ]
          },
          "paymentScheme": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheme"
              }
            ]
          },
          "totalAmount": {
            "type": "string",
            "format": "Decimal.js"
          },
          "costBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingCostBreakdown"
            }
          }
        },
        "required": [
          "payerName",
          "payerEmail",
          "billType",
          "paymentScheme",
          "totalAmount",
          "costBreakdown"
        ]
      },
      "CreateBillingDto": {
        "type": "object",
        "properties": {
          "dueDates": {
            "example": [
              "2025-01-01T00:00:00Z",
              "2025-02-01T12:30:00Z",
              "2025-03-01T12:30:00Z"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "bill": {
            "$ref": "#/components/schemas/CreateBillingTypedBreakdownDto"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "dueDates",
          "bill"
        ]
      },
      "BillDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "invoiceId": {
            "type": "integer",
            "format": "int32"
          },
          "payerName": {
            "type": "string"
          },
          "payerEmail": {
            "type": "string"
          },
          "billType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillType"
              }
            ]
          },
          "paymentScheme": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheme"
              }
            ]
          },
          "totalAmount": {
            "type": "string",
            "format": "Decimal.js"
          },
          "costBreakdown": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "invoiceId",
          "payerName",
          "payerEmail",
          "billType",
          "paymentScheme",
          "totalAmount",
          "costBreakdown",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "BillItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "invoiceId": {
            "type": "integer",
            "format": "int32"
          },
          "payerName": {
            "type": "string"
          },
          "payerEmail": {
            "type": "string"
          },
          "billType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillType"
              }
            ]
          },
          "paymentScheme": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheme"
              }
            ]
          },
          "totalAmount": {
            "type": "string",
            "format": "Decimal.js"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "totalPaid": {
            "type": "string",
            "format": "Decimal.js"
          },
          "status": {
            "type": "string",
            "enum": [
              "unpaid",
              "partial",
              "paid",
              "overpaid"
            ]
          },
          "totalInstallments": {
            "type": "number"
          },
          "paidInstallments": {
            "type": "number"
          },
          "installmentDueDates": {
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "invoiceId",
          "payerName",
          "payerEmail",
          "billType",
          "paymentScheme",
          "totalAmount",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "totalPaid",
          "status",
          "totalInstallments",
          "paidInstallments",
          "installmentDueDates"
        ]
      },
      "PaginatedBillsDto": {
        "type": "object",
        "properties": {
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          },
          "bills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillItemDto"
            }
          }
        },
        "required": [
          "meta",
          "bills"
        ]
      },
      "DetailedBillDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "invoiceId": {
            "type": "integer",
            "format": "int32"
          },
          "payerName": {
            "type": "string"
          },
          "payerEmail": {
            "type": "string"
          },
          "billType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillType"
              }
            ]
          },
          "paymentScheme": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheme"
              }
            ]
          },
          "totalAmount": {
            "type": "string",
            "format": "Decimal.js"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "totalPaid": {
            "type": "string",
            "format": "Decimal.js"
          },
          "status": {
            "type": "string",
            "enum": [
              "unpaid",
              "partial",
              "paid",
              "overpaid"
            ]
          },
          "costBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingCostBreakdown"
            }
          }
        },
        "required": [
          "id",
          "invoiceId",
          "payerName",
          "payerEmail",
          "billType",
          "paymentScheme",
          "totalAmount",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "totalPaid",
          "status",
          "costBreakdown"
        ]
      },
      "UpdateBillDto": {
        "type": "object",
        "properties": {
          "payerName": {
            "type": "string"
          },
          "payerEmail": {
            "type": "string"
          },
          "billType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillType"
              }
            ]
          },
          "paymentScheme": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentScheme"
              }
            ]
          },
          "totalAmount": {
            "type": "string",
            "format": "Decimal.js"
          },
          "costBreakdown": {
            "type": "object"
          }
        }
      },
      "BillInstallmentItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "installmentOrder": {
            "type": "integer",
            "format": "int32"
          },
          "amountToPay": {
            "type": "string",
            "format": "Decimal.js"
          },
          "dueAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "totalPaid": {
            "type": "string",
            "format": "Decimal.js"
          },
          "status": {
            "enum": [
              "unpaid",
              "partial",
              "paid",
              "overpaid"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "installmentOrder",
          "amountToPay",
          "dueAt",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "totalPaid",
          "status"
        ]
      },
      "InitiatePaymentDto": {
        "type": "object",
        "properties": {
          "installmentId": {
            "type": "string",
            "format": "uuid"
          },
          "installmentOrder": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "statementDescriptor": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "installmentId",
          "installmentOrder",
          "amount"
        ]
      },
      "PaymentIntentAttributesDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "capture_type": {
            "type": "string"
          },
          "client_key": {
            "type": "string"
          },
          "created_at": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "last_payment_error": {
            "type": "string",
            "nullable": true
          },
          "livemode": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "next_action": {
            "type": "object",
            "nullable": true
          },
          "original_amount": {
            "type": "number"
          },
          "payment_method_allowed": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payment_method_options": {
            "type": "object",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "setup_future_usage": {
            "type": "string",
            "nullable": true
          },
          "statement_descriptor": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "updated_at": {
            "type": "number"
          }
        },
        "required": [
          "amount",
          "capture_type",
          "client_key",
          "created_at",
          "currency",
          "description",
          "livemode",
          "original_amount",
          "payment_method_allowed",
          "payments",
          "statement_descriptor",
          "status",
          "updated_at"
        ]
      },
      "PaymentIntentDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/PaymentIntentAttributesDto"
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ]
      },
      "PaymentIntentResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PaymentIntentDataDto"
          }
        },
        "required": [
          "data"
        ]
      },
      "PaymentType": {
        "type": "string",
        "enum": [
          "card",
          "paymaya",
          "gcash",
          "qrph",
          "manual"
        ]
      },
      "CreatePayment": {
        "type": "object",
        "properties": {
          "amountPaid": {
            "type": "string",
            "format": "Decimal.js"
          },
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ]
          },
          "notes": {
            "type": "string"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "paymongoData": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "amountPaid",
          "paymentType",
          "notes",
          "paymentDate"
        ]
      },
      "CreatePaymentDto": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/CreatePayment"
          },
          "installmentId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "statementDescriptor": {
            "type": "string"
          }
        },
        "required": [
          "payment"
        ]
      },
      "BillPaymentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "installmentOrder": {
            "type": "integer",
            "format": "int32"
          },
          "amountPaid": {
            "type": "string",
            "format": "Decimal.js"
          },
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ]
          },
          "notes": {
            "type": "string"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "paymongoData": {
            "type": "object",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "installmentOrder",
          "amountPaid",
          "paymentType",
          "notes",
          "paymentDate",
          "paymongoData",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UpdateBillPaymentDto": {
        "type": "object",
        "properties": {
          "installmentOrder": {
            "type": "integer",
            "format": "int32"
          },
          "amountPaid": {
            "type": "string",
            "format": "Decimal.js"
          },
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentType"
              }
            ]
          },
          "notes": {
            "type": "string"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time"
          },
          "paymongoData": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "CreateProgramDto": {
        "type": "object",
        "properties": {
          "programCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "yearDuration": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "programCode",
          "name",
          "description",
          "yearDuration"
        ]
      },
      "Program": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "programCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "yearDuration": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "programCode",
          "name",
          "description",
          "yearDuration",
          "isActive",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "ProgramDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "programCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "yearDuration": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "programCode",
          "name",
          "description",
          "yearDuration",
          "isActive",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "PaginatedProgramsDto": {
        "type": "object",
        "properties": {
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          },
          "programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramDto"
            }
          }
        },
        "required": [
          "meta",
          "programs"
        ]
      },
      "MajorItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "majorCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "programId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "majorCode",
          "name",
          "description",
          "isActive",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "programId"
        ]
      },
      "PaginatedMajorsDto": {
        "type": "object",
        "properties": {
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          },
          "majors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MajorItemDto"
            }
          }
        },
        "required": [
          "meta",
          "majors"
        ]
      },
      "UpdateProgramDto": {
        "type": "object",
        "properties": {
          "programCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "yearDuration": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Turn": {
        "type": "object",
        "properties": {
          "role": {
            "enum": [
              "user",
              "model"
            ],
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "role",
          "content"
        ]
      },
      "PromptDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "sessionHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Turn"
            }
          }
        },
        "required": [
          "question",
          "sessionHistory"
        ]
      },
      "ChatbotResponseDto": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string"
          }
        },
        "required": [
          "response"
        ]
      },
      "CreateMajorDto": {
        "type": "object",
        "properties": {
          "majorCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "majorCode",
          "name",
          "description"
        ]
      },
      "CreateProgramMajorDto": {
        "type": "object",
        "properties": {
          "major": {
            "$ref": "#/components/schemas/CreateMajorDto"
          },
          "programId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "major",
          "programId"
        ]
      },
      "MajorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "majorCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "majorCode",
          "name",
          "description",
          "isActive",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UpdateMajorDto": {
        "type": "object",
        "properties": {
          "majorCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Major": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "programId": {
            "type": "string"
          },
          "majorCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "programId",
          "majorCode",
          "name",
          "description",
          "isActive",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "EnrollmentStatus": {
        "type": "string",
        "enum": [
          "draft",
          "upcoming",
          "active",
          "extended",
          "closed",
          "canceled",
          "archived"
        ]
      },
      "CreateEnrollmentPeriodDto": {
        "type": "object",
        "properties": {
          "startYear": {
            "type": "integer",
            "format": "int32"
          },
          "endYear": {
            "type": "integer",
            "format": "int32"
          },
          "term": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnrollmentStatus"
              }
            ]
          }
        },
        "required": [
          "startYear",
          "endYear",
          "term",
          "startDate",
          "endDate",
          "status"
        ]
      },
      "EnrollmentPeriodDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "startYear": {
            "type": "integer",
            "format": "int32"
          },
          "endYear": {
            "type": "integer",
            "format": "int32"
          },
          "term": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnrollmentStatus"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "startYear",
          "endYear",
          "term",
          "startDate",
          "endDate",
          "status",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "PaginatedEnrollmentPeriodsDto": {
        "type": "object",
        "properties": {
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          },
          "enrollments": {
            "description": "List of enrollment periods for the current page",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnrollmentPeriodDto"
            }
          }
        },
        "required": [
          "meta",
          "enrollments"
        ]
      },
      "UpdateEnrollmentDto": {
        "type": "object",
        "properties": {
          "startYear": {
            "type": "integer",
            "format": "int32"
          },
          "endYear": {
            "type": "integer",
            "format": "int32"
          },
          "term": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateEnrollmentStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnrollmentStatus"
              }
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateCourseOfferingDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "courseId"
        ]
      },
      "CourseEnrollmentStatus": {
        "type": "string",
        "enum": [
          "enlisted",
          "finalized",
          "enrolled",
          "completed",
          "incomplete",
          "dropped",
          "failed"
        ]
      },
      "CourseEnrollment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "courseOfferingId": {
            "type": "string"
          },
          "courseSectionId": {
            "type": "string"
          },
          "studentId": {
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CourseEnrollmentStatus"
              }
            ]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "courseOfferingId",
          "courseSectionId",
          "studentId",
          "status",
          "startedAt",
          "completedAt",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "Days": {
        "type": "string",
        "enum": [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday"
        ]
      },
      "CourseSection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "mentorId": {
            "type": "string",
            "nullable": true
          },
          "courseOfferingId": {
            "type": "string"
          },
          "courseEnrollments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseEnrollment"
            }
          },
          "maxSlot": {
            "type": "integer",
            "format": "int32"
          },
          "startSched": {
            "type": "string"
          },
          "endSched": {
            "type": "string"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Days"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "mentorId",
          "courseOfferingId",
          "maxSlot",
          "startSched",
          "endSched",
          "days",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "CourseOffering": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "courseId": {
            "type": "string"
          },
          "periodId": {
            "type": "string"
          },
          "courseEnrollment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseEnrollment"
            }
          },
          "courseSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseSection"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "courseId",
          "periodId",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "CreateCourseOfferingCurriculumDto": {
        "type": "object",
        "properties": {
          "curriculumId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "curriculumId"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "disabledAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "createdAt",
          "updatedAt",
          "disabledAt",
          "deletedAt"
        ]
      },
      "DetailedCourseSectionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "maxSlot": {
            "type": "integer",
            "format": "int32"
          },
          "startSched": {
            "type": "string"
          },
          "endSched": {
            "type": "string"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Days"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "user": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDto"
              }
            ]
          },
          "mentorId": {
            "type": "string",
            "nullable": true,
            "format": "uuid"
          }
        },
        "required": [
          "id",
          "name",
          "maxSlot",
          "startSched",
          "endSched",
          "days",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "user",
          "mentorId"
        ]
      },
      "DetailedCourseOfferingSubsetDto": {
        "type": "object",
        "properties": {
          "course": {
            "$ref": "#/components/schemas/CourseDto"
          }
        },
        "required": [
          "course"
        ]
      },
      "DetailedCourseEnrollmentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CourseEnrollmentStatus"
              }
            ]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "studentId": {
            "type": "string",
            "format": "uuid"
          },
          "courseOfferingId": {
            "type": "string",
            "format": "uuid"
          },
          "courseSectionId": {
            "type": "string",
            "format": "uuid"
          },
          "courseSection": {
            "$ref": "#/components/schemas/DetailedCourseSectionDto"
          },
          "courseOffering": {
            "$ref": "#/components/schemas/DetailedCourseOfferingSubsetDto"
          }
        },
        "required": [
          "id",
          "status",
          "startedAt",
          "completedAt",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "studentId",
          "courseOfferingId",
          "courseSectionId"
        ]
      },
      "DetailedCourseOfferingDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "course": {
            "$ref": "#/components/schemas/CourseDto"
          },
          "courseSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailedCourseSectionDto"
            }
          },
          "courseEnrollment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailedCourseEnrollmentDto"
            }
          },
          "periodId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "course",
          "courseSections",
          "courseEnrollment",
          "periodId"
        ]
      },
      "PaginatedCourseOfferingsDto": {
        "type": "object",
        "properties": {
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          },
          "courseOfferings": {
            "description": "List of course offerings for the current page",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailedCourseOfferingDto"
            }
          }
        },
        "required": [
          "meta",
          "courseOfferings"
        ]
      },
      "CourseOfferingDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "CourseSectionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "maxSlot": {
            "type": "integer",
            "format": "int32"
          },
          "startSched": {
            "type": "string"
          },
          "endSched": {
            "type": "string"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Days"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "maxSlot",
          "startSched",
          "endSched",
          "days",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "PaginatedCourseSectionsDto": {
        "type": "object",
        "properties": {
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          },
          "courseSections": {
            "description": "List of course sections for the current page",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseSectionDto"
            }
          }
        },
        "required": [
          "meta",
          "courseSections"
        ]
      },
      "CreateCourseSectionFullDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "maxSlot": {
            "type": "integer",
            "format": "int32"
          },
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Days"
            }
          },
          "startSched": {
            "type": "string",
            "pattern": "/^([01]\\d|2[0-3]):([0-5]\\d)$/"
          },
          "endSched": {
            "type": "string",
            "pattern": "/^([01]\\d|2[0-3]):([0-5]\\d)$/"
          },
          "mentorId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "maxSlot",
          "days",
          "startSched",
          "endSched"
        ]
      },
      "UpdateCourseSectionDto": {
        "type": "object",
        "properties": {}
      },
      "StudentIdentifierDto": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CourseEnrollmentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CourseEnrollmentStatus"
              }
            ]
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "startedAt",
          "completedAt",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "CreateCurriculumDto": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateCurriculumCourseItemDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "format": "uuid"
          },
          "order": {
            "type": "number"
          },
          "year": {
            "type": "number",
            "minimum": 1
          },
          "semester": {
            "type": "number",
            "minimum": 1
          }
        },
        "required": [
          "courseId",
          "order",
          "year",
          "semester"
        ]
      },
      "CreateCurriculumWithCoursesDto": {
        "type": "object",
        "properties": {
          "majorId": {
            "type": "string",
            "format": "uuid"
          },
          "curriculum": {
            "$ref": "#/components/schemas/CreateCurriculumDto"
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCurriculumCourseItemDto"
            }
          }
        },
        "required": [
          "majorId",
          "curriculum",
          "courses"
        ]
      },
      "CurriculumDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "icon",
          "name",
          "description",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "CurriculumItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "program": {
            "$ref": "#/components/schemas/ProgramDto"
          },
          "major": {
            "$ref": "#/components/schemas/MajorDto"
          }
        },
        "required": [
          "id",
          "icon",
          "name",
          "description",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "program",
          "major"
        ]
      },
      "CurriculumCourseItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "semester": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "course": {
            "$ref": "#/components/schemas/CourseDto"
          }
        },
        "required": [
          "id",
          "order",
          "year",
          "semester",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "course"
        ]
      },
      "CurriculumWithCoursesDto": {
        "type": "object",
        "properties": {
          "curriculum": {
            "$ref": "#/components/schemas/CurriculumItemDto"
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurriculumCourseItemDto"
            }
          }
        },
        "required": [
          "curriculum",
          "courses"
        ]
      },
      "UpdateCurriculumDto": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateCurriculumCourseItemDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "format": "uuid"
          },
          "order": {
            "type": "number"
          },
          "year": {
            "type": "number",
            "minimum": 1
          },
          "semester": {
            "type": "number",
            "minimum": 1
          }
        },
        "required": [
          "courseId",
          "order",
          "year",
          "semester"
        ]
      },
      "UpdateCurriculumWithCourseDto": {
        "type": "object",
        "properties": {
          "majorId": {
            "type": "string",
            "format": "uuid"
          },
          "curriculum": {
            "$ref": "#/components/schemas/UpdateCurriculumDto"
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateCurriculumCourseItemDto"
            }
          }
        },
        "required": [
          "curriculum",
          "courses"
        ]
      }
    }
  }
}