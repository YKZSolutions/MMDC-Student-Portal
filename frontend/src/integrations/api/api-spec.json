{
  "openapi": "3.0.0",
  "paths": {
    "/users": {
      "post": {
        "description": "This operation creates both a user and a supabase auth account",
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserFullDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new user",
        "tags": ["Users"]
      },
      "get": {
        "description": "Retrieves a paginated list of users based on the provided filter parameters.\n- **Access:** Requires `ADMIN` role.\n- **Filtering & Pagination:** Uses the `FilterUserDto` to define query parameters such as search terms, sorting, and page size.",
        "operationId": "UsersController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["student", "mentor", "admin"]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaginatedUsersDto" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get users",
        "tags": ["Users"]
      }
    },
    "/users/student": {
      "post": {
        "description": "This operation creates both a user and a supabase auth account.\nIt also has additional properties for student specific details.",
        "operationId": "UsersController_createStudent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserStudentDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new student user",
        "tags": ["Users"]
      }
    },
    "/users/staff": {
      "post": {
        "description": "This operation creates both a user and a supabase auth account.\nIt also has additional properties for staff specific details.",
        "operationId": "UsersController_createStaff",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserStaffDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Create a new staff user",
        "tags": ["Users"]
      }
    },
    "/users/invite": {
      "post": {
        "description": "This operation creates both a user and a supabase auth account",
        "operationId": "UsersController_inviteUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InviteUserDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Invite a new user",
        "tags": ["Users"]
      }
    },
    "/users/me": {
      "get": {
        "description": "This endpoint returns the full profile of the currently authenticated user.\nThe structure of the returned object depends on the user's role:\n\n- `UserStudentDetailsDto` for users with the `student` role\n- `UserStaffDetailsDto` for users with the `mentor` or `admin` role",
        "operationId": "UsersController_getMe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current user details fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "oneOf": [
                    { "$ref": "#/components/schemas/UserStudentDetailsDto" },
                    { "$ref": "#/components/schemas/UserStaffDetailsDto" }
                  ]
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "examples": {
                  "UnauthorizedException": {
                    "description": "Unauthorized",
                    "value": {
                      "statusCode": 401,
                      "message": "Unauthorized",
                      "error": "Unauthorized"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 401 },
                    "message": { "type": "string", "example": "Unauthorized" },
                    "error": { "type": "string", "example": "Unauthorized" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 404 },
                    "message": { "type": "string", "example": "Not Found" },
                    "error": { "type": "string", "example": "Not Found" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get the currently authenticated user",
        "tags": ["Users"]
      },
      "put": {
        "description": "This operation updates the user details in the database",
        "operationId": "UsersController_updateOwnUserDetails",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserBaseDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update personal details",
        "tags": ["Users"]
      }
    },
    "/users/{id}/student": {
      "put": {
        "description": "This operation updates the user details in the database.\nThe user should be have a student role.",
        "operationId": "UsersController_updateUserStudentDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserStudentDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update student user details (Admin only)",
        "tags": ["Users"]
      }
    },
    "/users/{id}/staff": {
      "put": {
        "description": "This operation updates the user details in the database.\nThe user should be have a mentor or admin role.",
        "operationId": "UsersController_updateUserStaffDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserStaffDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Update staff user details (Admin only)",
        "tags": ["Users"]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieves a specific user by their unique identifier.\n- **Validation:** Ensures the provided `id` is a valid identifier format.\n- **Not Found Handling:** Throws an error if no matching user is found.",
        "operationId": "UsersController_findOne",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException": {
                    "description": "Bad Request",
                    "value": {
                      "statusCode": 400,
                      "message": "Bad Request",
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 400 },
                    "message": { "type": "string", "example": "Bad Request" },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 404 },
                    "message": { "type": "string", "example": "Not Found" },
                    "error": { "type": "string", "example": "Not Found" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Get user by id",
        "tags": ["Users"]
      },
      "delete": {
        "description": "This endpoint performs either a soft delete or a permanent delete on a user depending on the current state of the user or the query parameter provided:\n\n- If `directDelete` is true, the user is **permanently deleted** without checking if they are already soft deleted.\n- If `directDelete` is not provided or false:\n  - If the user is not yet soft deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.\n  - If the user is already soft deleted, a **permanent delete** is executed.\n\nAll of the user details and the supabase auth account will be deleted from the cloud on hard delete\n\nUse this endpoint to manage user deletion workflows flexibly through a single API.",
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "directDelete",
            "required": false,
            "in": "query",
            "description": "If set to true, will skip the soft delete process",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "examples": [
                        "User has been soft deleted.",
                        "User has been permanently deleted."
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 404 },
                    "message": { "type": "string", "example": "Not Found" },
                    "error": { "type": "string", "example": "Not Found" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Deletes a user (soft & hard delete)",
        "tags": ["Users"]
      }
    },
    "/users/{id}/status": {
      "patch": {
        "description": "This endpoint toggles the user's status between active and disabled\nby updating the `disabledAt` field. The change is also reflected in\nthe authentication provider's metadata.",
        "operationId": "UsersController_updateUserStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "User status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "examples": [
                        "User enabled successfully.",
                        "User disabled successfully."
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "Not Found",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 404 },
                    "message": { "type": "string", "example": "Not Found" },
                    "error": { "type": "string", "example": "Not Found" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "Internal Server Error",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "security": [{ "bearer": [] }],
        "summary": "Updates the status of a user (enable/disable).",
        "tags": ["Users"]
      }
    },
    "/courses": {
      "post": {
        "operationId": "CoursesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCourseDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        },
        "tags": ["Courses"]
      },
      "get": {
        "operationId": "CoursesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        },
        "tags": ["Courses"]
      }
    },
    "/courses/{id}": {
      "get": {
        "operationId": "CoursesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        },
        "tags": ["Courses"]
      },
      "patch": {
        "operationId": "CoursesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateCourseDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        },
        "tags": ["Courses"]
      },
      "delete": {
        "operationId": "CoursesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        },
        "tags": ["Courses"]
      }
    },
    "/test/student": {
      "get": {
        "operationId": "TestController_testStudent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        },
        "tags": ["Test"]
      }
    },
    "/test/admin": {
      "get": {
        "operationId": "TestController_testAdmin",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        },
        "tags": ["Test"]
      }
    },
    "/auth/{uid}/metadata": {
      "get": {
        "description": "Retrieves the supabase auth account's metadata based on the uid given",
        "operationId": "AuthController_getMetadata",
        "parameters": [
          {
            "name": "uid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthMetadataDto" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "NotFoundException": {
                    "description": "If the uid provided is invalid",
                    "value": {
                      "statusCode": 404,
                      "message": "Not Found",
                      "error": "Not Found"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "description": "If the uid provided is invalid",
                  "properties": {
                    "statusCode": { "type": "number", "example": 404 },
                    "message": { "type": "string", "example": "Not Found" },
                    "error": { "type": "string", "example": "Not Found" }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "examples": {
                  "InternalServerErrorException": {
                    "description": "If an unexpected server error has occured",
                    "value": {
                      "statusCode": 500,
                      "message": "Internal Server Error",
                      "error": "Internal Server Error"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "description": "If an unexpected server error has occured",
                  "properties": {
                    "statusCode": { "type": "number", "example": 500 },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  },
                  "required": ["statusCode", "message"]
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get User Account Metadata",
        "tags": ["Auth"]
      }
    }
  },
  "info": {
    "title": "API",
    "description": "Description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [{ "name": "api", "description": "" }],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
    },
    "schemas": {
      "Role": { "type": "string", "enum": ["student", "mentor", "admin"] },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firstName": { "type": "string" },
          "middleName": { "type": "string", "nullable": true },
          "lastName": { "type": "string" }
        },
        "required": ["firstName", "lastName"]
      },
      "UserCredentialsDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string" }
        },
        "required": ["email"]
      },
      "ConnectUserDto": {
        "type": "object",
        "properties": { "id": { "type": "string" } },
        "required": ["id"]
      },
      "CreateUserDetailsUserRelationInputDto": {
        "type": "object",
        "properties": {
          "connect": { "$ref": "#/components/schemas/ConnectUserDto" }
        },
        "required": ["connect"]
      },
      "CreateUserDetailsDto": {
        "type": "object",
        "properties": {
          "dateJoined": { "type": "string", "format": "date-time" },
          "dob": { "type": "string", "nullable": true, "format": "date-time" },
          "gender": { "type": "string", "nullable": true }
        },
        "required": ["dateJoined"]
      },
      "CreateUserFullDto": {
        "type": "object",
        "properties": {
          "role": { "allOf": [{ "$ref": "#/components/schemas/Role" }] },
          "user": { "$ref": "#/components/schemas/CreateUserDto" },
          "credentials": { "$ref": "#/components/schemas/UserCredentialsDto" },
          "userDetails": { "$ref": "#/components/schemas/CreateUserDetailsDto" }
        },
        "required": ["role", "user", "credentials"]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "firstName": { "type": "string" },
          "middleName": { "type": "string", "nullable": true },
          "lastName": { "type": "string" },
          "role": { "allOf": [{ "$ref": "#/components/schemas/Role" }] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "disabledAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "createdAt",
          "updatedAt",
          "disabledAt",
          "deletedAt"
        ]
      },
      "CreateStudentDetailsUserRelationInputDto": {
        "type": "object",
        "properties": {
          "connect": { "$ref": "#/components/schemas/ConnectUserDto" }
        },
        "required": ["connect"]
      },
      "StudentType": {
        "type": "string",
        "enum": [
          "new",
          "regular",
          "irregular",
          "transfer",
          "returnee",
          "graduate",
          "special"
        ]
      },
      "CreateStudentDetailsDto": {
        "type": "object",
        "properties": {
          "student_number": { "type": "integer", "format": "int32" },
          "student_type": {
            "allOf": [{ "$ref": "#/components/schemas/StudentType" }]
          },
          "admission_date": { "type": "string", "format": "date-time" },
          "other_details": { "type": "object" }
        },
        "required": [
          "student_number",
          "student_type",
          "admission_date",
          "other_details"
        ]
      },
      "CreateUserStudentDto": {
        "type": "object",
        "properties": {
          "specificDetails": {
            "$ref": "#/components/schemas/CreateStudentDetailsDto"
          },
          "user": { "$ref": "#/components/schemas/CreateUserDto" },
          "credentials": { "$ref": "#/components/schemas/UserCredentialsDto" },
          "userDetails": { "$ref": "#/components/schemas/CreateUserDetailsDto" }
        },
        "required": ["specificDetails", "user", "credentials"]
      },
      "StaffRole": { "type": "string", "enum": ["mentor", "admin"] },
      "CreateStaffDetailsUserRelationInputDto": {
        "type": "object",
        "properties": {
          "connect": { "$ref": "#/components/schemas/ConnectUserDto" }
        },
        "required": ["connect"]
      },
      "CreateStaffDetailsDto": {
        "type": "object",
        "properties": {
          "employee_number": { "type": "integer", "format": "int32" },
          "department": { "type": "string" },
          "position": { "type": "string" },
          "other_details": { "type": "object" }
        },
        "required": [
          "employee_number",
          "department",
          "position",
          "other_details"
        ]
      },
      "CreateUserStaffDto": {
        "type": "object",
        "properties": {
          "role": { "allOf": [{ "$ref": "#/components/schemas/StaffRole" }] },
          "specificDetails": {
            "$ref": "#/components/schemas/CreateStaffDetailsDto"
          },
          "user": { "$ref": "#/components/schemas/CreateUserDto" },
          "credentials": { "$ref": "#/components/schemas/UserCredentialsDto" },
          "userDetails": { "$ref": "#/components/schemas/CreateUserDetailsDto" }
        },
        "required": ["role", "specificDetails", "user", "credentials"]
      },
      "InviteUserDto": {
        "type": "object",
        "properties": {
          "firstName": { "type": "string" },
          "middleName": { "type": "string", "nullable": true },
          "lastName": { "type": "string" },
          "role": { "allOf": [{ "$ref": "#/components/schemas/Role" }] },
          "email": { "type": "string", "format": "email" }
        },
        "required": ["firstName", "lastName", "role", "email"]
      },
      "UserDetailsDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "dateJoined": { "type": "string", "format": "date-time" },
          "dob": { "type": "string", "nullable": true, "format": "date-time" },
          "gender": { "type": "string", "nullable": true },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "dateJoined",
          "dob",
          "gender",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UserDetailsFullDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "type": "string", "nullable": true },
          "firstName": { "type": "string" },
          "middleName": { "type": "string", "nullable": true },
          "lastName": { "type": "string" },
          "role": { "type": "string", "enum": ["student", "mentor", "admin"] },
          "userDetails": {
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/UserDetailsDto" }]
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "userDetails"
        ]
      },
      "StudentDetailsDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "student_number": { "type": "integer", "format": "int32" },
          "student_type": {
            "allOf": [{ "$ref": "#/components/schemas/StudentType" }]
          },
          "admission_date": { "type": "string", "format": "date-time" },
          "other_details": { "type": "object" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "student_number",
          "student_type",
          "admission_date",
          "other_details",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UserStudentDetailsDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "type": "string", "nullable": true },
          "firstName": { "type": "string" },
          "middleName": { "type": "string", "nullable": true },
          "lastName": { "type": "string" },
          "role": { "type": "string", "enum": ["student", "mentor", "admin"] },
          "userDetails": {
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/UserDetailsDto" }]
          },
          "studentDetails": {
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/StudentDetailsDto" }]
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "userDetails",
          "studentDetails"
        ]
      },
      "StaffDetailsDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "employee_number": { "type": "integer", "format": "int32" },
          "department": { "type": "string" },
          "position": { "type": "string" },
          "other_details": { "type": "object" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "deletedAt": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "employee_number",
          "department",
          "position",
          "other_details",
          "createdAt",
          "updatedAt",
          "deletedAt"
        ]
      },
      "UserStaffDetailsDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "email": { "type": "string", "nullable": true },
          "firstName": { "type": "string" },
          "middleName": { "type": "string", "nullable": true },
          "lastName": { "type": "string" },
          "role": { "type": "string", "enum": ["student", "mentor", "admin"] },
          "userDetails": {
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/UserDetailsDto" }]
          },
          "staffDetails": {
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/StaffDetailsDto" }]
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "middleName",
          "lastName",
          "role",
          "userDetails",
          "staffDetails"
        ]
      },
      "UpdateStudentDetailsDto": {
        "type": "object",
        "properties": {
          "student_number": { "type": "integer", "format": "int32" },
          "student_type": {
            "allOf": [{ "$ref": "#/components/schemas/StudentType" }]
          },
          "admission_date": { "type": "string", "format": "date-time" },
          "other_details": { "type": "object" }
        }
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": { "type": "string" },
          "middleName": { "type": "string", "nullable": true },
          "lastName": { "type": "string" }
        }
      },
      "UpdateUserDetailsDto": {
        "type": "object",
        "properties": {
          "dateJoined": { "type": "string", "format": "date-time" },
          "dob": { "type": "string", "nullable": true, "format": "date-time" },
          "gender": { "type": "string", "nullable": true }
        }
      },
      "UpdateUserStudentDto": {
        "type": "object",
        "properties": {
          "specificDetails": {
            "$ref": "#/components/schemas/UpdateStudentDetailsDto"
          },
          "user": { "$ref": "#/components/schemas/UpdateUserDto" },
          "userDetails": { "$ref": "#/components/schemas/UpdateUserDetailsDto" }
        }
      },
      "UpdateStaffDetailsDto": {
        "type": "object",
        "properties": {
          "employee_number": { "type": "integer", "format": "int32" },
          "department": { "type": "string" },
          "position": { "type": "string" },
          "other_details": { "type": "object" }
        }
      },
      "UpdateUserStaffDto": {
        "type": "object",
        "properties": {
          "specificDetails": {
            "$ref": "#/components/schemas/UpdateStaffDetailsDto"
          },
          "user": { "$ref": "#/components/schemas/UpdateUserDto" },
          "userDetails": { "$ref": "#/components/schemas/UpdateUserDetailsDto" }
        }
      },
      "UpdateUserBaseDto": {
        "type": "object",
        "properties": {
          "user": { "$ref": "#/components/schemas/UpdateUserDto" },
          "userDetails": { "$ref": "#/components/schemas/UpdateUserDetailsDto" }
        }
      },
      "UserAccount": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "authUid": { "type": "string" },
          "email": { "type": "string" },
          "createdAt": { "format": "date-time", "type": "string" },
          "updatedAt": { "format": "date-time", "type": "string" },
          "deletedAt": { "format": "date-time", "type": "string" }
        },
        "required": ["id", "userId", "authUid", "createdAt", "updatedAt"]
      },
      "UserDetails": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "userId": { "type": "string" },
          "dob": { "format": "date-time", "type": "string" },
          "gender": { "type": "string" },
          "createdAt": { "format": "date-time", "type": "string" },
          "updatedAt": { "format": "date-time", "type": "string" },
          "deletedAt": { "format": "date-time", "type": "string" }
        },
        "required": ["id", "userId", "createdAt", "updatedAt"]
      },
      "UserWithRelations": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "firstName": { "type": "string" },
          "middleName": { "type": "string" },
          "lastName": { "type": "string" },
          "role": { "allOf": [{ "$ref": "#/components/schemas/Role" }] },
          "createdAt": { "format": "date-time", "type": "string" },
          "updatedAt": { "format": "date-time", "type": "string" },
          "deletedAt": { "format": "date-time", "type": "string" },
          "userAccount": {
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/UserAccount" }]
          },
          "userDetails": {
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/UserDetails" }]
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "role",
          "createdAt",
          "updatedAt",
          "userAccount",
          "userDetails"
        ]
      },
      "PaginationMetaDto": {
        "type": "object",
        "properties": {
          "isFirstPage": { "type": "boolean", "example": true },
          "isLastPage": { "type": "boolean", "example": true },
          "currentPage": { "type": "number", "example": 1 },
          "previousPage": {
            "type": "number",
            "nullable": true,
            "example": null
          },
          "nextPage": { "type": "number", "nullable": true, "example": null },
          "pageCount": { "type": "number", "example": 1 },
          "totalCount": { "type": "number", "example": 42 }
        },
        "required": [
          "isFirstPage",
          "isLastPage",
          "currentPage",
          "previousPage",
          "nextPage",
          "pageCount",
          "totalCount"
        ]
      },
      "PaginatedUsersDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserWithRelations" }
          },
          "meta": {
            "additionalProperties": true,
            "nullable": false,
            "allOf": [{ "$ref": "#/components/schemas/PaginationMetaDto" }]
          }
        },
        "required": ["users", "meta"]
      },
      "CreateCourseDto": { "type": "object", "properties": {} },
      "UpdateCourseDto": { "type": "object", "properties": {} },
      "UserStatus": {
        "type": "string",
        "enum": ["active", "disabled", "deleted"]
      },
      "AuthMetadataDto": {
        "type": "object",
        "properties": {
          "role": { "allOf": [{ "$ref": "#/components/schemas/Role" }] },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/UserStatus" }]
          },
          "user_id": { "type": "string" }
        }
      }
    }
  }
}
