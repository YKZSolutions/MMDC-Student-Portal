// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zTestBodyNestDto = z.object({
    name: z.string()
});

export const zTestBodyDto = z.object({
    id: z.number(),
    nested: zTestBodyNestDto
});

export const zRole = z.enum([
    'student',
    'mentor',
    'admin'
]);

export const zCreateUserDto = z.object({
    firstName: z.string(),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.string()
});

export const zUserCredentialsDto = z.object({
    email: z.email(),
    password: z.optional(z.string())
});

export const zCreateUserDetailsDto = z.object({
    dateJoined: z.iso.datetime(),
    dob: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    gender: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateUserFullDto = z.object({
    role: zRole,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zUser = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    disabledAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zStudentType = z.enum([
    'new',
    'regular',
    'irregular',
    'transfer',
    'returnee',
    'graduate',
    'special'
]);

export const zCreateStudentDetailsDto = z.object({
    studentNumber: z.int(),
    studentType: zStudentType,
    admissionDate: z.iso.datetime(),
    otherDetails: z.object({})
});

export const zCreateUserStudentDto = z.object({
    specificDetails: zCreateStudentDetailsDto,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zStaffRole = z.enum([
    'mentor',
    'admin'
]);

export const zCreateStaffDetailsDto = z.object({
    employeeNumber: z.int(),
    department: z.string(),
    position: z.string(),
    otherDetails: z.object({})
});

export const zCreateUserStaffDto = z.object({
    role: zStaffRole,
    specificDetails: zCreateStaffDetailsDto,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zInviteUserDto = z.object({
    firstName: z.string(),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.string(),
    role: zRole,
    email: z.email()
});

export const zUserDetailsDto = z.object({
    id: z.string(),
    dateJoined: z.iso.datetime(),
    dob: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gender: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserDetailsFullDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ])
});

export const zStudentDetailsDto = z.object({
    id: z.string(),
    studentNumber: z.int(),
    studentType: zStudentType,
    admissionDate: z.iso.datetime(),
    otherDetails: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserStudentDetailsDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ]),
    studentDetails: z.union([
        zStudentDetailsDto,
        z.null()
    ])
});

export const zStaffDetailsDto = z.object({
    id: z.string(),
    employeeNumber: z.int(),
    department: z.string(),
    position: z.string(),
    otherDetails: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserStaffDetailsDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ]),
    staffDetails: z.union([
        zStaffDetailsDto,
        z.null()
    ])
});

export const zUpdateStudentDetailsDto = z.object({
    studentNumber: z.optional(z.int()),
    studentType: z.optional(zStudentType),
    admissionDate: z.optional(z.iso.datetime()),
    otherDetails: z.optional(z.object({}))
});

export const zUpdateUserDto = z.object({
    firstName: z.optional(z.string()),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.optional(z.string())
});

export const zUpdateUserDetailsDto = z.object({
    dateJoined: z.optional(z.iso.datetime()),
    dob: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    gender: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateUserStudentDto = z.object({
    specificDetails: z.optional(zUpdateStudentDetailsDto),
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zUpdateStaffDetailsDto = z.object({
    employeeNumber: z.optional(z.int()),
    department: z.optional(z.string()),
    position: z.optional(z.string()),
    otherDetails: z.optional(z.object({}))
});

export const zUpdateUserStaffDto = z.object({
    specificDetails: z.optional(zUpdateStaffDetailsDto),
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zUpdateUserBaseDto = z.object({
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zPaginationMetaDto = z.object({
    isFirstPage: z.boolean(),
    isLastPage: z.boolean(),
    currentPage: z.number(),
    previousPage: z.union([
        z.number(),
        z.null()
    ]),
    nextPage: z.union([
        z.number(),
        z.null()
    ]),
    pageCount: z.number(),
    totalCount: z.number()
});

export const zUserAccountDto = z.object({
    id: z.string(),
    authUid: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserWithRelations = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    disabledAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    userAccount: z.union([
        zUserAccountDto,
        z.null()
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ])
});

export const zPaginatedUsersDto = z.object({
    meta: zPaginationMetaDto,
    users: z.array(zUserWithRelations)
});

export const zCreateCourseDto = z.object({
    courseCode: z.string(),
    name: z.string(),
    description: z.string(),
    units: z.int(),
    type: z.string(),
    majorIds: z.optional(z.array(z.uuid())),
    prereqIds: z.optional(z.array(z.uuid())),
    coreqIds: z.optional(z.array(z.uuid()))
});

export const zCourseRelationDto = z.object({
    id: z.string(),
    courseCode: z.string(),
    name: z.string()
});

export const zCourseDto = z.object({
    id: z.string(),
    courseCode: z.string(),
    name: z.string(),
    description: z.string(),
    units: z.int(),
    type: z.string(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    prereqs: z.array(zCourseRelationDto),
    prereqFor: z.array(zCourseRelationDto),
    coreqs: z.array(zCourseRelationDto),
    coreqFor: z.array(zCourseRelationDto)
});

export const zPaginatedCoursesDto = z.object({
    meta: zPaginationMetaDto,
    courses: z.array(zCourseDto)
});

export const zUpdateCourseDto = z.object({
    courseCode: z.optional(z.string()),
    name: z.optional(z.string()),
    description: z.optional(z.string()),
    units: z.optional(z.int()),
    type: z.optional(z.string()),
    majorIds: z.optional(z.array(z.uuid())),
    prereqIds: z.optional(z.array(z.uuid())),
    coreqIds: z.optional(z.array(z.uuid()))
});

export const zUserStatus = z.enum([
    'active',
    'disabled',
    'deleted'
]);

export const zAuthMetadataDto = z.object({
    role: z.optional(zRole),
    status: z.optional(zUserStatus),
    user_id: z.optional(z.string())
});

export const zBillType = z.enum([
    'academic',
    'administrative',
    'facilities',
    'studentServices',
    'activities',
    'penalties'
]);

export const zPaymentScheme = z.enum([
    'full',
    'installment1',
    'installment2'
]);

export const zBillingCostBreakdown = z.object({
    cost: z.string(),
    name: z.string(),
    category: z.string()
});

export const zCreateBillingTypedBreakdownDto = z.object({
    payerName: z.string(),
    payerEmail: z.string(),
    billType: zBillType,
    paymentScheme: zPaymentScheme,
    totalAmount: z.string(),
    costBreakdown: z.array(zBillingCostBreakdown)
});

export const zCreateBillingDto = z.object({
    dueDates: z.array(z.iso.datetime()),
    bill: zCreateBillingTypedBreakdownDto,
    userId: z.optional(z.uuid())
});

export const zBillDto = z.object({
    id: z.string(),
    invoiceId: z.int(),
    payerName: z.string(),
    payerEmail: z.string(),
    billType: zBillType,
    paymentScheme: zPaymentScheme,
    totalAmount: z.string(),
    costBreakdown: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zBillItemDto = z.object({
    id: z.string(),
    invoiceId: z.int(),
    payerName: z.string(),
    payerEmail: z.string(),
    billType: zBillType,
    paymentScheme: zPaymentScheme,
    totalAmount: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    totalPaid: z.string(),
    status: z.enum([
        'unpaid',
        'partial',
        'paid',
        'overpaid'
    ]),
    totalInstallments: z.number(),
    paidInstallments: z.number(),
    installmentDueDates: z.array(z.iso.datetime())
});

export const zPaginatedBillsDto = z.object({
    meta: zPaginationMetaDto,
    bills: z.array(zBillItemDto)
});

export const zDetailedBillDto = z.object({
    id: z.string(),
    invoiceId: z.int(),
    payerName: z.string(),
    payerEmail: z.string(),
    billType: zBillType,
    paymentScheme: zPaymentScheme,
    totalAmount: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    totalPaid: z.string(),
    status: z.enum([
        'unpaid',
        'partial',
        'paid',
        'overpaid'
    ]),
    costBreakdown: z.array(zBillingCostBreakdown)
});

export const zUpdateBillDto = z.object({
    payerName: z.optional(z.string()),
    payerEmail: z.optional(z.string()),
    billType: z.optional(zBillType),
    paymentScheme: z.optional(zPaymentScheme),
    totalAmount: z.optional(z.string()),
    costBreakdown: z.optional(z.object({}))
});

export const zBillInstallmentItemDto = z.object({
    id: z.string(),
    name: z.string(),
    installmentOrder: z.int(),
    amountToPay: z.string(),
    dueAt: z.iso.datetime(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    totalPaid: z.string(),
    status: z.enum([
        'unpaid',
        'partial',
        'paid',
        'overpaid'
    ])
});

export const zInitiatePaymentDto = z.object({
    installmentId: z.uuid(),
    installmentOrder: z.number(),
    description: z.optional(z.string()),
    statementDescriptor: z.optional(z.string()),
    amount: z.number()
});

export const zPaymentIntentAttributesDto = z.object({
    amount: z.number(),
    capture_type: z.string(),
    client_key: z.string(),
    created_at: z.number(),
    currency: z.string(),
    description: z.string(),
    last_payment_error: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    livemode: z.boolean(),
    metadata: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    next_action: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    original_amount: z.number(),
    payment_method_allowed: z.array(z.string()),
    payment_method_options: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    payments: z.array(z.object({})),
    setup_future_usage: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    statement_descriptor: z.string(),
    status: z.string(),
    updated_at: z.number()
});

export const zPaymentIntentDataDto = z.object({
    id: z.string(),
    type: z.string(),
    attributes: zPaymentIntentAttributesDto
});

export const zPaymentIntentResponseDto = z.object({
    data: zPaymentIntentDataDto
});

export const zPaymentType = z.enum([
    'card',
    'paymaya',
    'gcash',
    'qrph',
    'manual'
]);

export const zCreatePayment = z.object({
    amountPaid: z.string(),
    paymentType: zPaymentType,
    notes: z.string(),
    paymentDate: z.iso.datetime(),
    paymongoData: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreatePaymentDto = z.object({
    payment: zCreatePayment,
    installmentId: z.optional(z.uuid()),
    description: z.optional(z.string()),
    statementDescriptor: z.optional(z.string())
});

export const zBillPaymentDto = z.object({
    id: z.string(),
    installmentOrder: z.int(),
    amountPaid: z.string(),
    paymentType: zPaymentType,
    notes: z.string(),
    paymentDate: z.iso.datetime(),
    paymongoData: z.union([
        z.object({}),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUpdateBillPaymentDto = z.object({
    installmentOrder: z.optional(z.int()),
    amountPaid: z.optional(z.string()),
    paymentType: z.optional(zPaymentType),
    notes: z.optional(z.string()),
    paymentDate: z.optional(z.iso.datetime()),
    paymongoData: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreateProgramDto = z.object({
    programCode: z.string(),
    name: z.string(),
    description: z.string(),
    yearDuration: z.int()
});

export const zProgram = z.object({
    id: z.string(),
    programCode: z.string(),
    name: z.string(),
    description: z.string(),
    yearDuration: z.int(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zProgramDto = z.object({
    id: z.string(),
    programCode: z.string(),
    name: z.string(),
    description: z.string(),
    yearDuration: z.int(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedProgramsDto = z.object({
    meta: zPaginationMetaDto,
    programs: z.array(zProgramDto)
});

export const zMajorItemDto = z.object({
    id: z.string(),
    majorCode: z.string(),
    name: z.string(),
    description: z.string(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    programId: z.string()
});

export const zPaginatedMajorsDto = z.object({
    meta: zPaginationMetaDto,
    majors: z.array(zMajorItemDto)
});

export const zUpdateProgramDto = z.object({
    programCode: z.optional(z.string()),
    name: z.optional(z.string()),
    description: z.optional(z.string()),
    yearDuration: z.optional(z.int())
});

export const zTurn = z.object({
    role: z.enum([
        'user',
        'model'
    ]),
    content: z.string()
});

export const zPromptDto = z.object({
    question: z.string(),
    sessionHistory: z.array(zTurn)
});

export const zChatbotResponseDto = z.object({
    response: z.string()
});

export const zCreateMajorDto = z.object({
    majorCode: z.string(),
    name: z.string(),
    description: z.string()
});

export const zCreateProgramMajorDto = z.object({
    major: zCreateMajorDto,
    programId: z.uuid()
});

export const zMajorDto = z.object({
    id: z.string(),
    majorCode: z.string(),
    name: z.string(),
    description: z.string(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUpdateMajorDto = z.object({
    majorCode: z.optional(z.string()),
    name: z.optional(z.string()),
    description: z.optional(z.string())
});

export const zMajor = z.object({
    id: z.string(),
    programId: z.string(),
    majorCode: z.string(),
    name: z.string(),
    description: z.string(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zEnrollmentStatus = z.enum([
    'draft',
    'upcoming',
    'active',
    'extended',
    'closed',
    'canceled',
    'archived'
]);

export const zCreateEnrollmentPeriodDto = z.object({
    startYear: z.int(),
    endYear: z.int(),
    term: z.int(),
    startDate: z.iso.datetime(),
    endDate: z.iso.datetime(),
    status: zEnrollmentStatus
});

export const zEnrollmentPeriodDto = z.object({
    id: z.string(),
    startYear: z.int(),
    endYear: z.int(),
    term: z.int(),
    startDate: z.iso.datetime(),
    endDate: z.iso.datetime(),
    status: zEnrollmentStatus,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedEnrollmentPeriodsDto = z.object({
    meta: zPaginationMetaDto,
    enrollments: z.array(zEnrollmentPeriodDto)
});

export const zUpdateEnrollmentDto = z.object({
    startYear: z.optional(z.int()),
    endYear: z.optional(z.int()),
    term: z.optional(z.int()),
    startDate: z.optional(z.iso.datetime()),
    endDate: z.optional(z.iso.datetime())
});

export const zUpdateEnrollmentStatusDto = z.object({
    status: zEnrollmentStatus
});

export const zCreateCourseOfferingDto = z.object({
    courseId: z.uuid()
});

export const zCourseOffering = z.object({
    id: z.string(),
    courseId: z.string(),
    periodId: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zCreateCourseOfferingCurriculumDto = z.object({
    curriculumId: z.uuid()
});

export const zDays = z.enum([
    'monday',
    'tuesday',
    'wednesday',
    'thursday',
    'friday',
    'saturday'
]);

export const zUserDto = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    disabledAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zDetailedCourseSectionDto = z.object({
    id: z.string(),
    name: z.string(),
    maxSlot: z.int(),
    startSched: z.string(),
    endSched: z.string(),
    days: z.array(zDays),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    user: z.union([
        zUserDto,
        z.null()
    ]),
    mentorId: z.union([
        z.uuid(),
        z.null()
    ])
});

export const zCourseEnrollmentStatus = z.enum([
    'enlisted',
    'finalized',
    'enrolled',
    'completed',
    'incomplete',
    'dropped',
    'failed'
]);

export const zDetailedCourseOfferingSubsetDto = z.object({
    course: zCourseDto
});

export const zDetailedCourseEnrollmentDto = z.object({
    id: z.string(),
    status: zCourseEnrollmentStatus,
    startedAt: z.iso.datetime(),
    completedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    studentId: z.uuid(),
    courseOfferingId: z.uuid(),
    courseSectionId: z.uuid(),
    courseSection: z.optional(zDetailedCourseSectionDto),
    courseOffering: z.optional(zDetailedCourseOfferingSubsetDto)
});

export const zDetailedCourseOfferingDto = z.object({
    id: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    course: zCourseDto,
    courseSections: z.array(zDetailedCourseSectionDto),
    courseEnrollments: z.array(zDetailedCourseEnrollmentDto),
    periodId: z.string()
});

export const zPaginatedCourseOfferingsDto = z.object({
    meta: zPaginationMetaDto,
    courseOfferings: z.array(zDetailedCourseOfferingDto)
});

export const zCourseOfferingDto = z.object({
    id: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zCourseSectionDto = z.object({
    id: z.string(),
    name: z.string(),
    maxSlot: z.int(),
    startSched: z.string(),
    endSched: z.string(),
    days: z.array(zDays),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedCourseSectionsDto = z.object({
    meta: zPaginationMetaDto,
    courseSections: z.array(zCourseSectionDto)
});

export const zCreateCourseSectionFullDto = z.object({
    name: z.string(),
    maxSlot: z.int(),
    days: z.array(zDays),
    startSched: z.string().regex(/^([01]\d|2[0-3]):([0-5]\d)$/),
    endSched: z.string().regex(/^([01]\d|2[0-3]):([0-5]\d)$/),
    mentorId: z.optional(z.uuid())
});

export const zUpdateCourseSectionDto = z.object({});

export const zStudentIdentifierDto = z.object({
    studentId: z.optional(z.uuid())
});

export const zCourseEnrollmentDto = z.object({
    id: z.string(),
    status: zCourseEnrollmentStatus,
    startedAt: z.iso.datetime(),
    completedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zCreateCurriculumDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateCurriculumCourseItemDto = z.object({
    courseId: z.uuid(),
    order: z.number(),
    year: z.number().gte(1),
    semester: z.number().gte(1)
});

export const zCreateCurriculumWithCoursesDto = z.object({
    majorId: z.uuid(),
    curriculum: zCreateCurriculumDto,
    courses: z.array(zCreateCurriculumCourseItemDto)
});

export const zCurriculumDto = z.object({
    id: z.string(),
    icon: z.union([
        z.string(),
        z.null()
    ]),
    name: z.union([
        z.string(),
        z.null()
    ]),
    description: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zCurriculumItemDto = z.object({
    id: z.string(),
    icon: z.union([
        z.string(),
        z.null()
    ]),
    name: z.union([
        z.string(),
        z.null()
    ]),
    description: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    program: zProgramDto,
    major: zMajorDto
});

export const zCurriculumCourseItemDto = z.object({
    id: z.string(),
    order: z.int(),
    year: z.int(),
    semester: z.int(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    course: zCourseDto
});

export const zCurriculumWithCoursesDto = z.object({
    curriculum: zCurriculumItemDto,
    courses: z.array(zCurriculumCourseItemDto)
});

export const zUpdateCurriculumDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateCurriculumCourseItemDto = z.object({
    courseId: z.uuid(),
    order: z.number(),
    year: z.number().gte(1),
    semester: z.number().gte(1)
});

export const zUpdateCurriculumWithCourseDto = z.object({
    majorId: z.optional(z.uuid()),
    curriculum: zUpdateCurriculumDto,
    courses: z.array(zUpdateCurriculumCourseItemDto)
});

export const zModuleDto = z.object({
    id: z.string(),
    title: z.string(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    toPublishAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedModulesDto = z.object({
    meta: zPaginationMetaDto,
    modules: z.array(zModuleDto)
});

export const zUpdateModuleDto = z.object({
    title: z.optional(z.string()),
    publishedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    toPublishAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ]))
});

export const zCreateModuleSectionDto = z.object({
    title: z.string(),
    publishedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    toPublishAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    parentSectionId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    prerequisiteSectionId: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zDetailedModuleSectionDto = z.object({
    id: z.string(),
    title: z.string(),
    order: z.int(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    toPublishAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    prerequisiteSectionId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    parentSectionId: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateModuleSectionDto = z.object({});

export const zContentType = z.enum([
    'LESSON',
    'ASSIGNMENT',
    'QUIZ',
    'DISCUSSION',
    'VIDEO',
    'URL',
    'FILE'
]);

export const zModuleContentInfoDto = z.object({
    id: z.string(),
    order: z.int(),
    contentType: zContentType,
    moduleSectionId: z.union([
        z.string(),
        z.null()
    ]),
    moduleId: z.string()
});

export const zDetailedContentProgressDto = z.object({
    id: z.string(),
    completedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    userId: z.string(),
    moduleContent: zModuleContentInfoDto
});

export const zTestControllerTestStudentData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zTestControllerTestStudentResponse = z.string();

export const zTestControllerTestAdminData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zTestControllerTestAdminResponse = z.string();

export const zTestControllerTestData = z.object({
    body: zTestBodyDto,
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        page: z.number()
    })
});

export const zTestControllerTestResponse = z.string();

export const zUsersControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        role: z.optional(z.enum([
            'student',
            'mentor',
            'admin'
        ]))
    }))
});

/**
 * List of users retrieved successfully
 */
export const zUsersControllerFindAllResponse = zPaginatedUsersDto;

export const zUsersControllerCreateData = z.object({
    body: zCreateUserFullDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateResponse = zUser;

export const zUsersControllerCreateStudentData = z.object({
    body: zCreateUserStudentDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateStudentResponse = zUser;

export const zUsersControllerCreateStaffData = z.object({
    body: zCreateUserStaffDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateStaffResponse = zUser;

export const zUsersControllerInviteUserData = z.object({
    body: zInviteUserDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerInviteUserResponse = zUser;

export const zUsersControllerGetMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Current user details fetched successfully
 */
export const zUsersControllerGetMeResponse = z.union([
    zUserStudentDetailsDto,
    zUserStaffDetailsDto
]);

export const zUsersControllerUpdateOwnUserDetailsData = z.object({
    body: zUpdateUserBaseDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateOwnUserDetailsResponse = zUser;

export const zUsersControllerUpdateUserStudentDetailsData = z.object({
    body: zUpdateUserStudentDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateUserStudentDetailsResponse = zUser;

export const zUsersControllerUpdateUserStaffDetailsData = z.object({
    body: zUpdateUserStaffDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateUserStaffDetailsResponse = zUser;

export const zUsersControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

/**
 * User deleted successfully
 */
export const zUsersControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zUsersControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * User found successfully
 */
export const zUsersControllerFindOneResponse = zUser;

export const zUsersControllerUpdateUserStatusData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * User status updated successfully
 */
export const zUsersControllerUpdateUserStatusResponse = z.object({
    message: z.optional(z.string())
});

export const zCoursesControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1)
    }))
});

export const zCoursesControllerFindAllResponse = zPaginatedCoursesDto;

export const zCoursesControllerCreateData = z.object({
    body: zCreateCourseDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCoursesControllerCreateResponse = zCourseDto;

export const zCoursesControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zCoursesControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zCoursesControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerFindOneResponse = zCourseDto;

export const zCoursesControllerUpdateData = z.object({
    body: zUpdateCourseDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerUpdateResponse = zCourseDto;

export const zAuthControllerGetMetadataData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        uid: z.string()
    }),
    query: z.optional(z.never())
});

export const zAuthControllerGetMetadataResponse = zAuthMetadataDto;

export const zAuthControllerLoginData = z.object({
    body: zUserCredentialsDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthControllerLoginResponse = z.string();

export const zBillingControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        sortOrder: z.optional(z.enum([
            'asc',
            'desc'
        ])),
        scheme: z.optional(zPaymentScheme),
        type: z.optional(zBillType),
        page: z.optional(z.number()).default(1),
        isDeleted: z.optional(z.boolean()).default(false),
        search: z.optional(z.string()),
        sort: z.optional(z.enum([
            'amountToPay',
            'totalPaid',
            'createdAt'
        ])),
        status: z.optional(z.enum([
            'unpaid',
            'partial',
            'paid',
            'overpaid'
        ]))
    }))
});

export const zBillingControllerFindAllResponse = zPaginatedBillsDto;

export const zBillingControllerCreateData = z.object({
    body: zCreateBillingDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zBillingControllerCreateResponse = zBillDto;

export const zBillingControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zBillingControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zBillingControllerFindOneResponse = zDetailedBillDto;

export const zBillingControllerUpdateData = z.object({
    body: zUpdateBillDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zBillingControllerUpdateResponse = zBillDto;

export const zInstallmentControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zInstallmentControllerFindAllResponse = z.array(zBillInstallmentItemDto);

export const zInstallmentControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zInstallmentControllerFindOneResponse = zBillInstallmentItemDto;

export const zPaymentsControllerPayData = z.object({
    body: zInitiatePaymentDto,
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerPayResponse = zPaymentIntentResponseDto;

export const zPaymentsControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerFindAllResponse = z.array(zBillPaymentDto);

export const zPaymentsControllerCreateData = z.object({
    body: zCreatePaymentDto,
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerCreateResponse = zBillPaymentDto;

export const zPaymentsControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zPaymentsControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerFindOneResponse = zBillPaymentDto;

export const zPaymentsControllerUpdateData = z.object({
    body: zUpdateBillPaymentDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerUpdateResponse = zBillPaymentDto;

export const zProgramControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1)
    }))
});

/**
 * List of programs retrieved successfully
 */
export const zProgramControllerFindAllResponse = zPaginatedProgramsDto;

export const zProgramControllerCreateData = z.object({
    body: zCreateProgramDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zProgramControllerCreateResponse = zProgram;

export const zProgramControllerFindAllMajorsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        programId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1)
    }))
});

export const zProgramControllerFindAllMajorsResponse = zPaginatedMajorsDto;

export const zProgramControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

/**
 * Program deleted successfully
 */
export const zProgramControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zProgramControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Program retrieved successfully
 */
export const zProgramControllerFindOneResponse = zProgram;

export const zProgramControllerUpdateData = z.object({
    body: zUpdateProgramDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Program updated successfully
 */
export const zProgramControllerUpdateResponse = zProgram;

export const zChatbotControllerPromptData = z.object({
    body: zPromptDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zChatbotControllerPromptResponse = zChatbotResponseDto;

export const zMajorControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1)
    }))
});

export const zMajorControllerFindAllResponse = zPaginatedMajorsDto;

export const zMajorControllerCreateData = z.object({
    body: zCreateProgramMajorDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zMajorControllerCreateResponse = zMajorDto;

export const zMajorControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zMajorControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zMajorControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zMajorControllerFindOneResponse = zMajorItemDto;

export const zMajorControllerUpdateData = z.object({
    body: zUpdateMajorDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zMajorControllerUpdateResponse = zMajor;

export const zEnrollmentControllerFindAllEnrollmentsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1)
    }))
});

export const zEnrollmentControllerFindAllEnrollmentsResponse = zPaginatedEnrollmentPeriodsDto;

export const zEnrollmentControllerCreateEnrollmentData = z.object({
    body: zCreateEnrollmentPeriodDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zEnrollmentControllerCreateEnrollmentResponse = zEnrollmentPeriodDto;

export const zEnrollmentControllerFindActiveEnrollmentData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zEnrollmentControllerFindActiveEnrollmentResponse = zEnrollmentPeriodDto;

export const zEnrollmentControllerRemoveEnrollmentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zEnrollmentControllerRemoveEnrollmentResponse = z.object({
    message: z.optional(z.string())
});

export const zEnrollmentControllerFindOneEnrollmentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zEnrollmentControllerFindOneEnrollmentResponse = zEnrollmentPeriodDto;

export const zEnrollmentControllerUpdateEnrollmentData = z.object({
    body: zUpdateEnrollmentDto,
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zEnrollmentControllerUpdateEnrollmentResponse = zEnrollmentPeriodDto;

export const zEnrollmentControllerUpdateEnrollmentStatusData = z.object({
    body: zUpdateEnrollmentStatusDto,
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zEnrollmentControllerUpdateEnrollmentStatusResponse = zEnrollmentPeriodDto;

export const zCourseOfferingControllerFindCourseOfferingsByPeriodData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        periodId: z.optional(z.uuid()),
        status: z.optional(z.enum([
            'not enrolled',
            'enrolled'
        ]))
    }))
});

export const zCourseOfferingControllerFindCourseOfferingsByPeriodResponse = zPaginatedCourseOfferingsDto;

export const zCourseOfferingControllerCreateCourseOfferingData = z.object({
    body: zCreateCourseOfferingDto,
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseOfferingControllerCreateCourseOfferingResponse = zCourseOffering;

export const zCourseOfferingControllerCreateCourseOfferingsByCurriculumIdData = z.object({
    body: zCreateCourseOfferingCurriculumDto,
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseOfferingControllerCreateCourseOfferingsByCurriculumIdResponse = z.array(zCourseOffering);

export const zCourseOfferingControllerRemoveCourseOfferingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseOfferingControllerRemoveCourseOfferingResponse = z.object({
    message: z.optional(z.string())
});

export const zCourseOfferingControllerFindOneCourseOfferingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseOfferingControllerFindOneCourseOfferingResponse = zCourseOfferingDto;

export const zCourseSectionControllerFindAllCourseSectionsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1)
    }))
});

export const zCourseSectionControllerFindAllCourseSectionsResponse = zPaginatedCourseSectionsDto;

export const zCourseSectionControllerFindAllCourseSectionsForOfferingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1)
    }))
});

export const zCourseSectionControllerFindAllCourseSectionsForOfferingResponse = zPaginatedCourseSectionsDto;

export const zCourseSectionControllerCreateCourseSectionData = z.object({
    body: zCreateCourseSectionFullDto,
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerCreateCourseSectionResponse = zCourseSectionDto;

export const zCourseSectionControllerRemoveCourseSectionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string(),
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerRemoveCourseSectionResponse = z.object({
    message: z.optional(z.string())
});

export const zCourseSectionControllerFindOneCourseSectionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string(),
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerFindOneCourseSectionResponse = zCourseSectionDto;

export const zCourseSectionControllerUpdateCourseSectionData = z.object({
    body: zUpdateCourseSectionDto,
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string(),
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerUpdateCourseSectionResponse = zCourseSectionDto;

export const zCourseEnrollmentControllerGetCourseEnrollmentsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCourseEnrollmentControllerGetCourseEnrollmentsResponse = z.array(zDetailedCourseEnrollmentDto);

export const zCourseEnrollmentControllerDropCourseEnrollmentData = z.object({
    body: zStudentIdentifierDto,
    path: z.object({
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseEnrollmentControllerDropCourseEnrollmentResponse = z.object({
    message: z.optional(z.string())
});

export const zCourseEnrollmentControllerCreateCourseEnrollmentData = z.object({
    body: zStudentIdentifierDto,
    path: z.object({
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseEnrollmentControllerCreateCourseEnrollmentResponse = zCourseEnrollmentDto;

export const zCourseEnrollmentControllerFinalizeCourseEnrollmentData = z.object({
    body: z.optional(zStudentIdentifierDto),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCourseEnrollmentControllerFinalizeCourseEnrollmentResponse = z.union([
    z.object({
        message: z.optional(z.string()),
        studentId: z.optional(z.uuid())
    }),
    z.unknown()
]);

export const zCurriculumControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCurriculumControllerFindAllResponse = z.array(zCurriculumItemDto);

export const zCurriculumControllerCreateData = z.object({
    body: zCreateCurriculumWithCoursesDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCurriculumControllerCreateResponse = zCurriculumDto;

export const zCurriculumControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zCurriculumControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCurriculumControllerFindOneResponse = zCurriculumWithCoursesDto;

export const zCurriculumControllerUpdateData = z.object({
    body: zUpdateCurriculumWithCourseDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCurriculumControllerUpdateResponse = zCurriculumDto;

export const zLmsControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1)
    }))
});

export const zLmsControllerFindAllResponse = zPaginatedModulesDto;

export const zLmsControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

/**
 * Module deleted successfully
 */
export const zLmsControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zLmsControllerUpdateData = z.object({
    body: zUpdateModuleDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsControllerUpdateResponse = zModuleDto;

export const zLmsSectionControllerFindAllModuleSectionsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsSectionControllerFindAllModuleSectionsResponse = z.array(zDetailedModuleSectionDto);

export const zLmsSectionControllerCreateData = z.object({
    body: zCreateModuleSectionDto,
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsSectionControllerCreateResponse = zDetailedModuleSectionDto;

export const zLmsSectionControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleSectionId: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zLmsSectionControllerUpdateData = z.object({
    body: zUpdateModuleSectionDto,
    path: z.object({
        moduleSectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsSectionControllerUpdateResponse = zDetailedModuleSectionDto;

export const zLmsContentControllerCreateContentProgressData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string(),
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerCreateContentProgressResponse = zDetailedContentProgressDto;

export const zLmsContentControllerFindAllContentProgressData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerFindAllContentProgressResponse = z.array(zDetailedContentProgressDto);

export const zSwaggerControllerDownloadAllSpecsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});