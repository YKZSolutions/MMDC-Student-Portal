// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zTestBodyNestDto = z.object({
    name: z.string()
});

export const zTestBodyDto = z.object({
    id: z.number(),
    nested: zTestBodyNestDto
});

export const zRole = z.enum([
    'student',
    'mentor',
    'admin'
]);

export const zCreateUserDto = z.object({
    firstName: z.string(),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.string()
});

export const zUserCredentialsDto = z.object({
    email: z.email(),
    password: z.optional(z.string())
});

export const zCreateUserDetailsDto = z.object({
    dateJoined: z.iso.datetime(),
    dob: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    gender: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateUserFullDto = z.object({
    role: zRole,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zUser = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    disabledAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zStudentType = z.enum([
    'new',
    'regular',
    'irregular',
    'transfer',
    'returnee',
    'graduate',
    'special'
]);

export const zCreateStudentDetailsDto = z.object({
    studentNumber: z.string(),
    studentType: zStudentType,
    admissionDate: z.iso.datetime(),
    otherDetails: z.object({})
});

export const zCreateUserStudentDto = z.object({
    specificDetails: zCreateStudentDetailsDto,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zUserDto = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    disabledAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zStaffRole = z.enum([
    'mentor',
    'admin'
]);

export const zCreateStaffDetailsDto = z.object({
    employeeNumber: z.int(),
    department: z.string(),
    position: z.string(),
    otherDetails: z.object({})
});

export const zCreateUserStaffDto = z.object({
    role: zStaffRole,
    specificDetails: zCreateStaffDetailsDto,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zInviteUserDto = z.object({
    firstName: z.string(),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.string(),
    role: zRole,
    email: z.email()
});

export const zUserDetailsDto = z.object({
    id: z.string(),
    dateJoined: z.iso.datetime(),
    dob: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gender: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserDetailsFullDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ])
});

export const zStudentDetailsDto = z.object({
    id: z.string(),
    studentNumber: z.string(),
    studentType: zStudentType,
    admissionDate: z.iso.datetime(),
    otherDetails: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserStudentDetailsDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ]),
    studentDetails: z.union([
        zStudentDetailsDto,
        z.null()
    ])
});

export const zStaffDetailsDto = z.object({
    id: z.string(),
    employeeNumber: z.int(),
    department: z.string(),
    position: z.string(),
    otherDetails: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserStaffDetailsDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ]),
    staffDetails: z.union([
        zStaffDetailsDto,
        z.null()
    ])
});

export const zUpdateStudentDetailsDto = z.object({
    studentNumber: z.optional(z.string()),
    studentType: z.optional(zStudentType),
    admissionDate: z.optional(z.iso.datetime()),
    otherDetails: z.optional(z.object({}))
});

export const zUpdateUserDto = z.object({
    firstName: z.optional(z.string()),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.optional(z.string())
});

export const zUpdateUserDetailsDto = z.object({
    dateJoined: z.optional(z.iso.datetime()),
    dob: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    gender: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateUserStudentDto = z.object({
    specificDetails: z.optional(zUpdateStudentDetailsDto),
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zUpdateStaffDetailsDto = z.object({
    employeeNumber: z.optional(z.int()),
    department: z.optional(z.string()),
    position: z.optional(z.string()),
    otherDetails: z.optional(z.object({}))
});

export const zUpdateUserStaffDto = z.object({
    specificDetails: z.optional(zUpdateStaffDetailsDto),
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zUpdateUserBaseDto = z.object({
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zPaginationMetaDto = z.object({
    isFirstPage: z.boolean(),
    isLastPage: z.boolean(),
    currentPage: z.number(),
    previousPage: z.union([
        z.number(),
        z.null()
    ]),
    nextPage: z.union([
        z.number(),
        z.null()
    ]),
    pageCount: z.number(),
    totalCount: z.number()
});

export const zUserAccountDto = z.object({
    id: z.string(),
    authUid: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserWithRelations = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    disabledAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    userAccount: z.union([
        zUserAccountDto,
        z.null()
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ])
});

export const zPaginatedUsersDto = z.object({
    meta: zPaginationMetaDto,
    users: z.array(zUserWithRelations)
});

export const zCreateCourseDto = z.object({
    courseCode: z.string(),
    name: z.string(),
    description: z.string(),
    units: z.int(),
    type: z.string(),
    majorIds: z.optional(z.array(z.uuid())),
    prereqIds: z.optional(z.array(z.uuid())),
    coreqIds: z.optional(z.array(z.uuid()))
});

export const zCourseRelationDto = z.object({
    id: z.string(),
    courseCode: z.string(),
    name: z.string()
});

export const zCourseDto = z.object({
    id: z.string(),
    courseCode: z.string(),
    name: z.string(),
    description: z.string(),
    units: z.int(),
    type: z.string(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    prereqs: z.array(zCourseRelationDto),
    prereqFor: z.array(zCourseRelationDto),
    coreqs: z.array(zCourseRelationDto),
    coreqFor: z.array(zCourseRelationDto)
});

export const zPaginatedCoursesDto = z.object({
    meta: zPaginationMetaDto,
    courses: z.array(zCourseDto)
});

export const zUpdateCourseDto = z.object({
    courseCode: z.optional(z.string()),
    name: z.optional(z.string()),
    description: z.optional(z.string()),
    units: z.optional(z.int()),
    type: z.optional(z.string()),
    majorIds: z.optional(z.array(z.uuid())),
    prereqIds: z.optional(z.array(z.uuid())),
    coreqIds: z.optional(z.array(z.uuid()))
});

export const zEnrollmentStatus = z.enum([
    'draft',
    'upcoming',
    'active',
    'extended',
    'closed',
    'canceled',
    'archived'
]);

export const zEnrollmentPeriodDto = z.object({
    id: z.string(),
    startYear: z.int(),
    endYear: z.int(),
    term: z.int(),
    startDate: z.iso.datetime(),
    endDate: z.iso.datetime(),
    status: zEnrollmentStatus,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zDays = z.enum([
    'monday',
    'tuesday',
    'wednesday',
    'thursday',
    'friday',
    'saturday'
]);

export const zDetailedCourseSectionDto = z.object({
    id: z.string(),
    name: z.string(),
    maxSlot: z.int(),
    startSched: z.string(),
    endSched: z.string(),
    days: z.array(zDays),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    mentor: z.union([
        zUserDto,
        z.null()
    ]),
    mentorId: z.union([
        z.uuid(),
        z.null()
    ]),
    availableSlots: z.optional(z.union([
        z.number(),
        z.null()
    ]))
});

export const zCustomDetailedCourseOfferingDto = z.object({
    id: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    enrollmentPeriod: z.optional(z.union([
        zEnrollmentPeriodDto,
        z.null()
    ])),
    courseSections: z.array(zDetailedCourseSectionDto),
    periodId: z.string()
});

export const zDetailedModulesDto = z.object({
    id: z.string(),
    title: z.string(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    courseOffering: z.union([
        zCustomDetailedCourseOfferingDto,
        z.null()
    ]),
    course: z.union([
        zCourseDto,
        z.null()
    ])
});

export const zPaginatedModulesDto = z.object({
    meta: zPaginationMetaDto,
    modules: z.array(zDetailedModulesDto)
});

export const zUpdateModuleDto = z.object({
    title: z.optional(z.string())
});

export const zModuleDto = z.object({
    id: z.string(),
    title: z.string(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zModuleSection = z.object({
    id: z.string(),
    moduleId: z.string(),
    parentSectionId: z.union([
        z.string(),
        z.null()
    ]),
    prerequisiteSectionId: z.union([
        z.string(),
        z.null()
    ]),
    title: z.string(),
    order: z.union([
        z.int(),
        z.null()
    ]),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zContentType = z.enum([
    'LESSON',
    'ASSIGNMENT'
]);

export const zRubricTemplate = z.object({
    id: z.string(),
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]),
    tags: z.array(z.string()),
    criteriaJson: z.union([
        z.object({}),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zAssignmentMode = z.enum([
    'INDIVIDUAL',
    'GROUP'
]);

export const zAssignment = z.object({
    id: z.string(),
    moduleContentId: z.string(),
    rubricTemplate: z.optional(z.union([
        zRubricTemplate,
        z.null()
    ])),
    rubricTemplateId: z.union([
        z.string(),
        z.null()
    ]),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zProgressStatus = z.enum([
    'NOT_STARTED',
    'IN_PROGRESS',
    'COMPLETED'
]);

export const zContentProgress = z.object({
    id: z.string(),
    studentId: z.string(),
    moduleId: z.string(),
    moduleContentId: z.string(),
    status: zProgressStatus,
    completedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    lastAccessedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime()
});

export const zModuleContent = z.object({
    id: z.string(),
    moduleSection: z.optional(zModuleSection),
    moduleSectionId: z.string(),
    contentType: zContentType,
    title: z.string(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]),
    content: z.array(z.object({})),
    order: z.int(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    assignment: z.optional(z.union([
        zAssignment,
        z.null()
    ])),
    studentProgress: z.optional(z.array(zContentProgress))
});

export const zModuleTreeLessonItemDto = z.object({
    id: z.string(),
    moduleSectionId: z.string(),
    title: z.string(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]),
    order: z.int(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    studentProgress: z.optional(z.array(zContentProgress)),
    contentType: z.string().readonly().default('LESSON')
});

export const zModuleTreeAssignmentItemDto = z.object({
    id: z.string(),
    moduleSectionId: z.string(),
    title: z.string(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]),
    order: z.int(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    studentProgress: z.optional(z.array(zContentProgress)),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    contentType: z.string().readonly().default('ASSIGNMENT')
});

export const zModuleTreeSectionDto = z.object({
    id: z.string(),
    moduleId: z.string(),
    parentSectionId: z.union([
        z.string(),
        z.null()
    ]),
    prerequisiteSectionId: z.union([
        z.string(),
        z.null()
    ]),
    title: z.string(),
    order: z.union([
        z.int(),
        z.null()
    ]),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    subsections: z.optional(z.union([
        z.array(z.lazy((): any => {
            return zModuleTreeSectionDto;
        })),
        z.null()
    ])),
    moduleContents: z.array(z.union([
        z.object({
            contentType: z.literal('LESSON')
        }).and(zModuleTreeLessonItemDto),
        z.object({
            contentType: z.literal('ASSIGNMENT')
        }).and(zModuleTreeAssignmentItemDto)
    ]))
});

export const zModuleTreeDto = z.object({
    id: z.string(),
    title: z.string(),
    courseId: z.union([
        z.string(),
        z.null()
    ]),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    moduleSections: z.optional(z.array(zModuleTreeSectionDto))
});

export const zModuleProgressOverview = z.object({
    moduleId: z.string(),
    moduleTitle: z.string(),
    completedContentItems: z.number(),
    totalContentItems: z.number(),
    notStartedContentItems: z.number(),
    overdueAssignmentsCount: z.number(),
    progressPercentage: z.number(),
    status: z.object({}),
    lastAccessedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    completedStudentsCount: z.number(),
    totalStudentsCount: z.number(),
    moduleCompletionPercentage: z.number()
});

export const zContentItemProgress = z.object({
    id: z.string(),
    title: z.string(),
    status: z.object({}),
    completedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    lastAccessedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    completedStudentsCount: z.number(),
    totalStudentsCount: z.number(),
    completionPercentage: z.number()
});

export const zContentSectionProgress = z.object({
    id: z.string(),
    title: z.string(),
    contentItems: z.array(zContentItemProgress),
    completedContentItems: z.number(),
    totalContentItems: z.number(),
    progressPercentage: z.number(),
    completedStudentsCount: z.number(),
    totalStudentsCount: z.number(),
    completionPercentage: z.number()
});

export const zModuleProgressDetail = z.object({
    moduleId: z.string(),
    moduleTitle: z.string(),
    sections: z.array(zContentSectionProgress),
    overallProgress: z.object({
        completedContentItems: z.number(),
        totalContentItems: z.number(),
        progressPercentage: z.number(),
        status: z.object({}),
        completedStudentsCount: z.number(),
        totalStudentsCount: z.number(),
        moduleCompletionPercentage: z.number()
    })
});

export const zStudentProgressStats = z.object({
    studentId: z.string(),
    studentName: z.string(),
    completedModules: z.number(),
    totalModules: z.number(),
    averageProgress: z.number(),
    lastActivity: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zDashboardProgress = z.object({
    studentProgress: z.array(zModuleProgressOverview),
    overallStats: z.optional(z.object({
        totalStudents: z.number(),
        averageProgress: z.number(),
        completedModules: z.number(),
        inProgressModules: z.number(),
        notStartedModules: z.number()
    })),
    studentStats: z.optional(z.array(zStudentProgressStats))
});

export const zCreateDetailedGroupDto = z.object({
    groupNumber: z.int(),
    groupName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    members: z.array(z.uuid())
});

export const zStudentInfoDto = z.object({
    firstName: z.string(),
    lastName: z.string()
});

export const zGroupMemberDto = z.object({
    studentId: z.uuid(),
    student: zStudentInfoDto
});

export const zDetailedGroupDto = z.object({
    id: z.string(),
    groupNumber: z.int(),
    groupName: z.union([
        z.string(),
        z.null()
    ]),
    members: z.array(zGroupMemberDto)
});

export const zUpdateGroupDto = z.object({
    groupNumber: z.optional(z.int()),
    groupName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    members: z.optional(z.array(z.uuid()))
});

export const zNotificationCountDto = z.object({
    total: z.number(),
    read: z.number(),
    unread: z.number()
});

export const zNotificationItemDto = z.object({
    id: z.string(),
    title: z.string(),
    content: z.string(),
    role: z.array(zRole),
    createdAt: z.iso.datetime(),
    userId: z.optional(z.string()),
    isRead: z.boolean()
});

export const zPaginatedNotificationDto = z.object({
    meta: zPaginationMetaDto,
    notifications: z.array(zNotificationItemDto)
});

export const zNotificationMarkRead = z.object({
    notificationIds: z.array(z.uuid())
});

export const zUserStatus = z.enum([
    'active',
    'disabled',
    'deleted'
]);

export const zAuthMetadataDto = z.object({
    role: z.optional(zRole),
    status: z.optional(zUserStatus),
    user_id: z.optional(z.string())
});

export const zBillType = z.enum([
    'academic',
    'administrative',
    'facilities',
    'studentServices',
    'activities',
    'penalties'
]);

export const zPaymentScheme = z.enum([
    'full',
    'installment1',
    'installment2'
]);

export const zBillingCostBreakdown = z.object({
    cost: z.string(),
    name: z.string(),
    category: z.string()
});

export const zCreateBillingTypedBreakdownDto = z.object({
    payerName: z.string(),
    payerEmail: z.string(),
    billType: zBillType,
    paymentScheme: zPaymentScheme,
    totalAmount: z.string(),
    costBreakdown: z.array(zBillingCostBreakdown)
});

export const zCreateBillingDto = z.object({
    dueDates: z.array(z.iso.datetime()),
    bill: zCreateBillingTypedBreakdownDto,
    userId: z.optional(z.uuid())
});

export const zBillDto = z.object({
    id: z.string(),
    invoiceId: z.int(),
    payerName: z.string(),
    payerEmail: z.string(),
    billType: zBillType,
    paymentScheme: zPaymentScheme,
    totalAmount: z.string(),
    costBreakdown: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zBillItemDto = z.object({
    id: z.string(),
    invoiceId: z.int(),
    payerName: z.string(),
    payerEmail: z.string(),
    billType: zBillType,
    paymentScheme: zPaymentScheme,
    totalAmount: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    totalPaid: z.string(),
    status: z.enum([
        'unpaid',
        'partial',
        'paid',
        'overpaid'
    ]),
    totalInstallments: z.number(),
    paidInstallments: z.number(),
    installmentDueDates: z.array(z.iso.datetime())
});

export const zPaginatedBillsDto = z.object({
    meta: zPaginationMetaDto,
    bills: z.array(zBillItemDto)
});

export const zDetailedBillDto = z.object({
    id: z.string(),
    invoiceId: z.int(),
    payerName: z.string(),
    payerEmail: z.string(),
    billType: zBillType,
    paymentScheme: zPaymentScheme,
    totalAmount: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    totalPaid: z.string(),
    status: z.enum([
        'unpaid',
        'partial',
        'paid',
        'overpaid'
    ]),
    costBreakdown: z.array(zBillingCostBreakdown)
});

export const zUpdateBillDto = z.object({
    payerName: z.optional(z.string()),
    payerEmail: z.optional(z.string()),
    billType: z.optional(zBillType),
    paymentScheme: z.optional(zPaymentScheme),
    totalAmount: z.optional(z.string()),
    costBreakdown: z.optional(z.object({}))
});

export const zBillInstallmentItemDto = z.object({
    id: z.string(),
    name: z.string(),
    installmentOrder: z.int(),
    amountToPay: z.string(),
    dueAt: z.iso.datetime(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    totalPaid: z.string(),
    status: z.enum([
        'unpaid',
        'partial',
        'paid',
        'overpaid'
    ])
});

export const zInitiatePaymentDto = z.object({
    installmentId: z.uuid(),
    installmentOrder: z.number(),
    description: z.optional(z.string()),
    statementDescriptor: z.optional(z.string()),
    amount: z.number()
});

export const zPaymentIntentAttributesDto = z.object({
    amount: z.number(),
    capture_type: z.string(),
    client_key: z.string(),
    created_at: z.number(),
    currency: z.string(),
    description: z.string(),
    last_payment_error: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    livemode: z.boolean(),
    metadata: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    next_action: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    original_amount: z.number(),
    payment_method_allowed: z.array(z.string()),
    payment_method_options: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    payments: z.array(z.object({})),
    setup_future_usage: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    statement_descriptor: z.string(),
    status: z.string(),
    updated_at: z.number()
});

export const zPaymentIntentDataDto = z.object({
    id: z.string(),
    type: z.string(),
    attributes: zPaymentIntentAttributesDto
});

export const zPaymentIntentResponseDto = z.object({
    data: zPaymentIntentDataDto
});

export const zPaymentType = z.enum([
    'card',
    'paymaya',
    'gcash',
    'qrph',
    'manual'
]);

export const zCreatePayment = z.object({
    amountPaid: z.string(),
    paymentType: zPaymentType,
    notes: z.string(),
    paymentDate: z.iso.datetime(),
    paymongoData: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreatePaymentDto = z.object({
    payment: zCreatePayment,
    installmentId: z.optional(z.uuid()),
    description: z.optional(z.string()),
    statementDescriptor: z.optional(z.string())
});

export const zBillPaymentDto = z.object({
    id: z.string(),
    installmentOrder: z.int(),
    amountPaid: z.string(),
    paymentType: zPaymentType,
    notes: z.string(),
    paymentDate: z.iso.datetime(),
    paymongoData: z.union([
        z.object({}),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUpdateBillPaymentDto = z.object({
    installmentOrder: z.optional(z.int()),
    amountPaid: z.optional(z.string()),
    paymentType: z.optional(zPaymentType),
    notes: z.optional(z.string()),
    paymentDate: z.optional(z.iso.datetime()),
    paymongoData: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreateProgramDto = z.object({
    programCode: z.string(),
    name: z.string(),
    description: z.string(),
    yearDuration: z.int()
});

export const zProgram = z.object({
    id: z.string(),
    programCode: z.string(),
    name: z.string(),
    description: z.string(),
    yearDuration: z.int(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zProgramDto = z.object({
    id: z.string(),
    programCode: z.string(),
    name: z.string(),
    description: z.string(),
    yearDuration: z.int(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedProgramsDto = z.object({
    meta: zPaginationMetaDto,
    programs: z.array(zProgramDto)
});

export const zMajorItemDto = z.object({
    id: z.string(),
    majorCode: z.string(),
    name: z.string(),
    description: z.string(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    programId: z.string()
});

export const zPaginatedMajorsDto = z.object({
    meta: zPaginationMetaDto,
    majors: z.array(zMajorItemDto)
});

export const zUpdateProgramDto = z.object({
    programCode: z.optional(z.string()),
    name: z.optional(z.string()),
    description: z.optional(z.string()),
    yearDuration: z.optional(z.int())
});

export const zTurn = z.object({
    role: z.enum([
        'user',
        'model'
    ]),
    content: z.string()
});

export const zPromptDto = z.object({
    question: z.string(),
    sessionHistory: z.optional(z.array(zTurn))
});

export const zChatbotResponseDto = z.object({
    response: z.string()
});

export const zCreateEnrollmentPeriodItemDto = z.object({
    startYear: z.int(),
    endYear: z.int(),
    term: z.int(),
    startDate: z.iso.datetime(),
    endDate: z.iso.datetime(),
    status: zEnrollmentStatus,
    pricingGroupId: z.uuid()
});

export const zPaginatedEnrollmentPeriodsDto = z.object({
    meta: zPaginationMetaDto,
    enrollments: z.array(zEnrollmentPeriodDto)
});

export const zPricingGroupDto = z.object({
    id: z.string(),
    name: z.string(),
    amount: z.string(),
    enabled: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zEnrollmentPeriodItemDto = z.object({
    id: z.string(),
    startYear: z.int(),
    endYear: z.int(),
    term: z.int(),
    startDate: z.iso.datetime(),
    endDate: z.iso.datetime(),
    status: zEnrollmentStatus,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    pricingGroup: z.optional(zPricingGroupDto)
});

export const zUpdateEnrollmentPeriodItemDto = z.object({
    startYear: z.optional(z.int()),
    endYear: z.optional(z.int()),
    term: z.optional(z.int()),
    startDate: z.optional(z.iso.datetime()),
    endDate: z.optional(z.iso.datetime()),
    pricingGroupId: z.uuid()
});

export const zUpdateEnrollmentStatusDto = z.object({
    status: zEnrollmentStatus
});

export const zCreateCourseOfferingDto = z.object({
    courseId: z.uuid()
});

export const zCourseOffering = z.object({
    id: z.string(),
    courseId: z.string(),
    periodId: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zCreateCourseOfferingCurriculumDto = z.object({
    curriculumId: z.uuid()
});

export const zCourseEnrollmentStatus = z.enum([
    'enlisted',
    'finalized',
    'enrolled',
    'completed',
    'incomplete',
    'dropped',
    'failed'
]);

export const zDetailedCourseOfferingSubsetDto = z.object({
    id: z.string(),
    course: zCourseDto
});

export const zDetailedCourseEnrollmentDto = z.object({
    id: z.string(),
    status: zCourseEnrollmentStatus,
    startedAt: z.iso.datetime(),
    completedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    studentId: z.uuid(),
    courseOfferingId: z.uuid(),
    courseSectionId: z.uuid(),
    courseSection: z.optional(zDetailedCourseSectionDto),
    courseOffering: z.optional(zDetailedCourseOfferingSubsetDto)
});

export const zDetailedCourseOfferingDto = z.object({
    id: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    course: zCourseDto,
    courseSections: z.array(zDetailedCourseSectionDto),
    courseEnrollments: z.array(zDetailedCourseEnrollmentDto),
    periodId: z.string()
});

export const zPaginatedCourseOfferingsDto = z.object({
    meta: zPaginationMetaDto,
    courseOfferings: z.array(zDetailedCourseOfferingDto)
});

export const zCourseOfferingDto = z.object({
    id: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zCourseSectionDto = z.object({
    id: z.string(),
    name: z.string(),
    maxSlot: z.int(),
    startSched: z.string(),
    endSched: z.string(),
    days: z.array(zDays),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedCourseSectionsDto = z.object({
    meta: zPaginationMetaDto,
    courseSections: z.array(zCourseSectionDto)
});

export const zCreateCourseSectionFullDto = z.object({
    name: z.string(),
    maxSlot: z.int(),
    days: z.array(zDays),
    startSched: z.string().regex(/^([01]\d|2[0-3]):([0-5]\d)$/),
    endSched: z.string().regex(/^([01]\d|2[0-3]):([0-5]\d)$/),
    mentorId: z.optional(z.uuid())
});

export const zCourseOfferingWithCourseAndPeriod = z.object({
    id: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    course: zCourseDto,
    enrollmentPeriod: zEnrollmentPeriodDto
});

export const zCourseSectionWithCourseOfferingDto = z.object({
    id: z.string(),
    name: z.string(),
    maxSlot: z.int(),
    startSched: z.string(),
    endSched: z.string(),
    days: z.array(zDays),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    courseOffering: zCourseOfferingWithCourseAndPeriod
});

export const zUpdateCourseSectionDto = z.object({});

export const zStudentDto = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole
});

export const zCustomDetailedCourseEnrollmentDto = z.object({
    id: z.string(),
    status: zCourseEnrollmentStatus,
    startedAt: z.iso.datetime(),
    completedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    studentId: z.uuid(),
    courseOfferingId: z.uuid(),
    courseSectionId: z.uuid(),
    courseSection: z.optional(zDetailedCourseSectionDto),
    courseOffering: z.optional(zDetailedCourseOfferingSubsetDto),
    student: zStudentDto
});

export const zPaginatedCourseEnrollmentsDto = z.object({
    meta: zPaginationMetaDto,
    enrollments: z.array(zCustomDetailedCourseEnrollmentDto)
});

export const zStudentIdentifierDto = z.object({
    studentId: z.optional(z.uuid())
});

export const zCourseEnrollmentDto = z.object({
    id: z.string(),
    status: zCourseEnrollmentStatus,
    startedAt: z.iso.datetime(),
    completedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zFinalizeEnrollmentDto = z.object({
    paymentScheme: zPaymentScheme,
    studentId: z.optional(z.uuid())
});

export const zAssignmentItemDto = z.object({
    id: z.string(),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    rubricTemplateId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    contentType: zContentType,
    title: z.string(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]),
    content: z.array(z.object({})),
    order: z.int(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zLessonItemDto = z.object({
    id: z.string(),
    contentType: zContentType,
    title: z.string(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]),
    content: z.array(z.object({})),
    order: z.int(),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zConnectModuleSectionDto = z.object({
    id: z.string()
});

export const zCreateModuleContentModuleSectionRelationInputDto = z.object({
    connect: zConnectModuleSectionDto
});

export const zCreateModuleContentDto = z.object({
    moduleSection: zCreateModuleContentModuleSectionRelationInputDto,
    contentType: z.optional(zContentType),
    title: z.string(),
    subtitle: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    content: z.array(z.object({})),
    publishedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    unpublishedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ]))
});

export const zUpdateModuleContentModuleSectionRelationInputDto = z.object({
    connect: zConnectModuleSectionDto
});

export const zUpdateAssignmentItemDto = z.object({
    mode: z.optional(zAssignmentMode),
    maxScore: z.optional(z.int()).default(0),
    weightPercentage: z.optional(z.int()).default(0),
    maxAttempts: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    allowLateSubmission: z.optional(z.union([
        z.boolean().default(false),
        z.null()
    ])).default(false),
    latePenalty: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    dueDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    gracePeriodMinutes: z.optional(z.union([
        z.int().default(0),
        z.null()
    ])).default(0),
    rubricTemplateId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    moduleSection: z.optional(zUpdateModuleContentModuleSectionRelationInputDto),
    title: z.optional(z.string()),
    subtitle: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    content: z.optional(z.array(z.object({}))),
    order: z.optional(z.int()).default(1),
    publishedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    unpublishedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    contentType: z.enum([
        'ASSIGNMENT'
    ])
});

export const zUpdateLessonItemDto = z.object({
    moduleSection: z.optional(zUpdateModuleContentModuleSectionRelationInputDto),
    title: z.optional(z.string()),
    subtitle: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    content: z.optional(z.array(z.object({}))),
    order: z.optional(z.int()).default(1),
    publishedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    unpublishedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    contentType: z.enum([
        'LESSON'
    ])
});

export const zPaginatedModuleContentDto = z.object({
    meta: zPaginationMetaDto,
    moduleContents: z.array(z.union([
        z.object({
            contentType: z.literal('LESSON')
        }).and(zLessonItemDto),
        z.object({
            contentType: z.literal('ASSIGNMENT')
        }).and(zAssignmentItemDto)
    ]))
});

export const zMessageDto = z.object({
    message: z.string()
});

export const zModuleContentInfoDto = z.object({
    id: z.string(),
    moduleSectionId: z.string(),
    contentType: zContentType,
    order: z.int()
});

export const zDetailedContentProgressDto = z.object({
    id: z.string(),
    completedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    studentId: z.string(),
    moduleContent: zModuleContentInfoDto
});

export const zCreateMajorDto = z.object({
    majorCode: z.string(),
    name: z.string(),
    description: z.string()
});

export const zCreateProgramMajorDto = z.object({
    major: zCreateMajorDto,
    programId: z.uuid()
});

export const zMajorDto = z.object({
    id: z.string(),
    majorCode: z.string(),
    name: z.string(),
    description: z.string(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUpdateMajorDto = z.object({
    majorCode: z.optional(z.string()),
    name: z.optional(z.string()),
    description: z.optional(z.string())
});

export const zMajor = z.object({
    id: z.string(),
    programId: z.string(),
    majorCode: z.string(),
    name: z.string(),
    description: z.string(),
    isActive: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zCreateCurriculumDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateCurriculumCourseItemDto = z.object({
    courseId: z.uuid(),
    order: z.number(),
    year: z.number().gte(1),
    semester: z.number().gte(1)
});

export const zCreateCurriculumWithCoursesDto = z.object({
    majorId: z.uuid(),
    curriculum: zCreateCurriculumDto,
    courses: z.array(zCreateCurriculumCourseItemDto)
});

export const zCurriculumDto = z.object({
    id: z.string(),
    icon: z.union([
        z.string(),
        z.null()
    ]),
    name: z.union([
        z.string(),
        z.null()
    ]),
    description: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zCurriculumItemDto = z.object({
    id: z.string(),
    icon: z.union([
        z.string(),
        z.null()
    ]),
    name: z.union([
        z.string(),
        z.null()
    ]),
    description: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    program: zProgramDto,
    major: zMajorDto
});

export const zCurriculumCourseItemDto = z.object({
    id: z.string(),
    order: z.int(),
    year: z.int(),
    semester: z.int(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    course: zCourseDto
});

export const zCurriculumWithCoursesDto = z.object({
    curriculum: zCurriculumItemDto,
    courses: z.array(zCurriculumCourseItemDto)
});

export const zUpdateCurriculumDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateCurriculumCourseItemDto = z.object({
    courseId: z.uuid(),
    order: z.number(),
    year: z.number().gte(1),
    semester: z.number().gte(1)
});

export const zUpdateCurriculumWithCourseDto = z.object({
    majorId: z.optional(z.uuid()),
    curriculum: zUpdateCurriculumDto,
    courses: z.array(zUpdateCurriculumCourseItemDto)
});

export const zSubmissionState = z.enum([
    'DRAFT',
    'SUBMITTED',
    'UNDER_REVIEW',
    'GRADED',
    'RETURNED'
]);

export const zSubmitAssignmentDto = z.object({
    state: zSubmissionState,
    content: z.array(z.object({}))
});

export const zAssignmentStatsDto = z.object({
    submitted: z.number(),
    graded: z.number(),
    total: z.number()
});

export const zAdminAssignmentItemDto = z.object({
    id: z.string(),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    rubricTemplateId: z.union([
        z.string(),
        z.null()
    ]),
    title: z.string(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]),
    content: z.array(z.object({})),
    stats: zAssignmentStatsDto
});

export const zPaginatedAssignmentDto = z.object({
    meta: zPaginationMetaDto,
    assignments: z.array(zAdminAssignmentItemDto)
});

export const zSubmissionAttachmentDto = z.object({
    id: z.string(),
    name: z.string(),
    url: z.string(),
    type: z.string(),
    size: z.int(),
    createdAt: z.iso.datetime()
});

export const zGradeRecordItemDto = z.object({
    id: z.string(),
    rawScore: z.string(),
    finalScore: z.string(),
    grade: z.string(),
    gradedAt: z.iso.datetime()
});

export const zMentorAssignmentSubmissionItemDto = z.object({
    id: z.string(),
    submittedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    attachments: z.optional(z.array(zSubmissionAttachmentDto)),
    grade: z.optional(z.union([
        zGradeRecordItemDto,
        z.null()
    ])),
    student: zUserDto
});

export const zMentorAssignmentItemDto = z.object({
    id: z.string(),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    rubricTemplateId: z.union([
        z.string(),
        z.null()
    ]),
    title: z.string(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]),
    content: z.array(z.object({})),
    stats: zAssignmentStatsDto,
    submissions: z.array(zMentorAssignmentSubmissionItemDto)
});

export const zPaginatedMentorAssignmentDto = z.object({
    meta: zPaginationMetaDto,
    assignments: z.array(zMentorAssignmentItemDto)
});

export const zGradeRecordDto = z.object({
    id: z.string(),
    rawScore: z.string(),
    finalScore: z.string(),
    grade: z.string(),
    feedback: z.union([
        z.string(),
        z.null()
    ]),
    rubricEvaluationDetails: z.array(z.object({})),
    gradedAt: z.iso.datetime(),
    updatedAt: z.iso.datetime()
});

export const zStudentAssignmentSubmissionItemDto = z.object({
    id: z.string(),
    groupSnapshot: z.union([
        z.object({}),
        z.null()
    ]),
    state: zSubmissionState,
    content: z.array(z.object({})),
    submittedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    attemptNumber: z.int(),
    lateDays: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    attachments: z.optional(z.array(zSubmissionAttachmentDto)),
    grade: z.optional(z.union([
        zGradeRecordDto,
        z.null()
    ]))
});

export const zStudentAssignmentItemDto = z.object({
    id: z.string(),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    rubricTemplateId: z.union([
        z.string(),
        z.null()
    ]),
    title: z.string(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]),
    content: z.array(z.object({})),
    submissions: z.array(zStudentAssignmentSubmissionItemDto)
});

export const zPaginatedStudentAssignmentDto = z.object({
    meta: zPaginationMetaDto,
    assignments: z.array(zStudentAssignmentItemDto)
});

export const zAssignmentDto = z.object({
    id: z.string(),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUpdateAssignmentConfigDto = z.object({
    mode: z.optional(zAssignmentMode),
    maxScore: z.optional(z.int()).default(0),
    weightPercentage: z.optional(z.int()).default(0),
    maxAttempts: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    allowLateSubmission: z.optional(z.union([
        z.boolean().default(false),
        z.null()
    ])).default(false),
    latePenalty: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    dueDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    gracePeriodMinutes: z.optional(z.union([
        z.int().default(0),
        z.null()
    ])).default(0),
    rubricTemplateId: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateModuleSectionDto = z.object({
    title: z.string(),
    order: z.optional(z.union([
        z.int().default(0),
        z.null()
    ])).default(0),
    parentSectionId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    prerequisiteSectionId: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zDetailedModuleSectionDto = z.object({
    id: z.string(),
    title: z.string(),
    order: z.union([
        z.int(),
        z.null()
    ]),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    prerequisiteSectionId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    parentSectionId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    moduleId: z.string()
});

export const zUpdateModuleSectionDto = z.object({});

export const zCreateSubmissionAttachmentDto = z.object({
    name: z.string(),
    url: z.string(),
    type: z.string(),
    size: z.int()
});

export const zCreateAssignmentSubmissionAttachmentsRelationInputDto = z.object({
    create: z.array(zCreateSubmissionAttachmentDto)
});

export const zCreateAssignmentSubmissionDto = z.object({
    groupSnapshot: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    state: zSubmissionState,
    content: z.array(z.object({})),
    submittedAt: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    lateDays: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    attachments: z.optional(zCreateAssignmentSubmissionAttachmentsRelationInputDto)
});

export const zAssignmentSubmissionDto = z.object({
    id: z.string(),
    groupSnapshot: z.union([
        z.object({}),
        z.null()
    ]),
    state: zSubmissionState,
    content: z.array(z.object({})),
    submittedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    attemptNumber: z.int(),
    lateDays: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zGradeSubmissionDto = z.object({
    studentId: z.uuid(),
    grade: z.number().gte(1)
});

export const zAssignmentSubmissionDetailsDto = z.object({
    id: z.string(),
    groupSnapshot: z.union([
        z.object({}),
        z.null()
    ]),
    state: zSubmissionState,
    content: z.array(z.object({})),
    submittedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    attemptNumber: z.int(),
    lateDays: z.union([
        z.int(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gradeRecord: z.optional(z.union([
        zGradeRecordDto,
        z.null()
    ])),
    student: zUserDto,
    assignment: z.optional(zAssignment),
    attachments: z.optional(z.array(zSubmissionAttachmentDto))
});

export const zCurrentGradeDto = z.object({
    id: z.string(),
    rawScore: z.string(),
    finalScore: z.string(),
    grade: z.string(),
    feedback: z.union([
        z.string(),
        z.null()
    ]),
    rubricEvaluationDetails: z.array(z.object({})),
    gradedAt: z.iso.datetime()
});

export const zGradableAssignmentItem = z.object({
    contentId: z.string(),
    moduleId: z.string(),
    title: z.string(),
    moduleContentId: z.string(),
    rubricTemplate: z.optional(z.union([
        zRubricTemplate,
        z.null()
    ])),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ])
});

export const zStudentViewGradeEntryDto = z.object({
    currentGrade: z.optional(z.union([
        zCurrentGradeDto,
        z.null()
    ])),
    submission: z.array(zAssignmentSubmissionDto),
    gradableItem: zGradableAssignmentItem
});

export const zGradebookForStudentDto = z.object({
    meta: zPaginationMetaDto,
    student: zUserDto,
    gradeRecords: z.array(zStudentViewGradeEntryDto)
});

export const zBasicAssignmentSubmissionItemWithGrade = z.object({
    id: z.string(),
    groupSnapshot: z.union([
        z.object({}),
        z.null()
    ]),
    state: zSubmissionState,
    submittedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    lateDays: z.union([
        z.int(),
        z.null()
    ]),
    student: zUserDto,
    currentGrade: z.optional(z.union([
        zCurrentGradeDto,
        z.null()
    ]))
});

export const zFullGradableAssignmentItem = z.object({
    contentId: z.string(),
    moduleId: z.string(),
    title: z.string(),
    rubricTemplate: z.optional(z.union([
        zRubricTemplate,
        z.null()
    ])),
    mode: zAssignmentMode,
    maxScore: z.int(),
    weightPercentage: z.int(),
    maxAttempts: z.union([
        z.int(),
        z.null()
    ]),
    allowLateSubmission: z.union([
        z.boolean(),
        z.null()
    ]),
    latePenalty: z.union([
        z.int(),
        z.null()
    ]),
    dueDate: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gracePeriodMinutes: z.union([
        z.int(),
        z.null()
    ]),
    submissions: z.array(zBasicAssignmentSubmissionItemWithGrade)
});

export const zGradebookForMentorDto = z.object({
    meta: zPaginationMetaDto,
    gradeRecords: z.array(zFullGradableAssignmentItem)
});

export const zGradeAssignmentSubmissionDto = z.object({
    rawScore: z.optional(z.string()),
    feedback: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    rubricEvaluationDetails: z.optional(z.array(z.object({})))
});

export const zUpdateGradeRecordDto = z.object({
    rawScore: z.optional(z.string()),
    finalScore: z.optional(z.string()),
    grade: z.optional(z.string()),
    feedback: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    rubricEvaluationDetails: z.optional(z.array(z.object({})))
});

export const zModule = z.object({
    id: z.string(),
    title: z.string(),
    courseId: z.union([
        z.string(),
        z.null()
    ]),
    courseOfferingId: z.union([
        z.string(),
        z.null()
    ]),
    publishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    unpublishedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zGroup = z.object({
    id: z.string(),
    moduleId: z.string(),
    module: z.optional(zModule),
    groupNumber: z.int(),
    groupName: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime()
});

export const zSubmissionAttachment = z.object({
    id: z.string(),
    assignmentSubmissionId: z.union([
        z.string(),
        z.null()
    ]),
    name: z.string(),
    url: z.string(),
    type: z.string(),
    size: z.int(),
    createdAt: z.iso.datetime()
});

export const zAssignmentSubmission = z.object({
    id: z.string(),
    assignment: z.optional(zAssignment),
    assignmentId: z.string(),
    studentId: z.string(),
    groupId: z.union([
        z.string(),
        z.null()
    ]),
    group: z.optional(z.union([
        zGroup,
        z.null()
    ])),
    groupSnapshot: z.union([
        z.object({}),
        z.null()
    ]),
    state: zSubmissionState,
    content: z.array(z.object({})),
    submittedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    attemptNumber: z.int(),
    lateDays: z.union([
        z.int(),
        z.null()
    ]),
    attachments: z.optional(z.array(zSubmissionAttachment)),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zGradeRecord = z.object({
    id: z.string(),
    studentId: z.string(),
    assignmentSubmission: z.optional(z.union([
        zAssignmentSubmission,
        z.null()
    ])),
    assignmentSubmissionId: z.union([
        z.string(),
        z.null()
    ]),
    rawScore: z.string(),
    finalScore: z.string(),
    grade: z.string(),
    feedback: z.union([
        z.string(),
        z.null()
    ]),
    rubricEvaluationDetails: z.array(z.object({})),
    gradedAt: z.iso.datetime(),
    updatedAt: z.iso.datetime()
});

export const zPricingType = z.enum([
    'tuition',
    'lab',
    'misc',
    'other'
]);

export const zCreatePricingDto = z.object({
    type: zPricingType,
    name: z.string(),
    amount: z.string()
});

export const zPricingDto = z.object({
    id: z.string(),
    type: zPricingType,
    name: z.string(),
    amount: z.string(),
    enabled: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedPricingDto = z.object({
    meta: zPaginationMetaDto,
    pricings: z.array(zPricingDto)
});

export const zUpdatePricingDto = z.object({
    type: z.optional(zPricingType),
    name: z.optional(z.string()),
    amount: z.optional(z.string())
});

export const zCreatePricingGroupDto = z.object({
    name: z.string(),
    amount: z.string()
});

export const zCreatePricingGroupItemDto = z.object({
    group: zCreatePricingGroupDto,
    pricings: z.array(z.uuid())
});

export const zPricingGroupItemDto = z.object({
    id: z.string(),
    name: z.string(),
    amount: z.string(),
    enabled: z.boolean(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    prices: z.array(zPricingDto)
});

export const zPaginatedPricingGroupDto = z.object({
    meta: zPaginationMetaDto,
    pricingGroups: z.array(zPricingGroupItemDto)
});

export const zUpdatePricingGroupDto = z.object({
    name: z.optional(z.string()),
    amount: z.optional(z.string())
});

export const zUpdatePricingGroupItemDto = z.object({
    group: zUpdatePricingGroupDto,
    pricings: z.optional(z.array(z.uuid()))
});

export const zCreateAppointmentItemDto = z.object({
    title: z.string(),
    startAt: z.iso.datetime(),
    endAt: z.iso.datetime(),
    gmeetLink: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    cancelReason: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    courseOfferingId: z.uuid(),
    studentId: z.uuid(),
    mentorId: z.uuid(),
    description: z.string()
});

export const zAppointmentStatus = z.enum([
    'booked',
    'approved',
    'cancelled',
    'rescheduled',
    'finished',
    'extended'
]);

export const zAppointmentCourseDto = z.object({
    id: z.string(),
    courseCode: z.string(),
    name: z.string()
});

export const zAppointmentUserDto = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole
});

export const zAppointmentItemDto = z.object({
    id: z.string(),
    title: z.string(),
    description: z.string(),
    startAt: z.iso.datetime(),
    endAt: z.iso.datetime(),
    status: zAppointmentStatus,
    gmeetLink: z.union([
        z.string(),
        z.null()
    ]),
    cancelReason: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    course: zAppointmentCourseDto,
    student: zAppointmentUserDto,
    mentor: zAppointmentUserDto
});

export const zBookedAppointment = z.object({
    id: z.string(),
    startAt: z.iso.datetime(),
    endAt: z.iso.datetime()
});

export const zPaginatedAppointmentDto = z.object({
    meta: zPaginationMetaDto,
    appointments: z.array(zAppointmentItemDto)
});

export const zBookedAppointmentDto = z.object({
    id: z.string(),
    startAt: z.iso.datetime(),
    endAt: z.iso.datetime()
});

export const zAppointmentSectionDto = z.object({
    id: z.string(),
    startSched: z.string(),
    endSched: z.string(),
    days: z.array(zDays)
});

export const zAppointmentDetailsDto = z.object({
    id: z.string(),
    title: z.string(),
    description: z.string(),
    startAt: z.iso.datetime(),
    endAt: z.iso.datetime(),
    status: zAppointmentStatus,
    gmeetLink: z.union([
        z.string(),
        z.null()
    ]),
    cancelReason: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    course: zAppointmentCourseDto,
    section: zAppointmentSectionDto,
    student: zAppointmentUserDto,
    mentor: zAppointmentUserDto
});

export const zUpdateAppointmentItemDto = z.object({
    title: z.optional(z.string()),
    description: z.optional(z.string()),
    gmeetLink: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateAppointmentStatusDto = z.object({
    startAt: z.optional(z.iso.datetime()),
    endAt: z.optional(z.iso.datetime()),
    cancelReason: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    status: zAppointmentStatus
});

export const zTestControllerTestStudentData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zTestControllerTestStudentResponse = z.string();

export const zTestControllerTestAdminData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zTestControllerTestAdminResponse = z.string();

export const zTestControllerTestData = z.object({
    body: zTestBodyDto,
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        page: z.number()
    })
});

export const zTestControllerTestResponse = z.string();

export const zUsersControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        role: z.optional(z.enum([
            'student',
            'mentor',
            'admin'
        ]))
    }))
});

/**
 * List of users retrieved successfully
 */
export const zUsersControllerFindAllResponse = zPaginatedUsersDto;

export const zUsersControllerCreateData = z.object({
    body: zCreateUserFullDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateResponse = zUser;

export const zUsersControllerCreateStudentData = z.object({
    body: zCreateUserStudentDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateStudentResponse = zUserDto;

export const zUsersControllerCreateStaffData = z.object({
    body: zCreateUserStaffDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateStaffResponse = zUserDto;

export const zUsersControllerInviteUserData = z.object({
    body: zInviteUserDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerInviteUserResponse = zUserDto;

export const zUsersControllerGetMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Current user details fetched successfully
 */
export const zUsersControllerGetMeResponse = z.union([
    zUserStudentDetailsDto,
    zUserStaffDetailsDto
]);

export const zUsersControllerUpdateOwnUserDetailsData = z.object({
    body: zUpdateUserBaseDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateOwnUserDetailsResponse = z.union([
    zUserDto,
    zUser
]);

export const zUsersControllerUpdateUserStudentDetailsData = z.object({
    body: zUpdateUserStudentDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateUserStudentDetailsResponse = z.union([
    zUserDto,
    zUser
]);

export const zUsersControllerUpdateUserStaffDetailsData = z.object({
    body: zUpdateUserStaffDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateUserStaffDetailsResponse = z.union([
    zUserDto,
    zUser
]);

export const zUsersControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

/**
 * User deleted successfully
 */
export const zUsersControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zUsersControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zUsersControllerFindOneResponse = zUserWithRelations;

export const zUsersControllerUpdateUserStatusData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * User status updated successfully
 */
export const zUsersControllerUpdateUserStatusResponse = z.object({
    message: z.optional(z.string())
});

export const zCoursesControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zCoursesControllerFindAllResponse = zPaginatedCoursesDto;

export const zCoursesControllerCreateData = z.object({
    body: zCreateCourseDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCoursesControllerCreateResponse = zCourseDto;

export const zCoursesControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zCoursesControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zCoursesControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerFindOneResponse = zCourseDto;

export const zCoursesControllerUpdateData = z.object({
    body: zUpdateCourseDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerUpdateResponse = zCourseDto;

export const zLmsControllerFindAllForStudentData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        enrollmentPeriodId: z.optional(z.uuid())
    }))
});

export const zLmsControllerFindAllForStudentResponse = zPaginatedModulesDto;

export const zLmsControllerFindAllForMentorData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        enrollmentPeriodId: z.optional(z.uuid())
    }))
});

export const zLmsControllerFindAllForMentorResponse = zPaginatedModulesDto;

export const zLmsControllerFindAllForAdminData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        enrollmentPeriodId: z.optional(z.uuid())
    }))
});

export const zLmsControllerFindAllForAdminResponse = zPaginatedModulesDto;

export const zLmsControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

/**
 * Module deleted successfully
 */
export const zLmsControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zLmsControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsControllerFindOneResponse = zDetailedModulesDto;

export const zLmsControllerUpdateData = z.object({
    body: zUpdateModuleDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsControllerUpdateResponse = zModuleDto;

export const zLmsControllerPublishData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsControllerUnpublishData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsControllerFindTodosData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        dueDateFrom: z.optional(z.iso.datetime()),
        dueDateTo: z.optional(z.iso.datetime())
    }))
});

export const zLmsControllerFindTodosResponse = zModuleContent;

export const zLmsControllerFindModuleTreeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Module tree retrieved successfully
 */
export const zLmsControllerFindModuleTreeResponse = zModuleTreeDto;

export const zLmsControllerGetModuleProgressOverviewData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsControllerGetModuleProgressOverviewResponse = zModuleProgressOverview;

export const zLmsControllerGetModuleProgressDetailData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsControllerGetModuleProgressDetailResponse = zModuleProgressDetail;

export const zLmsControllerGetDashboardProgressData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zLmsControllerGetDashboardProgressResponse = zDashboardProgress;

export const zGroupControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zGroupControllerFindAllResponse = z.array(zDetailedGroupDto);

export const zGroupControllerCreateData = z.object({
    body: zCreateDetailedGroupDto,
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zGroupControllerCreateResponse = zDetailedGroupDto;

export const zGroupControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zGroupControllerUpdateData = z.object({
    body: zUpdateGroupDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zGroupControllerUpdateResponse = zDetailedGroupDto;

export const zNotificationsControllerSubscribeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zNotificationsControllerSubscribeResponse = z.object({});

export const zNotificationsControllerGetCountData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zNotificationsControllerGetCountResponse = zNotificationCountDto;

export const zNotificationsControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        type: z.optional(z.enum([
            'read',
            'unread'
        ]))
    }))
});

export const zNotificationsControllerFindAllResponse = zPaginatedNotificationDto;

export const zNotificationsControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zNotificationsControllerFindOneResponse = zNotificationItemDto;

export const zNotificationsControllerMarkAsReadData = z.object({
    body: zNotificationMarkRead,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zNotificationsControllerMarkAllAsReadData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthControllerGetMetadataData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        uid: z.string()
    }),
    query: z.optional(z.never())
});

export const zAuthControllerGetMetadataResponse = zAuthMetadataDto;

export const zAuthControllerLoginData = z.object({
    body: zUserCredentialsDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthControllerLoginResponse = z.string();

export const zBillingControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        sortOrder: z.optional(z.enum([
            'asc',
            'desc'
        ])),
        scheme: z.optional(zPaymentScheme),
        type: z.optional(zBillType),
        isDeleted: z.optional(z.boolean()).default(false),
        sort: z.optional(z.enum([
            'amountToPay',
            'totalPaid',
            'createdAt'
        ])),
        status: z.optional(z.enum([
            'unpaid',
            'partial',
            'paid',
            'overpaid'
        ]))
    }))
});

export const zBillingControllerFindAllResponse = zPaginatedBillsDto;

export const zBillingControllerCreateData = z.object({
    body: zCreateBillingDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zBillingControllerCreateResponse = zBillDto;

export const zBillingControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zBillingControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zBillingControllerFindOneResponse = zDetailedBillDto;

export const zBillingControllerUpdateData = z.object({
    body: zUpdateBillDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zBillingControllerUpdateResponse = zBillDto;

export const zInstallmentControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zInstallmentControllerFindAllResponse = z.array(zBillInstallmentItemDto);

export const zInstallmentControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zInstallmentControllerFindOneResponse = zBillInstallmentItemDto;

export const zPaymentsControllerPayData = z.object({
    body: zInitiatePaymentDto,
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerPayResponse = zPaymentIntentResponseDto;

export const zPaymentsControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerFindAllResponse = z.array(zBillPaymentDto);

export const zPaymentsControllerCreateData = z.object({
    body: zCreatePaymentDto,
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerCreateResponse = zBillPaymentDto;

export const zPaymentsControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zPaymentsControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerFindOneResponse = zBillPaymentDto;

export const zPaymentsControllerUpdateData = z.object({
    body: zUpdateBillPaymentDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerUpdateResponse = zBillPaymentDto;

export const zProgramControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

/**
 * List of programs retrieved successfully
 */
export const zProgramControllerFindAllResponse = zPaginatedProgramsDto;

export const zProgramControllerCreateData = z.object({
    body: zCreateProgramDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zProgramControllerCreateResponse = zProgram;

export const zProgramControllerFindAllMajorsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        programId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zProgramControllerFindAllMajorsResponse = zPaginatedMajorsDto;

export const zProgramControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

/**
 * Program deleted successfully
 */
export const zProgramControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zProgramControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Program retrieved successfully
 */
export const zProgramControllerFindOneResponse = zProgram;

export const zProgramControllerUpdateData = z.object({
    body: zUpdateProgramDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Program updated successfully
 */
export const zProgramControllerUpdateResponse = zProgram;

export const zChatbotControllerPromptData = z.object({
    body: zPromptDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zChatbotControllerPromptResponse = zChatbotResponseDto;

export const zEnrollmentControllerFindAllEnrollmentsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zEnrollmentControllerFindAllEnrollmentsResponse = zPaginatedEnrollmentPeriodsDto;

export const zEnrollmentControllerCreateEnrollmentData = z.object({
    body: zCreateEnrollmentPeriodItemDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zEnrollmentControllerCreateEnrollmentResponse = zEnrollmentPeriodDto;

export const zEnrollmentControllerFindActiveEnrollmentData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zEnrollmentControllerFindActiveEnrollmentResponse = zEnrollmentPeriodDto;

export const zEnrollmentControllerRemoveEnrollmentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zEnrollmentControllerRemoveEnrollmentResponse = z.object({
    message: z.optional(z.string())
});

export const zEnrollmentControllerFindOneEnrollmentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zEnrollmentControllerFindOneEnrollmentResponse = zEnrollmentPeriodItemDto;

export const zEnrollmentControllerUpdateEnrollmentData = z.object({
    body: zUpdateEnrollmentPeriodItemDto,
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zEnrollmentControllerUpdateEnrollmentResponse = zEnrollmentPeriodDto;

export const zEnrollmentControllerUpdateEnrollmentStatusData = z.object({
    body: zUpdateEnrollmentStatusDto,
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zEnrollmentControllerUpdateEnrollmentStatusResponse = zEnrollmentPeriodDto;

export const zCourseOfferingControllerFindCourseOfferingsByPeriodData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        periodId: z.optional(z.uuid()),
        status: z.optional(z.enum([
            'not enrolled',
            'enrolled'
        ]))
    }))
});

export const zCourseOfferingControllerFindCourseOfferingsByPeriodResponse = zPaginatedCourseOfferingsDto;

export const zCourseOfferingControllerCreateCourseOfferingData = z.object({
    body: zCreateCourseOfferingDto,
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseOfferingControllerCreateCourseOfferingResponse = zCourseOffering;

export const zCourseOfferingControllerCreateCourseOfferingsByCurriculumIdData = z.object({
    body: zCreateCourseOfferingCurriculumDto,
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseOfferingControllerCreateCourseOfferingsByCurriculumIdResponse = z.array(zCourseOffering);

export const zCourseOfferingControllerRemoveCourseOfferingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseOfferingControllerRemoveCourseOfferingResponse = z.object({
    message: z.optional(z.string())
});

export const zCourseOfferingControllerFindOneCourseOfferingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseOfferingControllerFindOneCourseOfferingResponse = zCourseOfferingDto;

export const zCourseSectionControllerFindAllCourseSectionsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zCourseSectionControllerFindAllCourseSectionsResponse = zPaginatedCourseSectionsDto;

export const zCourseSectionControllerFindAllCourseSectionsForOfferingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zCourseSectionControllerFindAllCourseSectionsForOfferingResponse = zPaginatedCourseSectionsDto;

export const zCourseSectionControllerCreateCourseSectionData = z.object({
    body: zCreateCourseSectionFullDto,
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerCreateCourseSectionResponse = zCourseSectionDto;

export const zCourseSectionControllerRemoveCourseSectionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string(),
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerRemoveCourseSectionResponse = z.object({
    message: z.optional(z.string())
});

export const zCourseSectionControllerFindOneCourseSectionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string(),
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerFindOneCourseSectionResponse = zCourseSectionDto;

export const zCourseSectionControllerUpdateCourseSectionData = z.object({
    body: zUpdateCourseSectionDto,
    path: z.object({
        enrollmentId: z.string(),
        offeringId: z.string(),
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerUpdateCourseSectionResponse = zCourseSectionDto;

export const zCourseSectionControllerFindOneCourseSectionByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseSectionControllerFindOneCourseSectionByIdResponse = zCourseSectionWithCourseOfferingDto;

export const zCourseEnrollmentControllerGetCourseEnrollmentsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCourseEnrollmentControllerGetCourseEnrollmentsResponse = z.array(zDetailedCourseEnrollmentDto);

export const zCourseEnrollmentControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zCourseEnrollmentControllerFindAllResponse = zPaginatedCourseEnrollmentsDto;

export const zCourseEnrollmentControllerDropCourseEnrollmentData = z.object({
    body: zStudentIdentifierDto,
    path: z.object({
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseEnrollmentControllerDropCourseEnrollmentResponse = z.object({
    message: z.optional(z.string())
});

export const zCourseEnrollmentControllerCreateCourseEnrollmentData = z.object({
    body: zStudentIdentifierDto,
    path: z.object({
        sectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zCourseEnrollmentControllerCreateCourseEnrollmentResponse = zCourseEnrollmentDto;

export const zCourseEnrollmentControllerFinalizeCourseEnrollmentData = z.object({
    body: zFinalizeEnrollmentDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCourseEnrollmentControllerFinalizeCourseEnrollmentResponse = z.union([
    z.object({
        message: z.optional(z.string()),
        studentId: z.optional(z.uuid())
    }),
    z.unknown()
]);

export const zLmsContentControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        contentType: z.optional(zContentType),
        progress: z.optional(zProgressStatus)
    }))
});

export const zLmsContentControllerFindAllResponse = zPaginatedModuleContentDto;

export const zLmsContentControllerCreateData = z.object({
    body: zCreateModuleContentDto,
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerCreateResponse = z.union([
    z.object({
        contentType: z.literal('LESSON')
    }).and(zLessonItemDto),
    z.object({
        contentType: z.literal('ASSIGNMENT')
    }).and(zAssignmentItemDto)
]);

export const zLmsContentControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zLmsContentControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zLmsContentControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerFindOneResponse = z.union([
    z.object({
        contentType: z.literal('LESSON')
    }).and(zLessonItemDto),
    z.object({
        contentType: z.literal('ASSIGNMENT')
    }).and(zAssignmentItemDto)
]);

export const zLmsContentControllerUpdateData = z.object({
    body: z.union([
        z.object({
            contentType: z.literal('LESSON')
        }).and(zUpdateLessonItemDto),
        z.object({
            contentType: z.literal('ASSIGNMENT')
        }).and(zUpdateAssignmentItemDto)
    ]),
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerUpdateResponse = zModuleContent;

export const zLmsContentControllerPublishData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerPublishResponse = zMessageDto;

export const zLmsContentControllerUnpublishData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerUnpublishResponse = zMessageDto;

export const zLmsContentControllerFindAllContentProgressData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerFindAllContentProgressResponse = z.array(zDetailedContentProgressDto);

export const zLmsContentControllerCreateContentProgressData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string(),
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsContentControllerCreateContentProgressResponse = zDetailedContentProgressDto;

export const zMajorControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zMajorControllerFindAllResponse = zPaginatedMajorsDto;

export const zMajorControllerCreateData = z.object({
    body: zCreateProgramMajorDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zMajorControllerCreateResponse = zMajorDto;

export const zMajorControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zMajorControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zMajorControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zMajorControllerFindOneResponse = zMajorItemDto;

export const zMajorControllerUpdateData = z.object({
    body: zUpdateMajorDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zMajorControllerUpdateResponse = zMajor;

export const zCurriculumControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCurriculumControllerFindAllResponse = z.array(zCurriculumItemDto);

export const zCurriculumControllerCreateData = z.object({
    body: zCreateCurriculumWithCoursesDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCurriculumControllerCreateResponse = zCurriculumDto;

export const zCurriculumControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zCurriculumControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCurriculumControllerFindOneResponse = zCurriculumWithCoursesDto;

export const zCurriculumControllerUpdateData = z.object({
    body: zUpdateCurriculumWithCourseDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCurriculumControllerUpdateResponse = zCurriculumDto;

export const zAssignmentControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zAssignmentControllerFindOneResponse = zAssignmentDto;

export const zAssignmentControllerUpdateData = z.object({
    body: zUpdateAssignmentConfigDto,
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zAssignmentControllerSubmitData = z.object({
    body: zSubmitAssignmentDto,
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zAssignmentControllerFindAllForAdminData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zAssignmentControllerFindAllForAdminResponse = zPaginatedAssignmentDto;

export const zAssignmentControllerFindAllForMentorData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zAssignmentControllerFindAllForMentorResponse = zPaginatedMentorAssignmentDto;

export const zAssignmentControllerFindAllForStudentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zAssignmentControllerFindAllForStudentResponse = zPaginatedStudentAssignmentDto;

export const zAssignmentControllerFindOneForStudentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zAssignmentControllerFindOneForStudentResponse = zStudentAssignmentItemDto;

export const zLmsSectionControllerFindAllModuleSectionsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsSectionControllerFindAllModuleSectionsResponse = z.array(zDetailedModuleSectionDto);

export const zLmsSectionControllerCreateData = z.object({
    body: zCreateModuleSectionDto,
    path: z.object({
        moduleId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsSectionControllerCreateResponse = zDetailedModuleSectionDto;

export const zLmsSectionControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleSectionId: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zLmsSectionControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleSectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsSectionControllerFindOneResponse = zDetailedModuleSectionDto;

export const zLmsSectionControllerUpdateData = z.object({
    body: zUpdateModuleSectionDto,
    path: z.object({
        moduleSectionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsSectionControllerUpdateResponse = zDetailedModuleSectionDto;

export const zLmsSectionControllerPublishSectionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zLmsSectionControllerUnpublishSectionData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zSubmissionControllerFindAssignmentSubmissionsForAssignmentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zSubmissionControllerFindAssignmentSubmissionsForAssignmentResponse = z.array(zAssignmentSubmissionDetailsDto);

export const zSubmissionControllerSubmitAssignmentData = z.object({
    body: zCreateAssignmentSubmissionDto,
    path: z.object({
        moduleContentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zSubmissionControllerSubmitAssignmentResponse = zAssignmentSubmissionDto;

export const zSubmissionControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        submissionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zSubmissionControllerFindOneResponse = zAssignmentSubmissionDetailsDto;

export const zSubmissionControllerGradeData = z.object({
    body: zGradeSubmissionDto,
    path: z.object({
        submissionId: z.string()
    }),
    query: z.optional(z.never())
});

export const zSubmissionControllerGradeResponse = zGradeRecordDto;

export const zSubmissionControllerFindAssignmentSubmissionsOfStudentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        studentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zSubmissionControllerFindAssignmentSubmissionsOfStudentResponse = z.array(zAssignmentSubmissionDetailsDto);

export const zSubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        moduleContentId: z.string(),
        studentId: z.string()
    }),
    query: z.optional(z.never())
});

export const zSubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentResponse = z.array(zAssignmentSubmissionDetailsDto);

export const zGradingControllerGetStudentGradebookData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        moduleId: z.optional(z.string()),
        studentId: z.optional(z.string()),
        courseOfferingId: z.optional(z.uuid()),
        courseSectionId: z.optional(z.uuid())
    }))
});

/**
 * Student gradebook retrieved successfully
 */
export const zGradingControllerGetStudentGradebookResponse = zGradebookForStudentDto;

export const zGradingControllerGetMentorGradebookData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        moduleId: z.optional(z.string()),
        studentId: z.optional(z.string()),
        courseOfferingId: z.optional(z.uuid()),
        courseSectionId: z.optional(z.uuid())
    }))
});

/**
 * Mentor gradebook retrieved successfully
 */
export const zGradingControllerGetMentorGradebookResponse = zGradebookForMentorDto;

export const zGradingControllerGetAdminGradebookData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        moduleId: z.optional(z.string()),
        studentId: z.optional(z.string()),
        courseOfferingId: z.optional(z.uuid()),
        courseSectionId: z.optional(z.uuid())
    }))
});

/**
 * Admin gradebook retrieved successfully
 */
export const zGradingControllerGetAdminGradebookResponse = zGradebookForMentorDto;

export const zGradingControllerGradeAssignmentSubmissionData = z.object({
    body: zGradeAssignmentSubmissionDto,
    path: z.object({
        submissionId: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Assignment graded successfully
 */
export const zGradingControllerGradeAssignmentSubmissionResponse = zGradeRecordDto;

export const zGradingControllerUpdateGradeRecordData = z.object({
    body: zUpdateGradeRecordDto,
    path: z.object({
        recordId: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Grade record updated successfully
 */
export const zGradingControllerUpdateGradeRecordResponse = zGradeRecord;

export const zSwaggerControllerDownloadAllSpecsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zPricingControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zPricingControllerFindAllResponse = zPaginatedPricingDto;

export const zPricingControllerCreateData = z.object({
    body: zCreatePricingDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zPricingControllerCreateResponse = zPricingDto;

export const zPricingControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zPricingControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPricingControllerFindOneResponse = zPricingDto;

export const zPricingControllerUpdateData = z.object({
    body: zUpdatePricingDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPricingControllerUpdateResponse = zPricingDto;

export const zPricingGroupControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zPricingGroupControllerFindAllResponse = zPaginatedPricingGroupDto;

export const zPricingGroupControllerCreateData = z.object({
    body: zCreatePricingGroupItemDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zPricingGroupControllerCreateResponse = zPricingGroupDto;

export const zPricingGroupControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zPricingGroupControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPricingGroupControllerFindOneResponse = zPricingGroupItemDto;

export const zPricingGroupControllerUpdateData = z.object({
    body: zUpdatePricingGroupItemDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPricingGroupControllerUpdateResponse = zPricingGroupItemDto;

export const zAppointmentsControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10),
        status: z.optional(z.array(zAppointmentStatus))
    }))
});

export const zAppointmentsControllerFindAllResponse = zPaginatedAppointmentDto;

export const zAppointmentsControllerCreateData = z.object({
    body: zCreateAppointmentItemDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAppointmentsControllerCreateResponse = zAppointmentItemDto;

export const zAppointmentsControllerFindMentorData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number().gte(1)).default(1),
        limit: z.optional(z.number().gte(1)).default(10)
    }))
});

export const zAppointmentsControllerFindMentorResponse = zPaginatedUsersDto;

export const zAppointmentsControllerFindCoursesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAppointmentsControllerFindCoursesResponse = z.array(zDetailedCourseEnrollmentDto);

export const zAppointmentsControllerFindBookedRangeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.object({
        from: z.string(),
        to: z.string(),
        courseId: z.uuid(),
        mentorId: z.uuid()
    })
});

export const zAppointmentsControllerFindBookedRangeResponse = z.array(zBookedAppointment);

export const zAppointmentsControllerFindAllBookedData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        mentorId: z.string()
    }),
    query: z.optional(z.object({
        startAt: z.optional(z.iso.datetime()),
        endAt: z.optional(z.iso.datetime())
    }))
});

export const zAppointmentsControllerFindAllBookedResponse = z.array(zBookedAppointmentDto);

export const zAppointmentsControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zAppointmentsControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zAppointmentsControllerFindOneResponse = zAppointmentDetailsDto;

export const zAppointmentsControllerUpdateDetailsData = z.object({
    body: zUpdateAppointmentItemDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zAppointmentsControllerUpdateDetailsResponse = zAppointmentItemDto;

export const zAppointmentsControllerUpdateStatusData = z.object({
    body: zUpdateAppointmentStatusDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zAppointmentsControllerUpdateStatusResponse = zAppointmentItemDto;