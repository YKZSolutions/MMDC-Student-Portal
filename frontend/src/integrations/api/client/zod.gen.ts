// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zRole = z.enum([
    'student',
    'mentor',
    'admin'
]);

export const zUserCredentialsDto = z.object({
    email: z.email(),
    password: z.string()
});

export const zCreateUserWithAccountDto = z.object({
    firstName: z.string(),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.string(),
    role: zRole,
    credentials: z.optional(zUserCredentialsDto)
});

export const zUser = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserAccount = z.object({
    id: z.string(),
    userId: z.string(),
    authUid: z.string(),
    email: z.optional(z.string()),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.optional(z.iso.datetime())
});

export const zUserDetails = z.object({
    id: z.string(),
    userId: z.string(),
    dob: z.optional(z.iso.datetime()),
    gender: z.optional(z.string()),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.optional(z.iso.datetime())
});

export const zUserWithRelations = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.optional(z.string()),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.optional(z.iso.datetime()),
    userAccount: z.union([
        zUserAccount,
        z.null()
    ]),
    userDetails: z.union([
        zUserDetails,
        z.null()
    ])
});

export const zPaginationMetaDto = z.object({
    isFirstPage: z.boolean(),
    isLastPage: z.boolean(),
    currentPage: z.number(),
    previousPage: z.union([
        z.number(),
        z.null()
    ]),
    nextPage: z.union([
        z.number(),
        z.null()
    ]),
    pageCount: z.number(),
    totalCount: z.number()
});

export const zPaginatedUsersDto = z.object({
    users: z.array(zUserWithRelations),
    meta: zPaginationMetaDto
});

export const zCreateCourseDto = z.object({});

export const zUpdateCourseDto = z.object({});

export const zUsersControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        role: z.optional(z.enum([
            'student',
            'mentor',
            'admin'
        ])),
        page: z.optional(z.number()).default(1)
    }))
});

/**
 * List of users retrieved successfully
 */
export const zUsersControllerFindAllResponse = zPaginatedUsersDto;

export const zUsersControllerCreateData = z.object({
    body: zCreateUserWithAccountDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateResponse = zUser;

export const zUsersControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * User found successfully
 */
export const zUsersControllerFindOneResponse = zUser;

export const zCoursesControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCoursesControllerFindAllResponse = z.string();

export const zCoursesControllerCreateData = z.object({
    body: zCreateCourseDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCoursesControllerCreateResponse = z.string();

export const zCoursesControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerRemoveResponse = z.string();

export const zCoursesControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerFindOneResponse = z.string();

export const zCoursesControllerUpdateData = z.object({
    body: zUpdateCourseDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerUpdateResponse = z.string();

export const zTestControllerTestStudentData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zTestControllerTestStudentResponse = z.string();

export const zTestControllerTestAdminData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zTestControllerTestAdminResponse = z.string();