// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zTestBodyNestDto = z.object({
    name: z.string()
});

export const zTestBodyDto = z.object({
    id: z.number(),
    nested: zTestBodyNestDto
});

export const zRole = z.enum([
    'student',
    'mentor',
    'admin'
]);

export const zCreateUserDto = z.object({
    firstName: z.string(),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.string()
});

export const zUserCredentialsDto = z.object({
    email: z.email(),
    password: z.optional(z.string())
});

export const zCreateUserDetailsDto = z.object({
    dateJoined: z.iso.datetime(),
    dob: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    gender: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateUserFullDto = z.object({
    role: zRole,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zUser = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    disabledAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zStudentType = z.enum([
    'new',
    'regular',
    'irregular',
    'transfer',
    'returnee',
    'graduate',
    'special'
]);

export const zCreateStudentDetailsDto = z.object({
    studentNumber: z.int(),
    studentType: zStudentType,
    admissionDate: z.iso.datetime(),
    otherDetails: z.object({})
});

export const zCreateUserStudentDto = z.object({
    specificDetails: zCreateStudentDetailsDto,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zStaffRole = z.enum([
    'mentor',
    'admin'
]);

export const zCreateStaffDetailsDto = z.object({
    employeeNumber: z.int(),
    department: z.string(),
    position: z.string(),
    otherDetails: z.object({})
});

export const zCreateUserStaffDto = z.object({
    role: zStaffRole,
    specificDetails: zCreateStaffDetailsDto,
    user: zCreateUserDto,
    credentials: zUserCredentialsDto,
    userDetails: z.optional(zCreateUserDetailsDto)
});

export const zInviteUserDto = z.object({
    firstName: z.string(),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.string(),
    role: zRole,
    email: z.email()
});

export const zUserDetailsDto = z.object({
    id: z.string(),
    dateJoined: z.iso.datetime(),
    dob: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    gender: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserDetailsFullDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ])
});

export const zStudentDetailsDto = z.object({
    id: z.string(),
    studentNumber: z.int(),
    studentType: zStudentType,
    admissionDate: z.iso.datetime(),
    otherDetails: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserStudentDetailsDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ]),
    studentDetails: z.union([
        zStudentDetailsDto,
        z.null()
    ])
});

export const zStaffDetailsDto = z.object({
    id: z.string(),
    employeeNumber: z.int(),
    department: z.string(),
    position: z.string(),
    otherDetails: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserStaffDetailsDto = z.object({
    id: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: z.enum([
        'student',
        'mentor',
        'admin'
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ]),
    staffDetails: z.union([
        zStaffDetailsDto,
        z.null()
    ])
});

export const zUpdateStudentDetailsDto = z.object({
    studentNumber: z.optional(z.int()),
    studentType: z.optional(zStudentType),
    admissionDate: z.optional(z.iso.datetime()),
    otherDetails: z.optional(z.object({}))
});

export const zUpdateUserDto = z.object({
    firstName: z.optional(z.string()),
    middleName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.optional(z.string())
});

export const zUpdateUserDetailsDto = z.object({
    dateJoined: z.optional(z.iso.datetime()),
    dob: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    gender: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateUserStudentDto = z.object({
    specificDetails: z.optional(zUpdateStudentDetailsDto),
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zUpdateStaffDetailsDto = z.object({
    employeeNumber: z.optional(z.int()),
    department: z.optional(z.string()),
    position: z.optional(z.string()),
    otherDetails: z.optional(z.object({}))
});

export const zUpdateUserStaffDto = z.object({
    specificDetails: z.optional(zUpdateStaffDetailsDto),
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zUpdateUserBaseDto = z.object({
    user: z.optional(zUpdateUserDto),
    userDetails: z.optional(zUpdateUserDetailsDto)
});

export const zPaginationMetaDto = z.object({
    isFirstPage: z.boolean(),
    isLastPage: z.boolean(),
    currentPage: z.number(),
    previousPage: z.union([
        z.number(),
        z.null()
    ]),
    nextPage: z.union([
        z.number(),
        z.null()
    ]),
    pageCount: z.number(),
    totalCount: z.number()
});

export const zUserAccountDto = z.object({
    id: z.string(),
    authUid: z.string(),
    email: z.union([
        z.string(),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUserWithRelations = z.object({
    id: z.string(),
    firstName: z.string(),
    middleName: z.union([
        z.string(),
        z.null()
    ]),
    lastName: z.string(),
    role: zRole,
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    disabledAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ]),
    userAccount: z.union([
        zUserAccountDto,
        z.null()
    ]),
    userDetails: z.union([
        zUserDetailsDto,
        z.null()
    ])
});

export const zPaginatedUsersDto = z.object({
    meta: zPaginationMetaDto,
    users: z.array(zUserWithRelations)
});

export const zCreateCourseDto = z.object({});

export const zUpdateCourseDto = z.object({});

export const zUserStatus = z.enum([
    'active',
    'disabled',
    'deleted'
]);

export const zAuthMetadataDto = z.object({
    role: z.optional(zRole),
    status: z.optional(zUserStatus),
    user_id: z.optional(z.string())
});

export const zBillStatus = z.enum([
    'paid',
    'unpaid',
    'overpaid'
]);

export const zCreateBillDto = z.object({
    invoiceId: z.string(),
    payerName: z.string(),
    payerEmail: z.string(),
    billType: z.string(),
    status: zBillStatus,
    receivableAmount: z.string(),
    receiptedAmount: z.string(),
    outstandingAmount: z.string(),
    dueAt: z.iso.datetime(),
    issuedAt: z.iso.datetime(),
    costBreakdown: z.object({})
});

export const zBillingCostBreakdown = z.object({
    name: z.string(),
    cost: z.number(),
    category: z.string()
});

export const zCreateBillingDto = z.object({
    bill: zCreateBillDto,
    costBreakdown: z.array(zBillingCostBreakdown),
    userId: z.optional(z.uuid())
});

export const zBillDto = z.object({
    id: z.string(),
    invoiceId: z.string(),
    payerName: z.string(),
    payerEmail: z.string(),
    billType: z.string(),
    status: zBillStatus,
    receivableAmount: z.string(),
    receiptedAmount: z.string(),
    outstandingAmount: z.string(),
    dueAt: z.iso.datetime(),
    issuedAt: z.iso.datetime(),
    costBreakdown: z.object({}),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedBillsDto = z.object({
    bills: z.array(zBillDto),
    meta: z.object({})
});

export const zUpdateBillDto = z.object({
    invoiceId: z.optional(z.string()),
    payerName: z.optional(z.string()),
    payerEmail: z.optional(z.string()),
    billType: z.optional(z.string()),
    status: z.optional(zBillStatus),
    receivableAmount: z.optional(z.string()),
    receiptedAmount: z.optional(z.string()),
    outstandingAmount: z.optional(z.string()),
    dueAt: z.optional(z.iso.datetime()),
    issuedAt: z.optional(z.iso.datetime()),
    costBreakdown: z.optional(z.object({}))
});

export const zInitiatePaymentDto = z.object({
    description: z.optional(z.string()),
    statementDescriptor: z.optional(z.string()),
    amount: z.number()
});

export const zPaymentIntentAttributesDto = z.object({
    amount: z.number(),
    capture_type: z.string(),
    client_key: z.string(),
    created_at: z.number(),
    currency: z.string(),
    description: z.string(),
    last_payment_error: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    livemode: z.boolean(),
    metadata: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    next_action: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    original_amount: z.number(),
    payment_method_allowed: z.array(z.string()),
    payment_method_options: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    payments: z.array(z.object({})),
    setup_future_usage: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    statement_descriptor: z.string(),
    status: z.string(),
    updated_at: z.number()
});

export const zPaymentIntentDataDto = z.object({
    id: z.string(),
    type: z.string(),
    attributes: zPaymentIntentAttributesDto
});

export const zPaymentIntentResponseDto = z.object({
    data: zPaymentIntentDataDto
});

export const zCreateBillPaymentDto = z.object({
    amountPaid: z.string(),
    paymentType: z.string(),
    notes: z.string(),
    paymentDate: z.iso.datetime(),
    paymongoData: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreatePaymentDto = z.object({
    payment: zCreateBillPaymentDto,
    description: z.optional(z.string()),
    statementDescriptor: z.optional(z.string())
});

export const zBillPaymentDto = z.object({
    id: z.string(),
    amountPaid: z.string(),
    paymentType: z.string(),
    notes: z.string(),
    paymentDate: z.iso.datetime(),
    paymongoData: z.union([
        z.object({}),
        z.null()
    ]),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zUpdateBillPaymentDto = z.object({
    amountPaid: z.optional(z.string()),
    paymentType: z.optional(z.string()),
    notes: z.optional(z.string()),
    paymentDate: z.optional(z.iso.datetime()),
    paymongoData: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreateProgramDto = z.object({
    code: z.string(),
    name: z.string(),
    description: z.string()
});

export const zProgram = z.object({
    id: z.string(),
    code: z.string(),
    name: z.string(),
    description: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zProgramDto = z.object({
    id: z.string(),
    code: z.string(),
    name: z.string(),
    description: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedProgramsDto = z.object({
    meta: zPaginationMetaDto,
    programs: z.array(zProgramDto)
});

export const zUpdateProgramDto = z.object({
    code: z.optional(z.string()),
    name: z.optional(z.string()),
    description: z.optional(z.string())
});

export const zTurn = z.object({
    role: z.enum([
        'user',
        'model'
    ]),
    content: z.string()
});

export const zPromptDto = z.object({
    question: z.string(),
    sessionHistory: z.array(zTurn)
});

export const zChatbotResponseDto = z.object({
    response: z.string()
});

export const zCreateMajorDto = z.object({
    get major() {
        return z.lazy((): any => {
            return zCreateMajorDto;
        });
    },
    programId: z.uuid()
});

export const zCourse = z.object({
    id: z.string(),
    get major(): z.ZodOptional {
        return z.optional(z.array(zMajor));
    },
    get prereqs(): z.ZodOptional {
        return z.optional(z.array(z.lazy((): any => {
            return zCourse;
        })));
    },
    get prereqFor(): z.ZodOptional {
        return z.optional(z.array(z.lazy((): any => {
            return zCourse;
        })));
    },
    get coreqs(): z.ZodOptional {
        return z.optional(z.array(z.lazy((): any => {
            return zCourse;
        })));
    },
    get coreqFor(): z.ZodOptional {
        return z.optional(z.array(z.lazy((): any => {
            return zCourse;
        })));
    },
    courseCode: z.string(),
    name: z.string(),
    description: z.string(),
    year: z.string(),
    semester: z.string(),
    units: z.int(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zMajor = z.object({
    id: z.string(),
    programId: z.string(),
    courses: z.optional(z.array(zCourse)),
    name: z.string(),
    description: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zMajorDto = z.object({
    id: z.string(),
    name: z.string(),
    description: z.string(),
    createdAt: z.iso.datetime(),
    updatedAt: z.iso.datetime(),
    deletedAt: z.union([
        z.iso.datetime(),
        z.null()
    ])
});

export const zPaginatedMajorsDto = z.object({
    meta: zPaginationMetaDto,
    majors: z.array(zMajorDto)
});

export const zUpdateMajorDto = z.object({
    name: z.optional(z.string()),
    description: z.optional(z.string())
});

export const zTestControllerTestStudentData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zTestControllerTestStudentResponse = z.string();

export const zTestControllerTestAdminData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zTestControllerTestAdminResponse = z.string();

export const zTestControllerTestData = z.object({
    body: zTestBodyDto,
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        page: z.number()
    })
});

export const zTestControllerTestResponse = z.string();

export const zUsersControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number()).default(1),
        role: z.optional(z.enum([
            'student',
            'mentor',
            'admin'
        ]))
    }))
});

/**
 * List of users retrieved successfully
 */
export const zUsersControllerFindAllResponse = zPaginatedUsersDto;

export const zUsersControllerCreateData = z.object({
    body: zCreateUserFullDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateResponse = zUser;

export const zUsersControllerCreateStudentData = z.object({
    body: zCreateUserStudentDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateStudentResponse = zUser;

export const zUsersControllerCreateStaffData = z.object({
    body: zCreateUserStaffDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerCreateStaffResponse = zUser;

export const zUsersControllerInviteUserData = z.object({
    body: zInviteUserDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerInviteUserResponse = zUser;

export const zUsersControllerGetMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Current user details fetched successfully
 */
export const zUsersControllerGetMeResponse = z.union([
    zUserStudentDetailsDto,
    zUserStaffDetailsDto
]);

export const zUsersControllerUpdateOwnUserDetailsData = z.object({
    body: zUpdateUserBaseDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateOwnUserDetailsResponse = zUser;

export const zUsersControllerUpdateUserStudentDetailsData = z.object({
    body: zUpdateUserStudentDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateUserStudentDetailsResponse = zUser;

export const zUsersControllerUpdateUserStaffDetailsData = z.object({
    body: zUpdateUserStaffDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zUsersControllerUpdateUserStaffDetailsResponse = zUser;

export const zUsersControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

/**
 * User deleted successfully
 */
export const zUsersControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zUsersControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * User found successfully
 */
export const zUsersControllerFindOneResponse = zUser;

export const zUsersControllerUpdateUserStatusData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * User status updated successfully
 */
export const zUsersControllerUpdateUserStatusResponse = z.object({
    message: z.optional(z.string())
});

export const zCoursesControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCoursesControllerFindAllResponse = z.string();

export const zCoursesControllerCreateData = z.object({
    body: zCreateCourseDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zCoursesControllerCreateResponse = z.string();

export const zCoursesControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerRemoveResponse = z.string();

export const zCoursesControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerFindOneResponse = z.string();

export const zCoursesControllerUpdateData = z.object({
    body: zUpdateCourseDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zCoursesControllerUpdateResponse = z.string();

export const zAuthControllerGetMetadataData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        uid: z.string()
    }),
    query: z.optional(z.never())
});

export const zAuthControllerGetMetadataResponse = zAuthMetadataDto;

export const zAuthControllerLoginData = z.object({
    body: zUserCredentialsDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthControllerLoginResponse = z.string();

export const zBillingControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        sortOrder: z.optional(z.enum([
            'asc',
            'desc'
        ])),
        page: z.optional(z.number()).default(1),
        search: z.optional(z.string()),
        sort: z.optional(z.enum([
            'status',
            'amount',
            'dueAt',
            'createdAt'
        ])),
        status: z.optional(z.enum([
            'paid',
            'unpaid',
            'overpaid'
        ])),
        type: z.optional(z.string())
    }))
});

export const zBillingControllerFindAllResponse = zPaginatedBillsDto;

export const zBillingControllerCreateData = z.object({
    body: zCreateBillingDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zBillingControllerCreateResponse = zBillDto;

export const zBillingControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zBillingControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zBillingControllerFindOneResponse = zBillDto;

export const zBillingControllerUpdateData = z.object({
    body: zUpdateBillDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zBillingControllerUpdateResponse = zBillDto;

export const zPaymentsControllerPayData = z.object({
    body: zInitiatePaymentDto,
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerPayResponse = zPaymentIntentResponseDto;

export const zPaymentsControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerFindAllResponse = z.array(zBillPaymentDto);

export const zPaymentsControllerCreateData = z.object({
    body: zCreatePaymentDto,
    path: z.object({
        billId: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerCreateResponse = zBillPaymentDto;

export const zPaymentsControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerFindOneResponse = zBillPaymentDto;

export const zPaymentsControllerUpdateData = z.object({
    body: zUpdateBillPaymentDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zPaymentsControllerUpdateResponse = zBillPaymentDto;

export const zProgramControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number()).default(1)
    }))
});

/**
 * List of programs retrieved successfully
 */
export const zProgramControllerFindAllResponse = zPaginatedProgramsDto;

export const zProgramControllerCreateData = z.object({
    body: zCreateProgramDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zProgramControllerCreateResponse = zProgram;

export const zProgramControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

/**
 * Program deleted successfully
 */
export const zProgramControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zProgramControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Program retrieved successfully
 */
export const zProgramControllerFindOneResponse = zProgram;

export const zProgramControllerUpdateData = z.object({
    body: zUpdateProgramDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Program updated successfully
 */
export const zProgramControllerUpdateResponse = zProgram;

export const zChatbotControllerPromptData = z.object({
    body: zPromptDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zChatbotControllerPromptResponse = zChatbotResponseDto;

export const zMajorControllerFindAllData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        search: z.optional(z.string()),
        page: z.optional(z.number()).default(1)
    }))
});

export const zMajorControllerFindAllResponse = zPaginatedMajorsDto;

export const zMajorControllerCreateData = z.object({
    body: zCreateMajorDto,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zMajorControllerCreateResponse = zMajor;

export const zMajorControllerRemoveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.object({
        directDelete: z.optional(z.boolean())
    }))
});

export const zMajorControllerRemoveResponse = z.object({
    message: z.optional(z.string())
});

export const zMajorControllerFindOneData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zMajorControllerFindOneResponse = zMajor;

export const zMajorControllerUpdateData = z.object({
    body: zUpdateMajorDto,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

export const zMajorControllerUpdateResponse = zMajor;