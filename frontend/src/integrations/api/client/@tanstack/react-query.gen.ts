// This file is auto-generated by @hey-api/openapi-ts

import { type Options, usersControllerFindAll, usersControllerCreate, usersControllerCreateStudent, usersControllerCreateStaff, usersControllerInviteUser, usersControllerGetMe, usersControllerUpdateOwnUserDetails, usersControllerUpdateUserStudentDetails, usersControllerUpdateUserStaffDetails, usersControllerRemove, usersControllerFindOne, usersControllerUpdateUserStatus, coursesControllerFindAll, coursesControllerCreate, coursesControllerRemove, coursesControllerFindOne, coursesControllerUpdate, testControllerTestStudent, testControllerTestAdmin, authControllerGetMetadata, billingControllerFindAll, billingControllerCreate, billingControllerRemove, billingControllerFindOne, billingControllerUpdate } from '../sdk.gen';
import { queryOptions, infiniteQueryOptions, type InfiniteData, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { UsersControllerFindAllData, UsersControllerFindAllError, UsersControllerFindAllResponse, UsersControllerCreateData, UsersControllerCreateError, UsersControllerCreateResponse, UsersControllerCreateStudentData, UsersControllerCreateStudentError, UsersControllerCreateStudentResponse, UsersControllerCreateStaffData, UsersControllerCreateStaffError, UsersControllerCreateStaffResponse, UsersControllerInviteUserData, UsersControllerInviteUserError, UsersControllerInviteUserResponse, UsersControllerGetMeData, UsersControllerUpdateOwnUserDetailsData, UsersControllerUpdateOwnUserDetailsError, UsersControllerUpdateOwnUserDetailsResponse, UsersControllerUpdateUserStudentDetailsData, UsersControllerUpdateUserStudentDetailsError, UsersControllerUpdateUserStudentDetailsResponse, UsersControllerUpdateUserStaffDetailsData, UsersControllerUpdateUserStaffDetailsError, UsersControllerUpdateUserStaffDetailsResponse, UsersControllerRemoveData, UsersControllerRemoveError, UsersControllerRemoveResponse, UsersControllerFindOneData, UsersControllerUpdateUserStatusData, UsersControllerUpdateUserStatusError, UsersControllerUpdateUserStatusResponse, CoursesControllerFindAllData, CoursesControllerCreateData, CoursesControllerCreateResponse, CoursesControllerRemoveData, CoursesControllerRemoveResponse, CoursesControllerFindOneData, CoursesControllerUpdateData, CoursesControllerUpdateResponse, TestControllerTestStudentData, TestControllerTestAdminData, AuthControllerGetMetadataData, BillingControllerFindAllData, BillingControllerCreateData, BillingControllerCreateResponse, BillingControllerRemoveData, BillingControllerRemoveResponse, BillingControllerFindOneData, BillingControllerUpdateData, BillingControllerUpdateResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const usersControllerFindAllQueryKey = (options?: Options<UsersControllerFindAllData>) => createQueryKey('usersControllerFindAll', options);

/**
 * Get users
 * Retrieves a paginated list of users based on the provided filter parameters.
 * - **Access:** Requires `ADMIN` role.
 * - **Filtering & Pagination:** Uses the `FilterUserDto` to define query parameters such as search terms, sorting, and page size.
 */
export const usersControllerFindAllOptions = (options?: Options<UsersControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindAllQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const usersControllerFindAllInfiniteQueryKey = (options?: Options<UsersControllerFindAllData>): QueryKey<Options<UsersControllerFindAllData>> => createQueryKey('usersControllerFindAll', options, true);

/**
 * Get users
 * Retrieves a paginated list of users based on the provided filter parameters.
 * - **Access:** Requires `ADMIN` role.
 * - **Filtering & Pagination:** Uses the `FilterUserDto` to define query parameters such as search terms, sorting, and page size.
 */
export const usersControllerFindAllInfiniteOptions = (options?: Options<UsersControllerFindAllData>) => {
    return infiniteQueryOptions<UsersControllerFindAllResponse, UsersControllerFindAllError, InfiniteData<UsersControllerFindAllResponse>, QueryKey<Options<UsersControllerFindAllData>>, number | Pick<QueryKey<Options<UsersControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<UsersControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await usersControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindAllInfiniteQueryKey(options)
    });
};

export const usersControllerCreateQueryKey = (options: Options<UsersControllerCreateData>) => createQueryKey('usersControllerCreate', options);

/**
 * Create a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerCreateOptions = (options: Options<UsersControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerCreateQueryKey(options)
    });
};

/**
 * Create a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerCreateMutation = (options?: Partial<Options<UsersControllerCreateData>>): UseMutationOptions<UsersControllerCreateResponse, UsersControllerCreateError, Options<UsersControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerCreateResponse, UsersControllerCreateError, Options<UsersControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerCreateStudentQueryKey = (options: Options<UsersControllerCreateStudentData>) => createQueryKey('usersControllerCreateStudent', options);

/**
 * Create a new student user
 * This operation creates both a user and a supabase auth account.
 * It also has additional properties for student specific details.
 */
export const usersControllerCreateStudentOptions = (options: Options<UsersControllerCreateStudentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerCreateStudent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerCreateStudentQueryKey(options)
    });
};

/**
 * Create a new student user
 * This operation creates both a user and a supabase auth account.
 * It also has additional properties for student specific details.
 */
export const usersControllerCreateStudentMutation = (options?: Partial<Options<UsersControllerCreateStudentData>>): UseMutationOptions<UsersControllerCreateStudentResponse, UsersControllerCreateStudentError, Options<UsersControllerCreateStudentData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerCreateStudentResponse, UsersControllerCreateStudentError, Options<UsersControllerCreateStudentData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerCreateStudent({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerCreateStaffQueryKey = (options: Options<UsersControllerCreateStaffData>) => createQueryKey('usersControllerCreateStaff', options);

/**
 * Create a new staff user
 * This operation creates both a user and a supabase auth account.
 * It also has additional properties for staff specific details.
 */
export const usersControllerCreateStaffOptions = (options: Options<UsersControllerCreateStaffData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerCreateStaff({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerCreateStaffQueryKey(options)
    });
};

/**
 * Create a new staff user
 * This operation creates both a user and a supabase auth account.
 * It also has additional properties for staff specific details.
 */
export const usersControllerCreateStaffMutation = (options?: Partial<Options<UsersControllerCreateStaffData>>): UseMutationOptions<UsersControllerCreateStaffResponse, UsersControllerCreateStaffError, Options<UsersControllerCreateStaffData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerCreateStaffResponse, UsersControllerCreateStaffError, Options<UsersControllerCreateStaffData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerCreateStaff({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerInviteUserQueryKey = (options: Options<UsersControllerInviteUserData>) => createQueryKey('usersControllerInviteUser', options);

/**
 * Invite a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerInviteUserOptions = (options: Options<UsersControllerInviteUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerInviteUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerInviteUserQueryKey(options)
    });
};

/**
 * Invite a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerInviteUserMutation = (options?: Partial<Options<UsersControllerInviteUserData>>): UseMutationOptions<UsersControllerInviteUserResponse, UsersControllerInviteUserError, Options<UsersControllerInviteUserData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerInviteUserResponse, UsersControllerInviteUserError, Options<UsersControllerInviteUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerInviteUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerGetMeQueryKey = (options?: Options<UsersControllerGetMeData>) => createQueryKey('usersControllerGetMe', options);

/**
 * Get the currently authenticated user
 * This endpoint returns the full profile of the currently authenticated user.
 * The structure of the returned object depends on the user's role:
 *
 * - `UserStudentDetailsDto` for users with the `student` role
 * - `UserStaffDetailsDto` for users with the `mentor` or `admin` role
 */
export const usersControllerGetMeOptions = (options?: Options<UsersControllerGetMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerGetMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerGetMeQueryKey(options)
    });
};

/**
 * Update personal details
 * This operation updates the user details in the database
 */
export const usersControllerUpdateOwnUserDetailsMutation = (options?: Partial<Options<UsersControllerUpdateOwnUserDetailsData>>): UseMutationOptions<UsersControllerUpdateOwnUserDetailsResponse, UsersControllerUpdateOwnUserDetailsError, Options<UsersControllerUpdateOwnUserDetailsData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateOwnUserDetailsResponse, UsersControllerUpdateOwnUserDetailsError, Options<UsersControllerUpdateOwnUserDetailsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerUpdateOwnUserDetails({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update student user details (Admin only)
 * This operation updates the user details in the database.
 * The user should be have a student role.
 */
export const usersControllerUpdateUserStudentDetailsMutation = (options?: Partial<Options<UsersControllerUpdateUserStudentDetailsData>>): UseMutationOptions<UsersControllerUpdateUserStudentDetailsResponse, UsersControllerUpdateUserStudentDetailsError, Options<UsersControllerUpdateUserStudentDetailsData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateUserStudentDetailsResponse, UsersControllerUpdateUserStudentDetailsError, Options<UsersControllerUpdateUserStudentDetailsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerUpdateUserStudentDetails({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update staff user details (Admin only)
 * This operation updates the user details in the database.
 * The user should be have a mentor or admin role.
 */
export const usersControllerUpdateUserStaffDetailsMutation = (options?: Partial<Options<UsersControllerUpdateUserStaffDetailsData>>): UseMutationOptions<UsersControllerUpdateUserStaffDetailsResponse, UsersControllerUpdateUserStaffDetailsError, Options<UsersControllerUpdateUserStaffDetailsData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateUserStaffDetailsResponse, UsersControllerUpdateUserStaffDetailsError, Options<UsersControllerUpdateUserStaffDetailsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerUpdateUserStaffDetails({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Deletes a user (soft & hard delete)
 * This endpoint performs either a soft delete or a permanent delete on a user depending on the current state of the user or the query parameter provided:
 *
 * - If `directDelete` is true, the user is **permanently deleted** without checking if they are already soft deleted.
 * - If `directDelete` is not provided or false:
 * - If the user is not yet soft deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.
 * - If the user is already soft deleted, a **permanent delete** is executed.
 *
 * All of the user details and the supabase auth account will be deleted from the cloud on hard delete
 *
 * Use this endpoint to manage user deletion workflows flexibly through a single API.
 */
export const usersControllerRemoveMutation = (options?: Partial<Options<UsersControllerRemoveData>>): UseMutationOptions<UsersControllerRemoveResponse, UsersControllerRemoveError, Options<UsersControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerRemoveResponse, UsersControllerRemoveError, Options<UsersControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerFindOneQueryKey = (options?: Options<UsersControllerFindOneData>) => createQueryKey('usersControllerFindOne', options);

/**
 * Get user by id
 * Retrieves a specific user by their unique identifier.
 * - **Validation:** Ensures the provided `id` is a valid identifier format.
 * - **Not Found Handling:** Throws an error if no matching user is found.
 */
export const usersControllerFindOneOptions = (options?: Options<UsersControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindOneQueryKey(options)
    });
};

/**
 * Updates the status of a user (enable/disable).
 * This endpoint toggles the user's status between active and disabled
 * by updating the `disabledAt` field. The change is also reflected in
 * the authentication provider's metadata.
 */
export const usersControllerUpdateUserStatusMutation = (options?: Partial<Options<UsersControllerUpdateUserStatusData>>): UseMutationOptions<UsersControllerUpdateUserStatusResponse, UsersControllerUpdateUserStatusError, Options<UsersControllerUpdateUserStatusData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateUserStatusResponse, UsersControllerUpdateUserStatusError, Options<UsersControllerUpdateUserStatusData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerUpdateUserStatus({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const coursesControllerFindAllQueryKey = (options?: Options<CoursesControllerFindAllData>) => createQueryKey('coursesControllerFindAll', options);

export const coursesControllerFindAllOptions = (options?: Options<CoursesControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await coursesControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: coursesControllerFindAllQueryKey(options)
    });
};

export const coursesControllerCreateQueryKey = (options: Options<CoursesControllerCreateData>) => createQueryKey('coursesControllerCreate', options);

export const coursesControllerCreateOptions = (options: Options<CoursesControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await coursesControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: coursesControllerCreateQueryKey(options)
    });
};

export const coursesControllerCreateMutation = (options?: Partial<Options<CoursesControllerCreateData>>): UseMutationOptions<CoursesControllerCreateResponse, DefaultError, Options<CoursesControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<CoursesControllerCreateResponse, DefaultError, Options<CoursesControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await coursesControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const coursesControllerRemoveMutation = (options?: Partial<Options<CoursesControllerRemoveData>>): UseMutationOptions<CoursesControllerRemoveResponse, DefaultError, Options<CoursesControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<CoursesControllerRemoveResponse, DefaultError, Options<CoursesControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await coursesControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const coursesControllerFindOneQueryKey = (options: Options<CoursesControllerFindOneData>) => createQueryKey('coursesControllerFindOne', options);

export const coursesControllerFindOneOptions = (options: Options<CoursesControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await coursesControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: coursesControllerFindOneQueryKey(options)
    });
};

export const coursesControllerUpdateMutation = (options?: Partial<Options<CoursesControllerUpdateData>>): UseMutationOptions<CoursesControllerUpdateResponse, DefaultError, Options<CoursesControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<CoursesControllerUpdateResponse, DefaultError, Options<CoursesControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await coursesControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const testControllerTestStudentQueryKey = (options?: Options<TestControllerTestStudentData>) => createQueryKey('testControllerTestStudent', options);

export const testControllerTestStudentOptions = (options?: Options<TestControllerTestStudentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await testControllerTestStudent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testControllerTestStudentQueryKey(options)
    });
};

export const testControllerTestAdminQueryKey = (options?: Options<TestControllerTestAdminData>) => createQueryKey('testControllerTestAdmin', options);

export const testControllerTestAdminOptions = (options?: Options<TestControllerTestAdminData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await testControllerTestAdmin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testControllerTestAdminQueryKey(options)
    });
};

export const authControllerGetMetadataQueryKey = (options: Options<AuthControllerGetMetadataData>) => createQueryKey('authControllerGetMetadata', options);

/**
 * Get User Account Metadata
 * Retrieves the supabase auth account's metadata based on the uid given
 */
export const authControllerGetMetadataOptions = (options: Options<AuthControllerGetMetadataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerGetMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerGetMetadataQueryKey(options)
    });
};

export const billingControllerFindAllQueryKey = (options?: Options<BillingControllerFindAllData>) => createQueryKey('billingControllerFindAll', options);

export const billingControllerFindAllOptions = (options?: Options<BillingControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await billingControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: billingControllerFindAllQueryKey(options)
    });
};

export const billingControllerCreateQueryKey = (options: Options<BillingControllerCreateData>) => createQueryKey('billingControllerCreate', options);

export const billingControllerCreateOptions = (options: Options<BillingControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await billingControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: billingControllerCreateQueryKey(options)
    });
};

export const billingControllerCreateMutation = (options?: Partial<Options<BillingControllerCreateData>>): UseMutationOptions<BillingControllerCreateResponse, DefaultError, Options<BillingControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<BillingControllerCreateResponse, DefaultError, Options<BillingControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await billingControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const billingControllerRemoveMutation = (options?: Partial<Options<BillingControllerRemoveData>>): UseMutationOptions<BillingControllerRemoveResponse, DefaultError, Options<BillingControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<BillingControllerRemoveResponse, DefaultError, Options<BillingControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await billingControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const billingControllerFindOneQueryKey = (options: Options<BillingControllerFindOneData>) => createQueryKey('billingControllerFindOne', options);

export const billingControllerFindOneOptions = (options: Options<BillingControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await billingControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: billingControllerFindOneQueryKey(options)
    });
};

export const billingControllerUpdateMutation = (options?: Partial<Options<BillingControllerUpdateData>>): UseMutationOptions<BillingControllerUpdateResponse, DefaultError, Options<BillingControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<BillingControllerUpdateResponse, DefaultError, Options<BillingControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await billingControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};