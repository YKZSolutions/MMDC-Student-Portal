// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client as _heyApiClient } from '../client.gen';
import { authControllerGetMetadata, coursesControllerCreate, coursesControllerFindAll, coursesControllerFindOne, coursesControllerRemove, coursesControllerUpdate, type Options, testControllerTestAdmin, testControllerTestStudent, usersControllerCreate, usersControllerFindAll, usersControllerFindOne, usersControllerUpdateOwnUserDetails, usersControllerUpdateUserDetails } from '../sdk.gen';
import type { AuthControllerGetMetadataData, CoursesControllerCreateData, CoursesControllerCreateResponse, CoursesControllerFindAllData, CoursesControllerFindOneData, CoursesControllerRemoveData, CoursesControllerRemoveResponse, CoursesControllerUpdateData, CoursesControllerUpdateResponse, TestControllerTestAdminData, TestControllerTestStudentData, UsersControllerCreateData, UsersControllerCreateError, UsersControllerCreateResponse, UsersControllerFindAllData, UsersControllerFindAllError, UsersControllerFindAllResponse, UsersControllerFindOneData, UsersControllerUpdateOwnUserDetailsData, UsersControllerUpdateOwnUserDetailsError, UsersControllerUpdateOwnUserDetailsResponse, UsersControllerUpdateUserDetailsData, UsersControllerUpdateUserDetailsError, UsersControllerUpdateUserDetailsResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const usersControllerFindAllQueryKey = (options?: Options<UsersControllerFindAllData>) => createQueryKey('usersControllerFindAll', options);

/**
 * Retrieves a paginated list of users based on the provided filter parameters.
 *
 * - **Access:** Requires `ADMIN` role.
 * - **Filtering & Pagination:** Uses the `FilterUserDto` to define query parameters such as search terms, sorting, and page size.
 */
export const usersControllerFindAllOptions = (options?: Options<UsersControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindAllQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const usersControllerFindAllInfiniteQueryKey = (options?: Options<UsersControllerFindAllData>): QueryKey<Options<UsersControllerFindAllData>> => createQueryKey('usersControllerFindAll', options, true);

/**
 * Retrieves a paginated list of users based on the provided filter parameters.
 *
 * - **Access:** Requires `ADMIN` role.
 * - **Filtering & Pagination:** Uses the `FilterUserDto` to define query parameters such as search terms, sorting, and page size.
 */
export const usersControllerFindAllInfiniteOptions = (options?: Options<UsersControllerFindAllData>) => {
    return infiniteQueryOptions<UsersControllerFindAllResponse, UsersControllerFindAllError, InfiniteData<UsersControllerFindAllResponse>, QueryKey<Options<UsersControllerFindAllData>>, number | Pick<QueryKey<Options<UsersControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<UsersControllerFindAllData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await usersControllerFindAll({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindAllInfiniteQueryKey(options)
    });
};

export const usersControllerCreateQueryKey = (options: Options<UsersControllerCreateData>) => createQueryKey('usersControllerCreate', options);

/**
 * Create a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerCreateOptions = (options: Options<UsersControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerCreateQueryKey(options)
    });
};

/**
 * Create a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerCreateMutation = (options?: Partial<Options<UsersControllerCreateData>>): UseMutationOptions<UsersControllerCreateResponse, UsersControllerCreateError, Options<UsersControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerCreateResponse, UsersControllerCreateError, Options<UsersControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update personal details
 * This operation updates the user details in the database
 */
export const usersControllerUpdateOwnUserDetailsMutation = (options?: Partial<Options<UsersControllerUpdateOwnUserDetailsData>>): UseMutationOptions<UsersControllerUpdateOwnUserDetailsResponse, UsersControllerUpdateOwnUserDetailsError, Options<UsersControllerUpdateOwnUserDetailsData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateOwnUserDetailsResponse, UsersControllerUpdateOwnUserDetailsError, Options<UsersControllerUpdateOwnUserDetailsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerUpdateOwnUserDetails({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const usersControllerFindOneQueryKey = (options?: Options<UsersControllerFindOneData>) => createQueryKey('usersControllerFindOne', options);

/**
 * Retrieves a specific user by their unique identifier.
 *
 * - **Validation:** Ensures the provided `id` is a valid identifier format.
 * - **Not Found Handling:** Throws an error if no matching user is found.
 */
export const usersControllerFindOneOptions = (options?: Options<UsersControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await usersControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersControllerFindOneQueryKey(options)
    });
};

/**
 * Update user details (Admin only)
 * This operation updates the user details in the database
 */
export const usersControllerUpdateUserDetailsMutation = (options?: Partial<Options<UsersControllerUpdateUserDetailsData>>): UseMutationOptions<UsersControllerUpdateUserDetailsResponse, UsersControllerUpdateUserDetailsError, Options<UsersControllerUpdateUserDetailsData>> => {
    const mutationOptions: UseMutationOptions<UsersControllerUpdateUserDetailsResponse, UsersControllerUpdateUserDetailsError, Options<UsersControllerUpdateUserDetailsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await usersControllerUpdateUserDetails({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const coursesControllerFindAllQueryKey = (options?: Options<CoursesControllerFindAllData>) => createQueryKey('coursesControllerFindAll', options);

export const coursesControllerFindAllOptions = (options?: Options<CoursesControllerFindAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await coursesControllerFindAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: coursesControllerFindAllQueryKey(options)
    });
};

export const coursesControllerCreateQueryKey = (options: Options<CoursesControllerCreateData>) => createQueryKey('coursesControllerCreate', options);

export const coursesControllerCreateOptions = (options: Options<CoursesControllerCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await coursesControllerCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: coursesControllerCreateQueryKey(options)
    });
};

export const coursesControllerCreateMutation = (options?: Partial<Options<CoursesControllerCreateData>>): UseMutationOptions<CoursesControllerCreateResponse, DefaultError, Options<CoursesControllerCreateData>> => {
    const mutationOptions: UseMutationOptions<CoursesControllerCreateResponse, DefaultError, Options<CoursesControllerCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await coursesControllerCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const coursesControllerRemoveMutation = (options?: Partial<Options<CoursesControllerRemoveData>>): UseMutationOptions<CoursesControllerRemoveResponse, DefaultError, Options<CoursesControllerRemoveData>> => {
    const mutationOptions: UseMutationOptions<CoursesControllerRemoveResponse, DefaultError, Options<CoursesControllerRemoveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await coursesControllerRemove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const coursesControllerFindOneQueryKey = (options: Options<CoursesControllerFindOneData>) => createQueryKey('coursesControllerFindOne', options);

export const coursesControllerFindOneOptions = (options: Options<CoursesControllerFindOneData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await coursesControllerFindOne({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: coursesControllerFindOneQueryKey(options)
    });
};

export const coursesControllerUpdateMutation = (options?: Partial<Options<CoursesControllerUpdateData>>): UseMutationOptions<CoursesControllerUpdateResponse, DefaultError, Options<CoursesControllerUpdateData>> => {
    const mutationOptions: UseMutationOptions<CoursesControllerUpdateResponse, DefaultError, Options<CoursesControllerUpdateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await coursesControllerUpdate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const testControllerTestStudentQueryKey = (options?: Options<TestControllerTestStudentData>) => createQueryKey('testControllerTestStudent', options);

export const testControllerTestStudentOptions = (options?: Options<TestControllerTestStudentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await testControllerTestStudent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testControllerTestStudentQueryKey(options)
    });
};

export const testControllerTestAdminQueryKey = (options?: Options<TestControllerTestAdminData>) => createQueryKey('testControllerTestAdmin', options);

export const testControllerTestAdminOptions = (options?: Options<TestControllerTestAdminData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await testControllerTestAdmin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testControllerTestAdminQueryKey(options)
    });
};

export const authControllerGetMetadataQueryKey = (options: Options<AuthControllerGetMetadataData>) => createQueryKey('authControllerGetMetadata', options);

export const authControllerGetMetadataOptions = (options: Options<AuthControllerGetMetadataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await authControllerGetMetadata({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: authControllerGetMetadataQueryKey(options)
    });
};