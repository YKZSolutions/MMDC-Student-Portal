// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { TestControllerTestStudentData, TestControllerTestStudentResponses, TestControllerTestAdminData, TestControllerTestAdminResponses, TestControllerTestData, TestControllerTestResponses, UsersControllerFindAllData, UsersControllerFindAllResponses, UsersControllerFindAllErrors, UsersControllerCreateData, UsersControllerCreateResponses, UsersControllerCreateErrors, UsersControllerCreateStudentData, UsersControllerCreateStudentResponses, UsersControllerCreateStudentErrors, UsersControllerCreateStaffData, UsersControllerCreateStaffResponses, UsersControllerCreateStaffErrors, UsersControllerInviteUserData, UsersControllerInviteUserResponses, UsersControllerInviteUserErrors, UsersControllerGetMeData, UsersControllerGetMeResponses, UsersControllerGetMeErrors, UsersControllerUpdateOwnUserDetailsData, UsersControllerUpdateOwnUserDetailsResponses, UsersControllerUpdateOwnUserDetailsErrors, UsersControllerUpdateUserStudentDetailsData, UsersControllerUpdateUserStudentDetailsResponses, UsersControllerUpdateUserStudentDetailsErrors, UsersControllerUpdateUserStaffDetailsData, UsersControllerUpdateUserStaffDetailsResponses, UsersControllerUpdateUserStaffDetailsErrors, UsersControllerRemoveData, UsersControllerRemoveResponses, UsersControllerRemoveErrors, UsersControllerFindOneData, UsersControllerFindOneResponses, UsersControllerFindOneErrors, UsersControllerUpdateUserStatusData, UsersControllerUpdateUserStatusResponses, UsersControllerUpdateUserStatusErrors, CoursesControllerFindAllData, CoursesControllerFindAllResponses, CoursesControllerFindAllErrors, CoursesControllerCreateData, CoursesControllerCreateResponses, CoursesControllerCreateErrors, CoursesControllerRemoveData, CoursesControllerRemoveResponses, CoursesControllerRemoveErrors, CoursesControllerFindOneData, CoursesControllerFindOneResponses, CoursesControllerFindOneErrors, CoursesControllerUpdateData, CoursesControllerUpdateResponses, CoursesControllerUpdateErrors, LmsControllerFindAllForStudentData, LmsControllerFindAllForStudentResponses, LmsControllerFindAllForStudentErrors, LmsControllerFindAllForMentorData, LmsControllerFindAllForMentorResponses, LmsControllerFindAllForMentorErrors, LmsControllerFindAllForAdminData, LmsControllerFindAllForAdminResponses, LmsControllerFindAllForAdminErrors, LmsControllerRemoveData, LmsControllerRemoveResponses, LmsControllerRemoveErrors, LmsControllerFindOneData, LmsControllerFindOneResponses, LmsControllerFindOneErrors, LmsControllerUpdateData, LmsControllerUpdateResponses, LmsControllerUpdateErrors, LmsControllerPublishData, LmsControllerPublishResponses, LmsControllerPublishErrors, LmsControllerUnpublishData, LmsControllerUnpublishResponses, LmsControllerUnpublishErrors, LmsControllerFindTodosData, LmsControllerFindTodosResponses, LmsControllerFindTodosErrors, LmsControllerFindModuleTreeData, LmsControllerFindModuleTreeResponses, LmsControllerFindModuleTreeErrors, LmsSectionControllerFindAllModuleSectionsData, LmsSectionControllerFindAllModuleSectionsResponses, LmsSectionControllerFindAllModuleSectionsErrors, LmsSectionControllerCreateData, LmsSectionControllerCreateResponses, LmsSectionControllerCreateErrors, LmsSectionControllerRemoveData, LmsSectionControllerRemoveResponses, LmsSectionControllerRemoveErrors, LmsSectionControllerFindOneData, LmsSectionControllerFindOneResponses, LmsSectionControllerFindOneErrors, LmsSectionControllerUpdateData, LmsSectionControllerUpdateResponses, LmsSectionControllerUpdateErrors, LmsSectionControllerPublishSectionData, LmsSectionControllerPublishSectionResponses, LmsSectionControllerPublishSectionErrors, LmsSectionControllerUnpublishSectionData, LmsSectionControllerUnpublishSectionResponses, LmsSectionControllerUnpublishSectionErrors, LmsContentControllerFindAllData, LmsContentControllerFindAllResponses, LmsContentControllerFindAllErrors, LmsContentControllerCreateData, LmsContentControllerCreateResponses, LmsContentControllerCreateErrors, LmsContentControllerRemoveData, LmsContentControllerRemoveResponses, LmsContentControllerRemoveErrors, LmsContentControllerFindOneData, LmsContentControllerFindOneResponses, LmsContentControllerFindOneErrors, LmsContentControllerUpdateData, LmsContentControllerUpdateResponses, LmsContentControllerUpdateErrors, LmsContentControllerPublishData, LmsContentControllerPublishResponses, LmsContentControllerPublishErrors, LmsContentControllerUnpublishData, LmsContentControllerUnpublishResponses, LmsContentControllerUnpublishErrors, LmsContentControllerFindAllContentProgressData, LmsContentControllerFindAllContentProgressResponses, LmsContentControllerFindAllContentProgressErrors, LmsContentControllerCreateContentProgressData, LmsContentControllerCreateContentProgressResponses, LmsContentControllerCreateContentProgressErrors, GroupControllerFindAllData, GroupControllerFindAllResponses, GroupControllerFindAllErrors, GroupControllerCreateData, GroupControllerCreateResponses, GroupControllerCreateErrors, GroupControllerRemoveData, GroupControllerRemoveResponses, GroupControllerRemoveErrors, GroupControllerUpdateData, GroupControllerUpdateResponses, GroupControllerUpdateErrors, AuthControllerGetMetadataData, AuthControllerGetMetadataResponses, AuthControllerGetMetadataErrors, AuthControllerLoginData, AuthControllerLoginResponses, AuthControllerLoginErrors, BillingControllerFindAllData, BillingControllerFindAllResponses, BillingControllerFindAllErrors, BillingControllerCreateData, BillingControllerCreateResponses, BillingControllerCreateErrors, BillingControllerRemoveData, BillingControllerRemoveResponses, BillingControllerRemoveErrors, BillingControllerFindOneData, BillingControllerFindOneResponses, BillingControllerFindOneErrors, BillingControllerUpdateData, BillingControllerUpdateResponses, BillingControllerUpdateErrors, InstallmentControllerFindAllData, InstallmentControllerFindAllResponses, InstallmentControllerFindAllErrors, InstallmentControllerFindOneData, InstallmentControllerFindOneResponses, InstallmentControllerFindOneErrors, PaymentsControllerPayData, PaymentsControllerPayResponses, PaymentsControllerPayErrors, PaymentsControllerFindAllData, PaymentsControllerFindAllResponses, PaymentsControllerFindAllErrors, PaymentsControllerCreateData, PaymentsControllerCreateResponses, PaymentsControllerCreateErrors, PaymentsControllerRemoveData, PaymentsControllerRemoveResponses, PaymentsControllerRemoveErrors, PaymentsControllerFindOneData, PaymentsControllerFindOneResponses, PaymentsControllerFindOneErrors, PaymentsControllerUpdateData, PaymentsControllerUpdateResponses, PaymentsControllerUpdateErrors, NotificationsControllerSubscribeData, NotificationsControllerSubscribeResponses, NotificationsControllerGetCountData, NotificationsControllerGetCountResponses, NotificationsControllerFindAllData, NotificationsControllerFindAllResponses, NotificationsControllerFindOneData, NotificationsControllerFindOneResponses, NotificationsControllerMarkAsReadData, NotificationsControllerMarkAsReadResponses, NotificationsControllerMarkAllAsReadData, NotificationsControllerMarkAllAsReadResponses, ProgramControllerFindAllData, ProgramControllerFindAllResponses, ProgramControllerFindAllErrors, ProgramControllerCreateData, ProgramControllerCreateResponses, ProgramControllerCreateErrors, ProgramControllerFindAllMajorsData, ProgramControllerFindAllMajorsResponses, ProgramControllerFindAllMajorsErrors, ProgramControllerRemoveData, ProgramControllerRemoveResponses, ProgramControllerRemoveErrors, ProgramControllerFindOneData, ProgramControllerFindOneResponses, ProgramControllerFindOneErrors, ProgramControllerUpdateData, ProgramControllerUpdateResponses, ProgramControllerUpdateErrors, ChatbotControllerPromptData, ChatbotControllerPromptResponses, ChatbotControllerPromptErrors, EnrollmentControllerFindAllEnrollmentsData, EnrollmentControllerFindAllEnrollmentsResponses, EnrollmentControllerFindAllEnrollmentsErrors, EnrollmentControllerCreateEnrollmentData, EnrollmentControllerCreateEnrollmentResponses, EnrollmentControllerCreateEnrollmentErrors, EnrollmentControllerFindActiveEnrollmentData, EnrollmentControllerFindActiveEnrollmentResponses, EnrollmentControllerFindActiveEnrollmentErrors, EnrollmentControllerRemoveEnrollmentData, EnrollmentControllerRemoveEnrollmentResponses, EnrollmentControllerRemoveEnrollmentErrors, EnrollmentControllerFindOneEnrollmentData, EnrollmentControllerFindOneEnrollmentResponses, EnrollmentControllerFindOneEnrollmentErrors, EnrollmentControllerUpdateEnrollmentData, EnrollmentControllerUpdateEnrollmentResponses, EnrollmentControllerUpdateEnrollmentErrors, EnrollmentControllerUpdateEnrollmentStatusData, EnrollmentControllerUpdateEnrollmentStatusResponses, EnrollmentControllerUpdateEnrollmentStatusErrors, CourseOfferingControllerFindCourseOfferingsByPeriodData, CourseOfferingControllerFindCourseOfferingsByPeriodResponses, CourseOfferingControllerCreateCourseOfferingData, CourseOfferingControllerCreateCourseOfferingResponses, CourseOfferingControllerCreateCourseOfferingErrors, CourseOfferingControllerCreateCourseOfferingsByCurriculumIdData, CourseOfferingControllerCreateCourseOfferingsByCurriculumIdResponses, CourseOfferingControllerCreateCourseOfferingsByCurriculumIdErrors, CourseOfferingControllerRemoveCourseOfferingData, CourseOfferingControllerRemoveCourseOfferingResponses, CourseOfferingControllerRemoveCourseOfferingErrors, CourseOfferingControllerFindOneCourseOfferingData, CourseOfferingControllerFindOneCourseOfferingResponses, CourseOfferingControllerFindOneCourseOfferingErrors, CourseSectionControllerFindAllCourseSectionsData, CourseSectionControllerFindAllCourseSectionsResponses, CourseSectionControllerFindAllCourseSectionsErrors, CourseSectionControllerFindAllCourseSectionsForOfferingData, CourseSectionControllerFindAllCourseSectionsForOfferingResponses, CourseSectionControllerFindAllCourseSectionsForOfferingErrors, CourseSectionControllerCreateCourseSectionData, CourseSectionControllerCreateCourseSectionResponses, CourseSectionControllerCreateCourseSectionErrors, CourseSectionControllerRemoveCourseSectionData, CourseSectionControllerRemoveCourseSectionResponses, CourseSectionControllerRemoveCourseSectionErrors, CourseSectionControllerFindOneCourseSectionData, CourseSectionControllerFindOneCourseSectionResponses, CourseSectionControllerFindOneCourseSectionErrors, CourseSectionControllerUpdateCourseSectionData, CourseSectionControllerUpdateCourseSectionResponses, CourseSectionControllerUpdateCourseSectionErrors, CourseSectionControllerFindOneCourseSectionByIdData, CourseSectionControllerFindOneCourseSectionByIdResponses, CourseSectionControllerFindOneCourseSectionByIdErrors, CourseEnrollmentControllerGetCourseEnrollmentsData, CourseEnrollmentControllerGetCourseEnrollmentsResponses, CourseEnrollmentControllerGetCourseEnrollmentsErrors, CourseEnrollmentControllerDropCourseEnrollmentData, CourseEnrollmentControllerDropCourseEnrollmentResponses, CourseEnrollmentControllerDropCourseEnrollmentErrors, CourseEnrollmentControllerCreateCourseEnrollmentData, CourseEnrollmentControllerCreateCourseEnrollmentResponses, CourseEnrollmentControllerCreateCourseEnrollmentErrors, CourseEnrollmentControllerFinalizeCourseEnrollmentData, CourseEnrollmentControllerFinalizeCourseEnrollmentResponses, CourseEnrollmentControllerFinalizeCourseEnrollmentErrors, MajorControllerFindAllData, MajorControllerFindAllResponses, MajorControllerFindAllErrors, MajorControllerCreateData, MajorControllerCreateResponses, MajorControllerCreateErrors, MajorControllerRemoveData, MajorControllerRemoveResponses, MajorControllerRemoveErrors, MajorControllerFindOneData, MajorControllerFindOneResponses, MajorControllerFindOneErrors, MajorControllerUpdateData, MajorControllerUpdateResponses, MajorControllerUpdateErrors, CurriculumControllerFindAllData, CurriculumControllerFindAllResponses, CurriculumControllerFindAllErrors, CurriculumControllerCreateData, CurriculumControllerCreateResponses, CurriculumControllerCreateErrors, CurriculumControllerRemoveData, CurriculumControllerRemoveResponses, CurriculumControllerRemoveErrors, CurriculumControllerFindOneData, CurriculumControllerFindOneResponses, CurriculumControllerFindOneErrors, CurriculumControllerUpdateData, CurriculumControllerUpdateResponses, CurriculumControllerUpdateErrors, SwaggerControllerDownloadAllSpecsData, SwaggerControllerDownloadAllSpecsResponses, PricingControllerFindAllData, PricingControllerFindAllResponses, PricingControllerFindAllErrors, PricingControllerCreateData, PricingControllerCreateResponses, PricingControllerCreateErrors, PricingControllerRemoveData, PricingControllerRemoveResponses, PricingControllerRemoveErrors, PricingControllerFindOneData, PricingControllerFindOneResponses, PricingControllerFindOneErrors, PricingControllerUpdateData, PricingControllerUpdateResponses, PricingControllerUpdateErrors, PricingGroupControllerFindAllData, PricingGroupControllerFindAllResponses, PricingGroupControllerFindAllErrors, PricingGroupControllerCreateData, PricingGroupControllerCreateResponses, PricingGroupControllerCreateErrors, PricingGroupControllerRemoveData, PricingGroupControllerRemoveResponses, PricingGroupControllerRemoveErrors, PricingGroupControllerFindOneData, PricingGroupControllerFindOneResponses, PricingGroupControllerFindOneErrors, PricingGroupControllerUpdateData, PricingGroupControllerUpdateResponses, PricingGroupControllerUpdateErrors, AppointmentsControllerFindAllData, AppointmentsControllerFindAllResponses, AppointmentsControllerFindAllErrors, AppointmentsControllerCreateData, AppointmentsControllerCreateResponses, AppointmentsControllerCreateErrors, AppointmentsControllerFindMentorData, AppointmentsControllerFindMentorResponses, AppointmentsControllerFindCoursesData, AppointmentsControllerFindCoursesResponses, AppointmentsControllerFindAllBookedData, AppointmentsControllerFindAllBookedResponses, AppointmentsControllerFindAllBookedErrors, AppointmentsControllerRemoveData, AppointmentsControllerRemoveResponses, AppointmentsControllerRemoveErrors, AppointmentsControllerFindOneData, AppointmentsControllerFindOneResponses, AppointmentsControllerFindOneErrors, AppointmentsControllerUpdateDetailsData, AppointmentsControllerUpdateDetailsResponses, AppointmentsControllerUpdateDetailsErrors, AppointmentsControllerUpdateStatusData, AppointmentsControllerUpdateStatusResponses, AppointmentsControllerUpdateStatusErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const testControllerTestStudent = <ThrowOnError extends boolean = false>(options?: Options<TestControllerTestStudentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestControllerTestStudentResponses, unknown, ThrowOnError>({
        url: '/test/student',
        ...options
    });
};

export const testControllerTestAdmin = <ThrowOnError extends boolean = false>(options?: Options<TestControllerTestAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestControllerTestAdminResponses, unknown, ThrowOnError>({
        url: '/test/admin',
        ...options
    });
};

/**
 * Logging Test
 * Test the logging & prisma error handling functionality
 */
export const testControllerTest = <ThrowOnError extends boolean = false>(options: Options<TestControllerTestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestControllerTestResponses, unknown, ThrowOnError>({
        url: '/test/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get users
 * Retrieves a paginated list of users based on the provided filter parameters.
 * - **Access: ** Requires `ADMIN` role.
 * - **Filtering & Pagination: ** Uses the `FilterUserDto` to define query parameters such as search terms, sorting, and page size.
 */
export const usersControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerFindAllResponses, UsersControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerCreate = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerCreateResponses, UsersControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new student user
 * This operation creates both a user and a supabase auth account.
 * It also has additional properties for student-specific details.
 */
export const usersControllerCreateStudent = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerCreateStudentResponses, UsersControllerCreateStudentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/student',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new staff user
 * This operation creates both a user and a supabase auth account.
 * It also has additional properties for staff-specific details.
 */
export const usersControllerCreateStaff = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateStaffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerCreateStaffResponses, UsersControllerCreateStaffErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/staff',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Invite a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerInviteUser = <ThrowOnError extends boolean = false>(options: Options<UsersControllerInviteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerInviteUserResponses, UsersControllerInviteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/invite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the currently authenticated user
 * This endpoint returns the full profile of the currently authenticated user.
 * The structure of the returned object depends on the user's role:
 *
 * - `UserStudentDetailsDto` for users with the `student` role
 * - `UserStaffDetailsDto` for users with the `mentor` or `admin` role
 */
export const usersControllerGetMe = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerGetMeResponses, UsersControllerGetMeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Update personal details
 * This operation updates the user details in the database
 */
export const usersControllerUpdateOwnUserDetails = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateOwnUserDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersControllerUpdateOwnUserDetailsResponses, UsersControllerUpdateOwnUserDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update student user details (Admin only)
 * This operation updates the user details in the database.
 * The user should have a student role.
 */
export const usersControllerUpdateUserStudentDetails = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateUserStudentDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersControllerUpdateUserStudentDetailsResponses, UsersControllerUpdateUserStudentDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}/student',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update staff user details (Admin only)
 * This operation updates the user details in the database.
 * The user should have a mentor or admin role.
 */
export const usersControllerUpdateUserStaffDetails = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateUserStaffDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersControllerUpdateUserStaffDetailsResponses, UsersControllerUpdateUserStaffDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}/staff',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a user (soft and hard delete)
 * This endpoint performs either a soft delete or a permanent deletion of a user depending on the current state of the user or the query parameter provided:
 *
 * - If `directDelete` is true, the user is **permanently deleted** without checking if they are already softly deleted.
 * - If `directDelete` is not provided or false:
 * - If the user is not yet softly deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.
 * - If the user is already softly deleted, a **permanent delete** is executed.
 *
 * All the user details and the supabase auth account will be deleted from the cloud on hard delete
 *
 * Use this endpoint to manage user deletion workflows flexibly through a single API.
 */
export const usersControllerRemove = <ThrowOnError extends boolean = false>(options: Options<UsersControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersControllerRemoveResponses, UsersControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by id
 * Retrieves a specific user by their unique identifier.
 * - **Validation: ** Ensures the provided `id` is a valid identifier format.
 * - **Not Found Handling: ** Throws an error if no matching user is found.
 */
export const usersControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<UsersControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersControllerFindOneResponses, UsersControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Updates the status of a user (enable/disable).
 * This endpoint toggles the user's status between active and disabled
 * by updating the `disabledAt` field. The change is also reflected in
 * the authentication provider's metadata.
 */
export const usersControllerUpdateUserStatus = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateUserStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersControllerUpdateUserStatusResponses, UsersControllerUpdateUserStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}/status',
        ...options
    });
};

/**
 * Retrive all courses
 * Retrives a paginated list of courses based on the provided filters.
 * Requires `ADMIN` role.
 */
export const coursesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerFindAllResponses, CoursesControllerFindAllErrors, ThrowOnError>({
        url: '/courses',
        ...options
    });
};

/**
 * Creates a course
 * This operations creates a new course.
 * Requires `ADMIN` role.
 */
export const coursesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerCreateResponses, CoursesControllerCreateErrors, ThrowOnError>({
        url: '/courses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a course
 * This operation permanently deletes a course from the system.
 * Requires `ADMIN` role.
 */
export const coursesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CoursesControllerRemoveResponses, CoursesControllerRemoveErrors, ThrowOnError>({
        url: '/courses/{id}',
        ...options
    });
};

/**
 * Retrieve a specific course by ID
 * Requires `ADMIN` role.
 */
export const coursesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerFindOneResponses, CoursesControllerFindOneErrors, ThrowOnError>({
        url: '/courses/{id}',
        ...options
    });
};

/**
 * Update a course
 * This operation updates the details of an existing course.
 * Requires `ADMIN` role.
 */
export const coursesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CoursesControllerUpdateResponses, CoursesControllerUpdateErrors, ThrowOnError>({
        url: '/courses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve all modules for students
 * Returns a paginated list of modules for the current student user.
 * Only modules from courses the student is enrolled in are included.
 * Requires `STUDENT` role.
 */
export const lmsControllerFindAllForStudent = <ThrowOnError extends boolean = false>(options?: Options<LmsControllerFindAllForStudentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LmsControllerFindAllForStudentResponses, LmsControllerFindAllForStudentErrors, ThrowOnError>({
        url: '/modules/student',
        ...options
    });
};

/**
 * Retrieve all modules for mentors
 * Returns a paginated list of modules for the current mentor user.
 * Only modules from courses the mentor is assigned to are included.
 * Requires `MENTOR` role.
 */
export const lmsControllerFindAllForMentor = <ThrowOnError extends boolean = false>(options?: Options<LmsControllerFindAllForMentorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LmsControllerFindAllForMentorResponses, LmsControllerFindAllForMentorErrors, ThrowOnError>({
        url: '/modules/mentor',
        ...options
    });
};

/**
 * Retrieve all modules for admins
 * Returns a paginated list of all modules across all courses.
 * Requires `ADMIN` role.
 */
export const lmsControllerFindAllForAdmin = <ThrowOnError extends boolean = false>(options?: Options<LmsControllerFindAllForAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LmsControllerFindAllForAdminResponses, LmsControllerFindAllForAdminErrors, ThrowOnError>({
        url: '/modules/admin',
        ...options
    });
};

/**
 * Deletes a module
 * This operation deletes a module from the system.
 * Requires `ADMIN` role.
 */
export const lmsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<LmsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LmsControllerRemoveResponses, LmsControllerRemoveErrors, ThrowOnError>({
        url: '/modules/{id}',
        ...options
    });
};

/**
 * Retrieve a single module by id
 * Response includes the module with its course offering and filtered course sections
 * appropriate for the requesting user. Requires `STUDENT`, `MENTOR`, or `ADMIN` role.
 */
export const lmsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<LmsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LmsControllerFindOneResponses, LmsControllerFindOneErrors, ThrowOnError>({
        url: '/modules/{id}',
        ...options
    });
};

/**
 * Updates a module
 * This operation updates the details of an existing module.
 * Requires `ADMIN` role.
 */
export const lmsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<LmsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LmsControllerUpdateResponses, LmsControllerUpdateErrors, ThrowOnError>({
        url: '/modules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Publishes a module
 * Publishes a module with an optional date.
 * Requires `ADMIN` role.
 */
export const lmsControllerPublish = <ThrowOnError extends boolean = false>(options: Options<LmsControllerPublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LmsControllerPublishResponses, LmsControllerPublishErrors, ThrowOnError>({
        url: '/modules/{id}/publish',
        ...options
    });
};

/**
 * Unpublishes a module
 * Unpublishes a module.
 * Requires `ADMIN` role.
 */
export const lmsControllerUnpublish = <ThrowOnError extends boolean = false>(options: Options<LmsControllerUnpublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LmsControllerUnpublishResponses, LmsControllerUnpublishErrors, ThrowOnError>({
        url: '/modules/{id}/unpublish',
        ...options
    });
};

/**
 * Retrieve multiple todos
 * Requires `STUDENT` role.
 */
export const lmsControllerFindTodos = <ThrowOnError extends boolean = false>(options?: Options<LmsControllerFindTodosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LmsControllerFindTodosResponses, LmsControllerFindTodosErrors, ThrowOnError>({
        url: '/modules/todo',
        ...options
    });
};

/**
 * Get module tree structure
 * Retrieves the complete hierarchical structure of a module including all sections and content items
 */
export const lmsControllerFindModuleTree = <ThrowOnError extends boolean = false>(options: Options<LmsControllerFindModuleTreeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LmsControllerFindModuleTreeResponses, LmsControllerFindModuleTreeErrors, ThrowOnError>({
        url: '/modules/{id}/tree',
        ...options
    });
};

/**
 * Retrieves module sections of the given module id
 */
export const lmsSectionControllerFindAllModuleSections = <ThrowOnError extends boolean = false>(options: Options<LmsSectionControllerFindAllModuleSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LmsSectionControllerFindAllModuleSectionsResponses, LmsSectionControllerFindAllModuleSectionsErrors, ThrowOnError>({
        url: '/modules/{moduleId}/sections',
        ...options
    });
};

/**
 * Creates a new module section
 * Requires `ADMIN` role
 */
export const lmsSectionControllerCreate = <ThrowOnError extends boolean = false>(options: Options<LmsSectionControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LmsSectionControllerCreateResponses, LmsSectionControllerCreateErrors, ThrowOnError>({
        url: '/modules/{moduleId}/sections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a module section
 * Requires `ADMIN` role
 */
export const lmsSectionControllerRemove = <ThrowOnError extends boolean = false>(options: Options<LmsSectionControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LmsSectionControllerRemoveResponses, LmsSectionControllerRemoveErrors, ThrowOnError>({
        url: '/modules/{moduleId}/sections/{moduleSectionId}',
        ...options
    });
};

/**
 * Retrieves a module section by its ID
 */
export const lmsSectionControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<LmsSectionControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LmsSectionControllerFindOneResponses, LmsSectionControllerFindOneErrors, ThrowOnError>({
        url: '/modules/{moduleId}/sections/{moduleSectionId}',
        ...options
    });
};

/**
 * Updates a module section
 * Requires `ADMIN` role
 */
export const lmsSectionControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<LmsSectionControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LmsSectionControllerUpdateResponses, LmsSectionControllerUpdateErrors, ThrowOnError>({
        url: '/modules/{moduleId}/sections/{moduleSectionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Publishes a section
 * Publishes a section with an optional date.
 * Requires `ADMIN` role.
 */
export const lmsSectionControllerPublishSection = <ThrowOnError extends boolean = false>(options: Options<LmsSectionControllerPublishSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LmsSectionControllerPublishSectionResponses, LmsSectionControllerPublishSectionErrors, ThrowOnError>({
        url: '/modules/{moduleId}/sections/{id}/publish',
        ...options
    });
};

/**
 * Unpublishes a section
 * Unpublishes a section.
 * Requires `ADMIN` role.
 */
export const lmsSectionControllerUnpublishSection = <ThrowOnError extends boolean = false>(options: Options<LmsSectionControllerUnpublishSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LmsSectionControllerUnpublishSectionResponses, LmsSectionControllerUnpublishSectionErrors, ThrowOnError>({
        url: '/modules/{moduleId}/sections/{id}/unpublish',
        ...options
    });
};

/**
 * Retrieve multiple module contents based on filters
 */
export const lmsContentControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<LmsContentControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LmsContentControllerFindAllResponses, LmsContentControllerFindAllErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents',
        ...options
    });
};

/**
 * Creates a module content
 * This operation creates a new module content.
 * Requires `ADMIN` role.
 */
export const lmsContentControllerCreate = <ThrowOnError extends boolean = false>(options: Options<LmsContentControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LmsContentControllerCreateResponses, LmsContentControllerCreateErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a module content
 * This operation deletes a module content from the system.
 * Requires `ADMIN` role.
 */
export const lmsContentControllerRemove = <ThrowOnError extends boolean = false>(options: Options<LmsContentControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LmsContentControllerRemoveResponses, LmsContentControllerRemoveErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents/{moduleContentId}',
        ...options
    });
};

/**
 * Retrieve a specific module content by ID
 * Requires `ADMIN` or `MENTOR` role.
 */
export const lmsContentControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<LmsContentControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LmsContentControllerFindOneResponses, LmsContentControllerFindOneErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents/{moduleContentId}',
        ...options
    });
};

/**
 * Update a module content
 * This operation updates the details of an existing module content.
 * Requires `ADMIN` role.
 */
export const lmsContentControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<LmsContentControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LmsContentControllerUpdateResponses, LmsContentControllerUpdateErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents/{moduleContentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Publish a module content
 * This operation publishes a module content.
 * Requires `ADMIN` role.
 */
export const lmsContentControllerPublish = <ThrowOnError extends boolean = false>(options: Options<LmsContentControllerPublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LmsContentControllerPublishResponses, LmsContentControllerPublishErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents/{moduleContentId}/publish',
        ...options
    });
};

/**
 * Unpublish a module content
 * This operation unpublishes a module content
 * Requires `ADMIN` role.
 */
export const lmsContentControllerUnpublish = <ThrowOnError extends boolean = false>(options: Options<LmsContentControllerUnpublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LmsContentControllerUnpublishResponses, LmsContentControllerUnpublishErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents/{moduleContentId}/unpublish',
        ...options
    });
};

/**
 * Retrieves all content progress records for a specific module and user.
 * - Mentors can fetch progress for a specific student (provide `studentId` query param).
 * - Students can fetch their own progress.
 */
export const lmsContentControllerFindAllContentProgress = <ThrowOnError extends boolean = false>(options: Options<LmsContentControllerFindAllContentProgressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LmsContentControllerFindAllContentProgressResponses, LmsContentControllerFindAllContentProgressErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents/{moduleContentId}/progress',
        ...options
    });
};

/**
 * Creates or updates a content progress
 * Requires `STUDENT` role
 */
export const lmsContentControllerCreateContentProgress = <ThrowOnError extends boolean = false>(options: Options<LmsContentControllerCreateContentProgressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LmsContentControllerCreateContentProgressResponses, LmsContentControllerCreateContentProgressErrors, ThrowOnError>({
        url: '/modules/{moduleId}/contents/{moduleContentId}/progress',
        ...options
    });
};

/**
 * Retrieves groups of the given module id
 * Requires `ADMIN` or `MENTOR` role
 */
export const groupControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<GroupControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GroupControllerFindAllResponses, GroupControllerFindAllErrors, ThrowOnError>({
        url: '/modules/{moduleId}/groups',
        ...options
    });
};

/**
 * Creates a new group
 * Requires `ADMIN` or `MENTOR` role
 */
export const groupControllerCreate = <ThrowOnError extends boolean = false>(options: Options<GroupControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupControllerCreateResponses, GroupControllerCreateErrors, ThrowOnError>({
        url: '/modules/{moduleId}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a group
 * Requires `ADMIN` or `MENTOR` role
 */
export const groupControllerRemove = <ThrowOnError extends boolean = false>(options: Options<GroupControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupControllerRemoveResponses, GroupControllerRemoveErrors, ThrowOnError>({
        url: '/modules/{moduleId}/groups/{id}',
        ...options
    });
};

/**
 * Updates a group
 * Requires `ADMIN` or `MENTOR` role
 */
export const groupControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<GroupControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GroupControllerUpdateResponses, GroupControllerUpdateErrors, ThrowOnError>({
        url: '/modules/{moduleId}/groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Account Metadata
 * Retrieves the supabase auth account's metadata based on the uid given
 */
export const authControllerGetMetadata = <ThrowOnError extends boolean = false>(options: Options<AuthControllerGetMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuthControllerGetMetadataResponses, AuthControllerGetMetadataErrors, ThrowOnError>({
        url: '/auth/{uid}/metadata',
        ...options
    });
};

/**
 * Login Account
 * Login via email & password
 */
export const authControllerLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerLoginResponses, AuthControllerLoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch bills
 * Fetch bills with the option to filter and sort them.
 * Contents of the returned list will depend on the user and their role.
 * Returns a paginated response.
 */
export const billingControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<BillingControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BillingControllerFindAllResponses, BillingControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/billing',
        ...options
    });
};

/**
 * Create a new bill
 * Creates a new bill item and can optionally attach a user
 */
export const billingControllerCreate = <ThrowOnError extends boolean = false>(options: Options<BillingControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BillingControllerCreateResponses, BillingControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/billing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a bill (temporary or permanent)
 * This endpoint performs either a soft delete or a permanent deletion of a bill depending on the current state of the nill or the query parameter provided:
 *
 * - If `directDelete` is true, the bill is **permanently deleted** without checking if they are already softly deleted.
 * - If `directDelete` is not provided or false:
 * - If the bill is not yet softly deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.
 * - If the bill is already softly deleted, a **permanent delete** is executed.
 */
export const billingControllerRemove = <ThrowOnError extends boolean = false>(options: Options<BillingControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BillingControllerRemoveResponses, BillingControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/billing/{id}',
        ...options
    });
};

/**
 * Fetch a single bill
 * If the user is not an admin, they are only limited to querying their own bills.
 */
export const billingControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<BillingControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BillingControllerFindOneResponses, BillingControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/billing/{id}',
        ...options
    });
};

/**
 * Update bill data
 * Change the bill's details
 */
export const billingControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<BillingControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BillingControllerUpdateResponses, BillingControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/billing/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch installments
 * Fetch installments ordered by descending createdAt date
 * Contents of the returned list will depend on the user and their role.
 * Returns a paginated response.
 */
export const installmentControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<InstallmentControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InstallmentControllerFindAllResponses, InstallmentControllerFindAllErrors, ThrowOnError>({
        url: '/billing/{billId}/installments',
        ...options
    });
};

/**
 * Fetch a single installment
 * If the user is not an admin, they are only limited to querying their own installments.
 */
export const installmentControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<InstallmentControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InstallmentControllerFindOneResponses, InstallmentControllerFindOneErrors, ThrowOnError>({
        url: '/billing/{billId}/installments/{id}',
        ...options
    });
};

/**
 * Initiate paymongo payment intent
 * Handles the payment intent and payment gateway redirect of paymongo
 */
export const paymentsControllerPay = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerPayData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsControllerPayResponses, PaymentsControllerPayErrors, ThrowOnError>({
        url: '/billing/{billId}/payments/pay',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch payments
 * Fetch payments ordered by descending payment date
 * Contents of the returned list will depend on the user and their role.
 * Returns a paginated response.
 */
export const paymentsControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PaymentsControllerFindAllResponses, PaymentsControllerFindAllErrors, ThrowOnError>({
        url: '/billing/{billId}/payments',
        ...options
    });
};

/**
 * Create a new payment
 * Creates a new payment item
 */
export const paymentsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsControllerCreateResponses, PaymentsControllerCreateErrors, ThrowOnError>({
        url: '/billing/{billId}/payments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a payment (temporary or permanent)
 * This endpoint performs either a soft delete or a permanent deletion of a payment depending on the current state of the nill or the query parameter provided:
 *
 * - If `directDelete` is true, the payment is **permanently deleted** without checking if they are already softly deleted.
 * - If `directDelete` is not provided or false:
 * - If the payment is not yet softly deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.
 * - If the payment is already softly deleted, a **permanent delete** is executed.
 */
export const paymentsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PaymentsControllerRemoveResponses, PaymentsControllerRemoveErrors, ThrowOnError>({
        url: '/billing/{billId}/payments/{id}',
        ...options
    });
};

/**
 * Fetch a single payment
 * If the user is not an admin, they are only limited to querying their own payments.
 */
export const paymentsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PaymentsControllerFindOneResponses, PaymentsControllerFindOneErrors, ThrowOnError>({
        url: '/billing/{billId}/payments/{id}',
        ...options
    });
};

/**
 * Update payment data
 * Change the payment's details
 */
export const paymentsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PaymentsControllerUpdateResponses, PaymentsControllerUpdateErrors, ThrowOnError>({
        url: '/billing/{billId}/payments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Subscribe to server-sent notifications
 * This endpoint provides a real-time stream of notifications for the authenticated user via Server-Sent Events (SSE).
 */
export const notificationsControllerSubscribe = <ThrowOnError extends boolean = false>(options?: Options<NotificationsControllerSubscribeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotificationsControllerSubscribeResponses, unknown, ThrowOnError>({
        url: '/notifications/subscribe',
        ...options
    });
};

/**
 * Get notification counts
 * This operation returns the total, read, and unread notification counts for the authenticated user.
 */
export const notificationsControllerGetCount = <ThrowOnError extends boolean = false>(options?: Options<NotificationsControllerGetCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotificationsControllerGetCountResponses, unknown, ThrowOnError>({
        url: '/notifications/count',
        ...options
    });
};

/**
 * Fetch notifications
 * This operation retrieves a paginated list of notifications for the authenticated user, with optional filtering.
 */
export const notificationsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<NotificationsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotificationsControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/notifications',
        ...options
    });
};

/**
 * Fetch a single notification
 * This operation retrieves a specific notification by its ID, ensuring it is accessible to the authenticated user.
 */
export const notificationsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<NotificationsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotificationsControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/notifications/{id}',
        ...options
    });
};

/**
 * Mark notifications as read
 * This operation marks a list of specified notifications as read for the authenticated user.
 */
export const notificationsControllerMarkAsRead = <ThrowOnError extends boolean = false>(options: Options<NotificationsControllerMarkAsReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NotificationsControllerMarkAsReadResponses, unknown, ThrowOnError>({
        url: '/notifications/mark-read',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mark all notifications as read
 * This operation marks all notifications as read for the authenticated user.
 */
export const notificationsControllerMarkAllAsRead = <ThrowOnError extends boolean = false>(options?: Options<NotificationsControllerMarkAllAsReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<NotificationsControllerMarkAllAsReadResponses, unknown, ThrowOnError>({
        url: '/notifications/mark-read/all',
        ...options
    });
};

/**
 * Retrieve all programs
 * Retrieves a paginated list of programs based on the provided filters.
 * Requires `ADMIN` role.
 */
export const programControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<ProgramControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProgramControllerFindAllResponses, ProgramControllerFindAllErrors, ThrowOnError>({
        url: '/programs',
        ...options
    });
};

/**
 * Create a new program
 * This operation creates a new academic program.
 * Requires `ADMIN` role.
 */
export const programControllerCreate = <ThrowOnError extends boolean = false>(options: Options<ProgramControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProgramControllerCreateResponses, ProgramControllerCreateErrors, ThrowOnError>({
        url: '/programs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrive all majors of a program
 * Retrives a paginated list of majors based on the program id and provided filters.
 * Requires `ADMIN` role.
 */
export const programControllerFindAllMajors = <ThrowOnError extends boolean = false>(options: Options<ProgramControllerFindAllMajorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProgramControllerFindAllMajorsResponses, ProgramControllerFindAllMajorsErrors, ThrowOnError>({
        url: '/programs/{programId}/majors',
        ...options
    });
};

/**
 * Delete a program
 * This operation permanently deletes a program from the system.
 * Requires `ADMIN` role.
 */
export const programControllerRemove = <ThrowOnError extends boolean = false>(options: Options<ProgramControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProgramControllerRemoveResponses, ProgramControllerRemoveErrors, ThrowOnError>({
        url: '/programs/{id}',
        ...options
    });
};

/**
 * Retrieve a specific program by ID
 * Requires `ADMIN` role.
 */
export const programControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<ProgramControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProgramControllerFindOneResponses, ProgramControllerFindOneErrors, ThrowOnError>({
        url: '/programs/{id}',
        ...options
    });
};

/**
 * Update a program
 * This operation updates the details of an existing program.
 * Requires `ADMIN` role.
 */
export const programControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<ProgramControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ProgramControllerUpdateResponses, ProgramControllerUpdateErrors, ThrowOnError>({
        url: '/programs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const chatbotControllerPrompt = <ThrowOnError extends boolean = false>(options: Options<ChatbotControllerPromptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChatbotControllerPromptResponses, ChatbotControllerPromptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/chatbot',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all enrollment periods
 * Fetches a paginated list of enrollment periods.
 * Requires `ADMIN` role.
 */
export const enrollmentControllerFindAllEnrollments = <ThrowOnError extends boolean = false>(options?: Options<EnrollmentControllerFindAllEnrollmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EnrollmentControllerFindAllEnrollmentsResponses, EnrollmentControllerFindAllEnrollmentsErrors, ThrowOnError>({
        url: '/enrollments',
        ...options
    });
};

/**
 * Creates a new enrollment period
 * This operation creates a new enrollment period for managing course registrations.
 * Requires `ADMIN` role.
 */
export const enrollmentControllerCreateEnrollment = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerCreateEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnrollmentControllerCreateEnrollmentResponses, EnrollmentControllerCreateEnrollmentErrors, ThrowOnError>({
        url: '/enrollments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the currently active enrollment period
 * Requires `ADMIN` or `STUDENT` roles.
 */
export const enrollmentControllerFindActiveEnrollment = <ThrowOnError extends boolean = false>(options?: Options<EnrollmentControllerFindActiveEnrollmentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EnrollmentControllerFindActiveEnrollmentResponses, EnrollmentControllerFindActiveEnrollmentErrors, ThrowOnError>({
        url: '/enrollments/active',
        ...options
    });
};

/**
 * Removes (soft or hard deletes) an enrollment period
 * Requires `ADMIN` role.
 */
export const enrollmentControllerRemoveEnrollment = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerRemoveEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EnrollmentControllerRemoveEnrollmentResponses, EnrollmentControllerRemoveEnrollmentErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}',
        ...options
    });
};

/**
 * Retrieves a specific enrollment period by ID
 * Requires `ADMIN` role.
 */
export const enrollmentControllerFindOneEnrollment = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerFindOneEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EnrollmentControllerFindOneEnrollmentResponses, EnrollmentControllerFindOneEnrollmentErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}',
        ...options
    });
};

/**
 * Updates an enrollment period
 * Requires `ADMIN` role.
 */
export const enrollmentControllerUpdateEnrollment = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerUpdateEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EnrollmentControllerUpdateEnrollmentResponses, EnrollmentControllerUpdateEnrollmentErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates the status of an enrollment period
 * Requires `ADMIN` role.
 */
export const enrollmentControllerUpdateEnrollmentStatus = <ThrowOnError extends boolean = false>(options: Options<EnrollmentControllerUpdateEnrollmentStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EnrollmentControllerUpdateEnrollmentStatusResponses, EnrollmentControllerUpdateEnrollmentStatusErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all course offerings in a specific enrollment period
 * Fetches a paginated list of course offerings for the given period.
 * Requires `ADMIN` or `STUDENT` role.
 */
export const courseOfferingControllerFindCourseOfferingsByPeriod = <ThrowOnError extends boolean = false>(options: Options<CourseOfferingControllerFindCourseOfferingsByPeriodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseOfferingControllerFindCourseOfferingsByPeriodResponses, unknown, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings',
        ...options
    });
};

/**
 * Creates a new course offering under a specific enrollment period
 * Requires `ADMIN` role.
 */
export const courseOfferingControllerCreateCourseOffering = <ThrowOnError extends boolean = false>(options: Options<CourseOfferingControllerCreateCourseOfferingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CourseOfferingControllerCreateCourseOfferingResponses, CourseOfferingControllerCreateCourseOfferingErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates course offerings given a curriculum
 * Requires `ADMIN` role.
 */
export const courseOfferingControllerCreateCourseOfferingsByCurriculumId = <ThrowOnError extends boolean = false>(options: Options<CourseOfferingControllerCreateCourseOfferingsByCurriculumIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CourseOfferingControllerCreateCourseOfferingsByCurriculumIdResponses, CourseOfferingControllerCreateCourseOfferingsByCurriculumIdErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/curriculum',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes a course offering from a specific enrollment period
 * Requires `ADMIN` role.
 */
export const courseOfferingControllerRemoveCourseOffering = <ThrowOnError extends boolean = false>(options: Options<CourseOfferingControllerRemoveCourseOfferingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CourseOfferingControllerRemoveCourseOfferingResponses, CourseOfferingControllerRemoveCourseOfferingErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings/{offeringId}',
        ...options
    });
};

/**
 * Retrieves a specific course offering by ID
 * Requires `ADMIN` role.
 */
export const courseOfferingControllerFindOneCourseOffering = <ThrowOnError extends boolean = false>(options: Options<CourseOfferingControllerFindOneCourseOfferingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseOfferingControllerFindOneCourseOfferingResponses, CourseOfferingControllerFindOneCourseOfferingErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings/{offeringId}',
        ...options
    });
};

/**
 * Retrieves all sections for a specific enrollment period
 * Fetches a paginated list of course sections.
 * Requires `ADMIN` role.
 */
export const courseSectionControllerFindAllCourseSections = <ThrowOnError extends boolean = false>(options: Options<CourseSectionControllerFindAllCourseSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseSectionControllerFindAllCourseSectionsResponses, CourseSectionControllerFindAllCourseSectionsErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/sections',
        ...options
    });
};

/**
 * Retrieves all sections for a specific course offering
 * Fetches a paginated list of course sections.
 * Requires `ADMIN` role.
 */
export const courseSectionControllerFindAllCourseSectionsForOffering = <ThrowOnError extends boolean = false>(options: Options<CourseSectionControllerFindAllCourseSectionsForOfferingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseSectionControllerFindAllCourseSectionsForOfferingResponses, CourseSectionControllerFindAllCourseSectionsForOfferingErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections',
        ...options
    });
};

/**
 * Creates a new course section under a specific course offering
 * Requires `ADMIN` role.
 */
export const courseSectionControllerCreateCourseSection = <ThrowOnError extends boolean = false>(options: Options<CourseSectionControllerCreateCourseSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CourseSectionControllerCreateCourseSectionResponses, CourseSectionControllerCreateCourseSectionErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes a course section from a specific course offering
 * Requires `ADMIN` role.
 */
export const courseSectionControllerRemoveCourseSection = <ThrowOnError extends boolean = false>(options: Options<CourseSectionControllerRemoveCourseSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CourseSectionControllerRemoveCourseSectionResponses, CourseSectionControllerRemoveCourseSectionErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections/{sectionId}',
        ...options
    });
};

/**
 * Retrieves a specific course section under a course offering
 * Requires `ADMIN` role.
 */
export const courseSectionControllerFindOneCourseSection = <ThrowOnError extends boolean = false>(options: Options<CourseSectionControllerFindOneCourseSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseSectionControllerFindOneCourseSectionResponses, CourseSectionControllerFindOneCourseSectionErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections/{sectionId}',
        ...options
    });
};

/**
 * Updates a course section under a specific course offering
 * Requires `ADMIN` role.
 */
export const courseSectionControllerUpdateCourseSection = <ThrowOnError extends boolean = false>(options: Options<CourseSectionControllerUpdateCourseSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CourseSectionControllerUpdateCourseSectionResponses, CourseSectionControllerUpdateCourseSectionErrors, ThrowOnError>({
        url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections/{sectionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieve full course section record by section id (includes course and enrollmentPeriod)
 * Accessible by ADMIN, STUDENT, MENTOR
 */
export const courseSectionControllerFindOneCourseSectionById = <ThrowOnError extends boolean = false>(options: Options<CourseSectionControllerFindOneCourseSectionByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CourseSectionControllerFindOneCourseSectionByIdResponses, CourseSectionControllerFindOneCourseSectionByIdErrors, ThrowOnError>({
        url: '/enrollments/sections/{sectionId}/course',
        ...options
    });
};

/**
 * Retrieve all active (enlisted) course enrollments for the authenticated user.
 * - `STUDENT` will receive their own enlisted enrollments for the active enrollment period.
 * - `ADMIN` may call this endpoint (typically for inspection); use DTO body to scope to another student when supported.
 * - Each returned record includes related course offering, course section and mentor/user data.
 */
export const courseEnrollmentControllerGetCourseEnrollments = <ThrowOnError extends boolean = false>(options?: Options<CourseEnrollmentControllerGetCourseEnrollmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CourseEnrollmentControllerGetCourseEnrollmentsResponses, CourseEnrollmentControllerGetCourseEnrollmentsErrors, ThrowOnError>({
        url: '/enrollment/student/sections',
        ...options
    });
};

/**
 * Drop a student from a course section.
 * - `STUDENT` can only drop themselves.
 * - `ADMIN` can drop on behalf of another student (using `studentId` in body).
 */
export const courseEnrollmentControllerDropCourseEnrollment = <ThrowOnError extends boolean = false>(options: Options<CourseEnrollmentControllerDropCourseEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CourseEnrollmentControllerDropCourseEnrollmentResponses, CourseEnrollmentControllerDropCourseEnrollmentErrors, ThrowOnError>({
        url: '/enrollment/student/sections/{sectionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enroll a student in a course section.
 * - `STUDENT` can only enroll themselves.
 * - `ADMIN` can enroll on behalf of another student (using `studentId` in body).
 */
export const courseEnrollmentControllerCreateCourseEnrollment = <ThrowOnError extends boolean = false>(options: Options<CourseEnrollmentControllerCreateCourseEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CourseEnrollmentControllerCreateCourseEnrollmentResponses, CourseEnrollmentControllerCreateCourseEnrollmentErrors, ThrowOnError>({
        url: '/enrollment/student/sections/{sectionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Finalize all course enrollments for a student.
 * - Sets all enrolled courses for the student to `finalized`.
 * - `STUDENT` can finalize only their own enrollments.
 * - `ADMIN` can finalize for any student by providing `studentId` in the request body.
 */
export const courseEnrollmentControllerFinalizeCourseEnrollment = <ThrowOnError extends boolean = false>(options: Options<CourseEnrollmentControllerFinalizeCourseEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CourseEnrollmentControllerFinalizeCourseEnrollmentResponses, CourseEnrollmentControllerFinalizeCourseEnrollmentErrors, ThrowOnError>({
        url: '/enrollment/student/finalize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrive all majors
 * Retrives a paginated list of majors based on the provided filters.
 * Requires `ADMIN` role.
 */
export const majorControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<MajorControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MajorControllerFindAllResponses, MajorControllerFindAllErrors, ThrowOnError>({
        url: '/majors',
        ...options
    });
};

/**
 * Creates a major.
 * This operation creates a new academic major.
 * Requries `ADMIN` role.
 */
export const majorControllerCreate = <ThrowOnError extends boolean = false>(options: Options<MajorControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MajorControllerCreateResponses, MajorControllerCreateErrors, ThrowOnError>({
        url: '/majors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a major
 * This operation permanently deletes a major from the system.
 * Requires `ADMIN` role.
 */
export const majorControllerRemove = <ThrowOnError extends boolean = false>(options: Options<MajorControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MajorControllerRemoveResponses, MajorControllerRemoveErrors, ThrowOnError>({
        url: '/majors/{id}',
        ...options
    });
};

/**
 * Retrieve a specific major by ID
 * Requires `ADMIN` role.
 */
export const majorControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<MajorControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MajorControllerFindOneResponses, MajorControllerFindOneErrors, ThrowOnError>({
        url: '/majors/{id}',
        ...options
    });
};

/**
 * Update a major
 * This operation updates the details of an existing major.
 * Requires `ADMIN` role.
 */
export const majorControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<MajorControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MajorControllerUpdateResponses, MajorControllerUpdateErrors, ThrowOnError>({
        url: '/majors/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch curriculums
 * Fetches all of the curriculums
 * Returns a list
 */
export const curriculumControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CurriculumControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CurriculumControllerFindAllResponses, CurriculumControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/curriculum',
        ...options
    });
};

/**
 * Create a new curriculum
 * Creates a new curriculum with attached course plan
 */
export const curriculumControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CurriculumControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CurriculumControllerCreateResponses, CurriculumControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/curriculum',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a curriculum (temporary or permanent)
 * This endpoint performs either a soft delete or a permanent deletion of a curriculum depending on the current state of the nill or the query parameter provided:
 *
 * - If `directDelete` is true, the curriculum is **permanently deleted** without checking if they are already softly deleted.
 * - If `directDelete` is not provided or false:
 * - If the curriculum is not yet softly deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.
 * - If the curriculum is already softly deleted, a **permanent delete** is executed.
 */
export const curriculumControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CurriculumControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CurriculumControllerRemoveResponses, CurriculumControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/curriculum/{id}',
        ...options
    });
};

/**
 * Fetch a single curriculum
 * Fetch the curriculum details and the courses attached to it.
 * Can find by id or find by code with a format of (programCode-majorCode)
 */
export const curriculumControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CurriculumControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CurriculumControllerFindOneResponses, CurriculumControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/curriculum/{id}',
        ...options
    });
};

/**
 * Update curriculum
 * Updates an existing curriculum and course plan
 */
export const curriculumControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CurriculumControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CurriculumControllerUpdateResponses, CurriculumControllerUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/curriculum/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const swaggerControllerDownloadAllSpecs = <ThrowOnError extends boolean = false>(options?: Options<SwaggerControllerDownloadAllSpecsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SwaggerControllerDownloadAllSpecsResponses, unknown, ThrowOnError>({
        url: '/swaggy',
        ...options
    });
};

/**
 * Fetch all pricings
 * This operation retrieves a paginated list of all pricing entries.
 */
export const pricingControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<PricingControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PricingControllerFindAllResponses, PricingControllerFindAllErrors, ThrowOnError>({
        url: '/pricing',
        ...options
    });
};

/**
 * Create a new pricing fee
 * This operation creates a new pricing entry in the database.
 */
export const pricingControllerCreate = <ThrowOnError extends boolean = false>(options: Options<PricingControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PricingControllerCreateResponses, PricingControllerCreateErrors, ThrowOnError>({
        url: '/pricing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a pricing (temporary or permanent)
 * This endpoint performs either a **soft delete** or a **permanent deletion** of a pricing.
 * - If `directDelete` is true, the pricing is permanently deleted.
 * - If `directDelete` is not provided or false:
 * - If the pricing has not been soft-deleted yet, it will be soft-deleted by setting the `deletedAt` timestamp.
 * - If the pricing has already been soft-deleted, it will be permanently deleted.
 */
export const pricingControllerRemove = <ThrowOnError extends boolean = false>(options: Options<PricingControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PricingControllerRemoveResponses, PricingControllerRemoveErrors, ThrowOnError>({
        url: '/pricing/{id}',
        ...options
    });
};

/**
 * Fetch a single pricing
 * This operation retrieves a single pricing entry by its id.
 */
export const pricingControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<PricingControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PricingControllerFindOneResponses, PricingControllerFindOneErrors, ThrowOnError>({
        url: '/pricing/{id}',
        ...options
    });
};

/**
 * Update a pricing entry
 * This operation updates the details of a single pricing fee by its ID.
 */
export const pricingControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<PricingControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PricingControllerUpdateResponses, PricingControllerUpdateErrors, ThrowOnError>({
        url: '/pricing/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all pricing groups
 * This operation retrieves a paginated list of all pricing groups.
 */
export const pricingGroupControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<PricingGroupControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PricingGroupControllerFindAllResponses, PricingGroupControllerFindAllErrors, ThrowOnError>({
        url: '/pricing-group',
        ...options
    });
};

/**
 * Create a new pricing group
 * This operation creates a new pricing group and links it to existing pricing entries.
 */
export const pricingGroupControllerCreate = <ThrowOnError extends boolean = false>(options: Options<PricingGroupControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PricingGroupControllerCreateResponses, PricingGroupControllerCreateErrors, ThrowOnError>({
        url: '/pricing-group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a pricing group (temporary or permanent)
 * This endpoint soft or permanently deletes a pricing group based on its `deletedAt` status or a query parameter.
 */
export const pricingGroupControllerRemove = <ThrowOnError extends boolean = false>(options: Options<PricingGroupControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PricingGroupControllerRemoveResponses, PricingGroupControllerRemoveErrors, ThrowOnError>({
        url: '/pricing-group/{id}',
        ...options
    });
};

/**
 * Fetch a single pricing group
 * This operation retrieves a single pricing group by its ID, including its associated prices.
 */
export const pricingGroupControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<PricingGroupControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PricingGroupControllerFindOneResponses, PricingGroupControllerFindOneErrors, ThrowOnError>({
        url: '/pricing-group/{id}',
        ...options
    });
};

/**
 * Update a pricing group
 * This operation updates an existing pricing group and its associated prices.
 */
export const pricingGroupControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<PricingGroupControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PricingGroupControllerUpdateResponses, PricingGroupControllerUpdateErrors, ThrowOnError>({
        url: '/pricing-group/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch courses (Temporary)
 * This operation retrieves a paginated list of courses.
 */
export const appointmentsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<AppointmentsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppointmentsControllerFindAllResponses, AppointmentsControllerFindAllErrors, ThrowOnError>({
        url: '/appointments',
        ...options
    });
};

/**
 * Create a new appointment
 * This operation allows a student to create a new appointment with a mentor.
 */
export const appointmentsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<AppointmentsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppointmentsControllerCreateResponses, AppointmentsControllerCreateErrors, ThrowOnError>({
        url: '/appointments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch mentors (Temporary)
 * This operation retrieves a paginated list of mentors.
 */
export const appointmentsControllerFindMentor = <ThrowOnError extends boolean = false>(options?: Options<AppointmentsControllerFindMentorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppointmentsControllerFindMentorResponses, unknown, ThrowOnError>({
        url: '/appointments/mentors',
        ...options
    });
};

export const appointmentsControllerFindCourses = <ThrowOnError extends boolean = false>(options?: Options<AppointmentsControllerFindCoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppointmentsControllerFindCoursesResponses, unknown, ThrowOnError>({
        url: '/appointments/courses',
        ...options
    });
};

/**
 * Fetch all booked appointments for a mentor
 * This operation retrieves a list of a mentor's booked appointments within a specified date range.
 */
export const appointmentsControllerFindAllBooked = <ThrowOnError extends boolean = false>(options: Options<AppointmentsControllerFindAllBookedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppointmentsControllerFindAllBookedResponses, AppointmentsControllerFindAllBookedErrors, ThrowOnError>({
        url: '/appointments/{mentorId}/mentor',
        ...options
    });
};

/**
 * Delete an appointment (temporary or permanent)
 * This endpoint soft-deletes or permanently removes an appointment based on the `directDelete` query parameter.
 */
export const appointmentsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<AppointmentsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppointmentsControllerRemoveResponses, AppointmentsControllerRemoveErrors, ThrowOnError>({
        url: '/appointments/{id}',
        ...options
    });
};

/**
 * Fetch a single appointment
 * This operation retrieves a single appointment by its ID, restricted to appointments associated with the authenticated user.
 */
export const appointmentsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<AppointmentsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppointmentsControllerFindOneResponses, AppointmentsControllerFindOneErrors, ThrowOnError>({
        url: '/appointments/{id}',
        ...options
    });
};

/**
 * Update appointment details
 * This operation allows a mentor to update the details of a specific appointment.
 */
export const appointmentsControllerUpdateDetails = <ThrowOnError extends boolean = false>(options: Options<AppointmentsControllerUpdateDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppointmentsControllerUpdateDetailsResponses, AppointmentsControllerUpdateDetailsErrors, ThrowOnError>({
        url: '/appointments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update appointment status
 * This operation allows a student or mentor to update the status of an appointment, with role-based restrictions on which status changes are allowed.
 */
export const appointmentsControllerUpdateStatus = <ThrowOnError extends boolean = false>(options: Options<AppointmentsControllerUpdateStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppointmentsControllerUpdateStatusResponses, AppointmentsControllerUpdateStatusErrors, ThrowOnError>({
        url: '/appointments/{id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};