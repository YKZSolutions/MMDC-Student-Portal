// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { UsersControllerFindAllData, UsersControllerFindAllResponses, UsersControllerFindAllErrors, UsersControllerCreateData, UsersControllerCreateResponses, UsersControllerCreateErrors, UsersControllerCreateStudentData, UsersControllerCreateStudentResponses, UsersControllerCreateStudentErrors, UsersControllerCreateStaffData, UsersControllerCreateStaffResponses, UsersControllerCreateStaffErrors, UsersControllerInviteUserData, UsersControllerInviteUserResponses, UsersControllerInviteUserErrors, UsersControllerGetMeData, UsersControllerGetMeResponses, UsersControllerGetMeErrors, UsersControllerUpdateOwnUserDetailsData, UsersControllerUpdateOwnUserDetailsResponses, UsersControllerUpdateOwnUserDetailsErrors, UsersControllerUpdateUserStudentDetailsData, UsersControllerUpdateUserStudentDetailsResponses, UsersControllerUpdateUserStudentDetailsErrors, UsersControllerUpdateUserStaffDetailsData, UsersControllerUpdateUserStaffDetailsResponses, UsersControllerUpdateUserStaffDetailsErrors, UsersControllerRemoveData, UsersControllerRemoveResponses, UsersControllerRemoveErrors, UsersControllerFindOneData, UsersControllerFindOneResponses, UsersControllerFindOneErrors, UsersControllerUpdateUserStatusData, UsersControllerUpdateUserStatusResponses, UsersControllerUpdateUserStatusErrors, CoursesControllerFindAllData, CoursesControllerFindAllResponses, CoursesControllerCreateData, CoursesControllerCreateResponses, CoursesControllerRemoveData, CoursesControllerRemoveResponses, CoursesControllerFindOneData, CoursesControllerFindOneResponses, CoursesControllerUpdateData, CoursesControllerUpdateResponses, TestControllerTestStudentData, TestControllerTestStudentResponses, TestControllerTestAdminData, TestControllerTestAdminResponses, AuthControllerGetMetadataData, AuthControllerGetMetadataResponses, AuthControllerGetMetadataErrors, BillingControllerFindAllData, BillingControllerFindAllResponses, BillingControllerCreateData, BillingControllerCreateResponses, BillingControllerRemoveData, BillingControllerRemoveResponses, BillingControllerFindOneData, BillingControllerFindOneResponses, BillingControllerUpdateData, BillingControllerUpdateResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get users
 * Retrieves a paginated list of users based on the provided filter parameters.
 * - **Access:** Requires `ADMIN` role.
 * - **Filtering & Pagination:** Uses the `FilterUserDto` to define query parameters such as search terms, sorting, and page size.
 */
export const usersControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerFindAllResponses, UsersControllerFindAllErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerCreate = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerCreateResponses, UsersControllerCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new student user
 * This operation creates both a user and a supabase auth account.
 * It also has additional properties for student specific details.
 */
export const usersControllerCreateStudent = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerCreateStudentResponses, UsersControllerCreateStudentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/student',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new staff user
 * This operation creates both a user and a supabase auth account.
 * It also has additional properties for staff specific details.
 */
export const usersControllerCreateStaff = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateStaffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerCreateStaffResponses, UsersControllerCreateStaffErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/staff',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Invite a new user
 * This operation creates both a user and a supabase auth account
 */
export const usersControllerInviteUser = <ThrowOnError extends boolean = false>(options: Options<UsersControllerInviteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerInviteUserResponses, UsersControllerInviteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/invite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the currently authenticated user
 * This endpoint returns the full profile of the currently authenticated user.
 * The structure of the returned object depends on the user's role:
 *
 * - `UserStudentDetailsDto` for users with the `student` role
 * - `UserStaffDetailsDto` for users with the `mentor` or `admin` role
 */
export const usersControllerGetMe = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerGetMeResponses, UsersControllerGetMeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Update personal details
 * This operation updates the user details in the database
 */
export const usersControllerUpdateOwnUserDetails = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateOwnUserDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersControllerUpdateOwnUserDetailsResponses, UsersControllerUpdateOwnUserDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update student user details (Admin only)
 * This operation updates the user details in the database.
 * The user should be have a student role.
 */
export const usersControllerUpdateUserStudentDetails = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateUserStudentDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersControllerUpdateUserStudentDetailsResponses, UsersControllerUpdateUserStudentDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}/student',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update staff user details (Admin only)
 * This operation updates the user details in the database.
 * The user should be have a mentor or admin role.
 */
export const usersControllerUpdateUserStaffDetails = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateUserStaffDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersControllerUpdateUserStaffDetailsResponses, UsersControllerUpdateUserStaffDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}/staff',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a user (soft & hard delete)
 * This endpoint performs either a soft delete or a permanent delete on a user depending on the current state of the user or the query parameter provided:
 *
 * - If `directDelete` is true, the user is **permanently deleted** without checking if they are already soft deleted.
 * - If `directDelete` is not provided or false:
 * - If the user is not yet soft deleted (`deletedAt` is null), a **soft delete** is performed by setting the `deletedAt` timestamp.
 * - If the user is already soft deleted, a **permanent delete** is executed.
 *
 * All of the user details and the supabase auth account will be deleted from the cloud on hard delete
 *
 * Use this endpoint to manage user deletion workflows flexibly through a single API.
 */
export const usersControllerRemove = <ThrowOnError extends boolean = false>(options: Options<UsersControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersControllerRemoveResponses, UsersControllerRemoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by id
 * Retrieves a specific user by their unique identifier.
 * - **Validation:** Ensures the provided `id` is a valid identifier format.
 * - **Not Found Handling:** Throws an error if no matching user is found.
 */
export const usersControllerFindOne = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerFindOneData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerFindOneResponses, UsersControllerFindOneErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Updates the status of a user (enable/disable).
 * This endpoint toggles the user's status between active and disabled
 * by updating the `disabledAt` field. The change is also reflected in
 * the authentication provider's metadata.
 */
export const usersControllerUpdateUserStatus = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateUserStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersControllerUpdateUserStatusResponses, UsersControllerUpdateUserStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}/status',
        ...options
    });
};

export const coursesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/courses',
        ...options
    });
};

export const coursesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerCreateResponses, unknown, ThrowOnError>({
        url: '/courses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const coursesControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CoursesControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/courses/{id}',
        ...options
    });
};

export const coursesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/courses/{id}',
        ...options
    });
};

export const coursesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CoursesControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/courses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const testControllerTestStudent = <ThrowOnError extends boolean = false>(options?: Options<TestControllerTestStudentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestControllerTestStudentResponses, unknown, ThrowOnError>({
        url: '/test/student',
        ...options
    });
};

export const testControllerTestAdmin = <ThrowOnError extends boolean = false>(options?: Options<TestControllerTestAdminData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestControllerTestAdminResponses, unknown, ThrowOnError>({
        url: '/test/admin',
        ...options
    });
};

/**
 * Get User Account Metadata
 * Retrieves the supabase auth account's metadata based on the uid given
 */
export const authControllerGetMetadata = <ThrowOnError extends boolean = false>(options: Options<AuthControllerGetMetadataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuthControllerGetMetadataResponses, AuthControllerGetMetadataErrors, ThrowOnError>({
        url: '/auth/{uid}/metadata',
        ...options
    });
};

export const billingControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<BillingControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BillingControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/billing',
        ...options
    });
};

export const billingControllerCreate = <ThrowOnError extends boolean = false>(options: Options<BillingControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BillingControllerCreateResponses, unknown, ThrowOnError>({
        url: '/billing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const billingControllerRemove = <ThrowOnError extends boolean = false>(options: Options<BillingControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BillingControllerRemoveResponses, unknown, ThrowOnError>({
        url: '/billing/{id}',
        ...options
    });
};

export const billingControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<BillingControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BillingControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/billing/{id}',
        ...options
    });
};

export const billingControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<BillingControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BillingControllerUpdateResponses, unknown, ThrowOnError>({
        url: '/billing/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};