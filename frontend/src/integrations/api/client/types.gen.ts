// This file is auto-generated by @hey-api/openapi-ts

export type Role = 'student' | 'mentor' | 'admin';

export type CreateUserDto = {
    firstName: string;
    middleName?: string | null;
    lastName: string;
};

export type UserCredentialsDto = {
    email: string;
    password?: string;
};

export type CreateUserDetailsDto = {
    dateJoined: string;
    dob?: string | null;
    gender?: string | null;
};

export type CreateUserFullDto = {
    role: Role;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type User = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    disabledAt: string | null;
    deletedAt: string | null;
};

export type StudentType = 'new' | 'regular' | 'irregular' | 'transfer' | 'returnee' | 'graduate' | 'special';

export type CreateStudentDetailsDto = {
    studentNumber: number;
    studentType: StudentType;
    admissionDate: string;
    otherDetails: {
        [key: string]: unknown;
    };
};

export type CreateUserStudentDto = {
    specificDetails: CreateStudentDetailsDto;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type StaffRole = 'mentor' | 'admin';

export type CreateStaffDetailsDto = {
    employeeNumber: number;
    department: string;
    position: string;
    otherDetails: {
        [key: string]: unknown;
    };
};

export type CreateUserStaffDto = {
    role: StaffRole;
    specificDetails: CreateStaffDetailsDto;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type InviteUserDto = {
    firstName: string;
    middleName?: string | null;
    lastName: string;
    role: Role;
    email: string;
};

export type UserDetailsDto = {
    id: string;
    dateJoined: string;
    dob: string | null;
    gender: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserDetailsFullDto = {
    id: string;
    email: string | null;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: 'student' | 'mentor' | 'admin';
    userDetails: UserDetailsDto | null;
};

export type StudentDetailsDto = {
    id: string;
    studentNumber: number;
    studentType: StudentType;
    admissionDate: string;
    otherDetails: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserStudentDetailsDto = {
    id: string;
    email: string | null;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: 'student' | 'mentor' | 'admin';
    userDetails: UserDetailsDto | null;
    studentDetails: StudentDetailsDto | null;
};

export type StaffDetailsDto = {
    id: string;
    employeeNumber: number;
    department: string;
    position: string;
    otherDetails: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserStaffDetailsDto = {
    id: string;
    email: string | null;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: 'student' | 'mentor' | 'admin';
    userDetails: UserDetailsDto | null;
    staffDetails: StaffDetailsDto | null;
};

export type UpdateStudentDetailsDto = {
    studentNumber?: number;
    studentType?: StudentType;
    admissionDate?: string;
    otherDetails?: {
        [key: string]: unknown;
    };
};

export type UpdateUserDto = {
    firstName?: string;
    middleName?: string | null;
    lastName?: string;
};

export type UpdateUserDetailsDto = {
    dateJoined?: string;
    dob?: string | null;
    gender?: string | null;
};

export type UpdateUserStudentDto = {
    specificDetails?: UpdateStudentDetailsDto;
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type UpdateStaffDetailsDto = {
    employeeNumber?: number;
    department?: string;
    position?: string;
    otherDetails?: {
        [key: string]: unknown;
    };
};

export type UpdateUserStaffDto = {
    specificDetails?: UpdateStaffDetailsDto;
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type UpdateUserBaseDto = {
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type PaginationMetaDto = {
    isFirstPage: boolean;
    isLastPage: boolean;
    currentPage: number;
    previousPage: number | null;
    nextPage: number | null;
    pageCount: number;
    totalCount: number;
};

export type UserAccountDto = {
    id: string;
    authUid: string;
    email: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserWithRelations = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    disabledAt: string | null;
    deletedAt: string | null;
    userAccount: UserAccountDto | null;
    userDetails: UserDetailsDto | null;
};

export type PaginatedUsersDto = {
    meta: PaginationMetaDto;
    users: Array<UserWithRelations>;
};

export type CreateCourseDto = {
    [key: string]: unknown;
};

export type UpdateCourseDto = {
    [key: string]: unknown;
};

export type UserStatus = 'active' | 'disabled' | 'deleted';

export type AuthMetadataDto = {
    role?: Role;
    status?: UserStatus;
    user_id?: string;
};

export type BillStatus = 'paid' | 'unpaid' | 'overpaid';

export type CreateBillDto = {
    invoiceId: string;
    payerName: string;
    payerEmail: string;
    billType: string;
    status: BillStatus;
    receivableAmount: string;
    receiptedAmount: string;
    outstandingAmount: string;
    dueAt: string;
    issuedAt: string;
    costBreakdown: {
        [key: string]: unknown;
    };
};

export type CreateBillingDto = {
    bill: CreateBillDto;
    userId?: string;
};

export type BillDto = {
    id: string;
    invoiceId: string;
    payerName: string;
    payerEmail: string;
    billType: string;
    status: BillStatus;
    receivableAmount: string;
    receiptedAmount: string;
    outstandingAmount: string;
    dueAt: string;
    issuedAt: string;
    costBreakdown: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type PaginatedBillsDto = {
    bills: Array<BillDto>;
    meta: {
        [key: string]: unknown;
    };
};

export type UpdateBillDto = {
    invoiceId?: string;
    payerName?: string;
    payerEmail?: string;
    billType?: string;
    status?: BillStatus;
    receivableAmount?: string;
    receiptedAmount?: string;
    outstandingAmount?: string;
    dueAt?: string;
    issuedAt?: string;
    costBreakdown?: {
        [key: string]: unknown;
    };
};

export type CreateBillPaymentDto = {
    amountPaid: string;
    paymentType: string;
    notes: string;
    paymentDate: string;
    paymongoData?: {
        [key: string]: unknown;
    } | null;
};

export type CreatePaymentDto = {
    payment: CreateBillPaymentDto;
    description: string;
    statementDescriptor: string;
};

export type BillPaymentDto = {
    id: string;
    amountPaid: string;
    paymentType: string;
    notes: string;
    paymentDate: string;
    paymongoData: {
        [key: string]: unknown;
    } | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UpdateBillPaymentDto = {
    amountPaid?: string;
    paymentType?: string;
    notes?: string;
    paymentDate?: string;
    paymongoData?: {
        [key: string]: unknown;
    } | null;
};

export type CreateProgramDto = {
    code: string;
    name: string;
    description: string;
};

export type Program = {
    id: string;
    code: string;
    name: string;
    description: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type ProgramDto = {
    id: string;
    code: string;
    name: string;
    description: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type PaginatedProgramsDto = {
    meta: PaginationMetaDto;
    programs: Array<ProgramDto>;
};

export type UpdateProgramDto = {
    code?: string;
    name?: string;
    description?: string;
};

export type Turn = {
    role: 'user' | 'model';
    content: string;
};

export type PromptDto = {
    question: string;
    sessionHistory: Array<Turn>;
};

export type ChatbotResponseDto = {
    response: string;
};

export type CreateMajorDto = {
    major: CreateMajorDto;
    programId: string;
};

export type Major = {
    id: string;
    programId: string;
    courses?: Array<Course>;
    name: string;
    description: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type Course = {
    id: string;
    major?: Array<Major>;
    prereqs?: Array<Course>;
    prereqFor?: Array<Course>;
    coreqs?: Array<Course>;
    coreqFor?: Array<Course>;
    courseCode: string;
    name: string;
    description: string;
    year: string;
    semester: string;
    units: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type MajorDto = {
    id: string;
    name: string;
    description: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type PaginatedMajorsDto = {
    meta: PaginationMetaDto;
    majors: Array<MajorDto>;
};

export type UpdateMajorDto = {
    name?: string;
    description?: string;
};

export type TestControllerTestStudentData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/student';
};

export type TestControllerTestStudentResponses = {
    200: string;
};

export type TestControllerTestStudentResponse = TestControllerTestStudentResponses[keyof TestControllerTestStudentResponses];

export type TestControllerTestAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/admin';
};

export type TestControllerTestAdminResponses = {
    200: string;
};

export type TestControllerTestAdminResponse = TestControllerTestAdminResponses[keyof TestControllerTestAdminResponses];

export type UsersControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        role?: 'student' | 'mentor' | 'admin';
    };
    url: '/users';
};

export type UsersControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerFindAllError = UsersControllerFindAllErrors[keyof UsersControllerFindAllErrors];

export type UsersControllerFindAllResponses = {
    /**
     * List of users retrieved successfully
     */
    200: PaginatedUsersDto;
};

export type UsersControllerFindAllResponse = UsersControllerFindAllResponses[keyof UsersControllerFindAllResponses];

export type UsersControllerCreateData = {
    body: CreateUserFullDto;
    path?: never;
    query?: never;
    url: '/users';
};

export type UsersControllerCreateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateError = UsersControllerCreateErrors[keyof UsersControllerCreateErrors];

export type UsersControllerCreateResponses = {
    201: User;
};

export type UsersControllerCreateResponse = UsersControllerCreateResponses[keyof UsersControllerCreateResponses];

export type UsersControllerCreateStudentData = {
    body: CreateUserStudentDto;
    path?: never;
    query?: never;
    url: '/users/student';
};

export type UsersControllerCreateStudentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateStudentError = UsersControllerCreateStudentErrors[keyof UsersControllerCreateStudentErrors];

export type UsersControllerCreateStudentResponses = {
    201: User;
};

export type UsersControllerCreateStudentResponse = UsersControllerCreateStudentResponses[keyof UsersControllerCreateStudentResponses];

export type UsersControllerCreateStaffData = {
    body: CreateUserStaffDto;
    path?: never;
    query?: never;
    url: '/users/staff';
};

export type UsersControllerCreateStaffErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateStaffError = UsersControllerCreateStaffErrors[keyof UsersControllerCreateStaffErrors];

export type UsersControllerCreateStaffResponses = {
    201: User;
};

export type UsersControllerCreateStaffResponse = UsersControllerCreateStaffResponses[keyof UsersControllerCreateStaffResponses];

export type UsersControllerInviteUserData = {
    body: InviteUserDto;
    path?: never;
    query?: never;
    url: '/users/invite';
};

export type UsersControllerInviteUserErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerInviteUserError = UsersControllerInviteUserErrors[keyof UsersControllerInviteUserErrors];

export type UsersControllerInviteUserResponses = {
    201: User;
};

export type UsersControllerInviteUserResponse = UsersControllerInviteUserResponses[keyof UsersControllerInviteUserResponses];

export type UsersControllerGetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersControllerGetMeErrors = {
    401: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerGetMeError = UsersControllerGetMeErrors[keyof UsersControllerGetMeErrors];

export type UsersControllerGetMeResponses = {
    /**
     * Current user details fetched successfully
     */
    200: UserStudentDetailsDto | UserStaffDetailsDto;
};

export type UsersControllerGetMeResponse = UsersControllerGetMeResponses[keyof UsersControllerGetMeResponses];

export type UsersControllerUpdateOwnUserDetailsData = {
    body: UpdateUserBaseDto;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersControllerUpdateOwnUserDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateOwnUserDetailsError = UsersControllerUpdateOwnUserDetailsErrors[keyof UsersControllerUpdateOwnUserDetailsErrors];

export type UsersControllerUpdateOwnUserDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateOwnUserDetailsResponse = UsersControllerUpdateOwnUserDetailsResponses[keyof UsersControllerUpdateOwnUserDetailsResponses];

export type UsersControllerUpdateUserStudentDetailsData = {
    body: UpdateUserStudentDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/student';
};

export type UsersControllerUpdateUserStudentDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStudentDetailsError = UsersControllerUpdateUserStudentDetailsErrors[keyof UsersControllerUpdateUserStudentDetailsErrors];

export type UsersControllerUpdateUserStudentDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateUserStudentDetailsResponse = UsersControllerUpdateUserStudentDetailsResponses[keyof UsersControllerUpdateUserStudentDetailsResponses];

export type UsersControllerUpdateUserStaffDetailsData = {
    body: UpdateUserStaffDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/staff';
};

export type UsersControllerUpdateUserStaffDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStaffDetailsError = UsersControllerUpdateUserStaffDetailsErrors[keyof UsersControllerUpdateUserStaffDetailsErrors];

export type UsersControllerUpdateUserStaffDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateUserStaffDetailsResponse = UsersControllerUpdateUserStaffDetailsResponses[keyof UsersControllerUpdateUserStaffDetailsResponses];

export type UsersControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/users/{id}';
};

export type UsersControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerRemoveError = UsersControllerRemoveErrors[keyof UsersControllerRemoveErrors];

export type UsersControllerRemoveResponses = {
    /**
     * User deleted successfully
     */
    200: {
        message?: string;
    };
};

export type UsersControllerRemoveResponse = UsersControllerRemoveResponses[keyof UsersControllerRemoveResponses];

export type UsersControllerFindOneData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/{id}';
};

export type UsersControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerFindOneError = UsersControllerFindOneErrors[keyof UsersControllerFindOneErrors];

export type UsersControllerFindOneResponses = {
    /**
     * User found successfully
     */
    200: User;
};

export type UsersControllerFindOneResponse = UsersControllerFindOneResponses[keyof UsersControllerFindOneResponses];

export type UsersControllerUpdateUserStatusData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/status';
};

export type UsersControllerUpdateUserStatusErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStatusError = UsersControllerUpdateUserStatusErrors[keyof UsersControllerUpdateUserStatusErrors];

export type UsersControllerUpdateUserStatusResponses = {
    /**
     * User status updated successfully
     */
    200: {
        message?: string;
    };
};

export type UsersControllerUpdateUserStatusResponse = UsersControllerUpdateUserStatusResponses[keyof UsersControllerUpdateUserStatusResponses];

export type CoursesControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/courses';
};

export type CoursesControllerFindAllResponses = {
    200: string;
};

export type CoursesControllerFindAllResponse = CoursesControllerFindAllResponses[keyof CoursesControllerFindAllResponses];

export type CoursesControllerCreateData = {
    body: CreateCourseDto;
    path?: never;
    query?: never;
    url: '/courses';
};

export type CoursesControllerCreateResponses = {
    201: string;
};

export type CoursesControllerCreateResponse = CoursesControllerCreateResponses[keyof CoursesControllerCreateResponses];

export type CoursesControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerRemoveResponses = {
    200: string;
};

export type CoursesControllerRemoveResponse = CoursesControllerRemoveResponses[keyof CoursesControllerRemoveResponses];

export type CoursesControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerFindOneResponses = {
    200: string;
};

export type CoursesControllerFindOneResponse = CoursesControllerFindOneResponses[keyof CoursesControllerFindOneResponses];

export type CoursesControllerUpdateData = {
    body: UpdateCourseDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerUpdateResponses = {
    200: string;
};

export type CoursesControllerUpdateResponse = CoursesControllerUpdateResponses[keyof CoursesControllerUpdateResponses];

export type AuthControllerGetMetadataData = {
    body?: never;
    path: {
        uid: string;
    };
    query?: never;
    url: '/auth/{uid}/metadata';
};

export type AuthControllerGetMetadataErrors = {
    /**
     * If the uid provided is invalid
     */
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    /**
     * If an unexpected server error has occured
     */
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AuthControllerGetMetadataError = AuthControllerGetMetadataErrors[keyof AuthControllerGetMetadataErrors];

export type AuthControllerGetMetadataResponses = {
    200: AuthMetadataDto;
};

export type AuthControllerGetMetadataResponse = AuthControllerGetMetadataResponses[keyof AuthControllerGetMetadataResponses];

export type AuthControllerLoginData = {
    body: UserCredentialsDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthControllerLoginErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    401: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AuthControllerLoginError = AuthControllerLoginErrors[keyof AuthControllerLoginErrors];

export type AuthControllerLoginResponses = {
    201: string;
};

export type AuthControllerLoginResponse = AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type BillingControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        sortOrder?: 'asc' | 'desc';
        page?: number;
        search?: string;
        sort?: 'status' | 'amount' | 'dueAt' | 'createdAt';
        status?: 'paid' | 'unpaid' | 'overpaid';
        type?: string;
    };
    url: '/billing';
};

export type BillingControllerFindAllErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerFindAllError = BillingControllerFindAllErrors[keyof BillingControllerFindAllErrors];

export type BillingControllerFindAllResponses = {
    200: PaginatedBillsDto;
};

export type BillingControllerFindAllResponse = BillingControllerFindAllResponses[keyof BillingControllerFindAllResponses];

export type BillingControllerCreateData = {
    body: CreateBillingDto;
    path?: never;
    query?: never;
    url: '/billing';
};

export type BillingControllerCreateErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerCreateError = BillingControllerCreateErrors[keyof BillingControllerCreateErrors];

export type BillingControllerCreateResponses = {
    201: BillDto;
};

export type BillingControllerCreateResponse = BillingControllerCreateResponses[keyof BillingControllerCreateResponses];

export type BillingControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{id}';
};

export type BillingControllerRemoveErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerRemoveError = BillingControllerRemoveErrors[keyof BillingControllerRemoveErrors];

export type BillingControllerRemoveResponses = {
    200: unknown;
};

export type BillingControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{id}';
};

export type BillingControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerFindOneError = BillingControllerFindOneErrors[keyof BillingControllerFindOneErrors];

export type BillingControllerFindOneResponses = {
    200: BillDto;
};

export type BillingControllerFindOneResponse = BillingControllerFindOneResponses[keyof BillingControllerFindOneResponses];

export type BillingControllerUpdateData = {
    body: UpdateBillDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{id}';
};

export type BillingControllerUpdateErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerUpdateError = BillingControllerUpdateErrors[keyof BillingControllerUpdateErrors];

export type BillingControllerUpdateResponses = {
    200: BillDto;
};

export type BillingControllerUpdateResponse = BillingControllerUpdateResponses[keyof BillingControllerUpdateResponses];

export type PaymentsControllerPayData = {
    body: CreatePaymentDto;
    path: {
        billId: string;
    };
    query?: never;
    url: '/billing/{billId}/payments/pay';
};

export type PaymentsControllerPayErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerPayError = PaymentsControllerPayErrors[keyof PaymentsControllerPayErrors];

export type PaymentsControllerPayResponses = {
    201: {
        [key: string]: unknown;
    };
};

export type PaymentsControllerPayResponse = PaymentsControllerPayResponses[keyof PaymentsControllerPayResponses];

export type PaymentsControllerFindAllData = {
    body?: never;
    path: {
        billId: string;
    };
    query?: never;
    url: '/billing/{billId}/payments';
};

export type PaymentsControllerFindAllErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerFindAllError = PaymentsControllerFindAllErrors[keyof PaymentsControllerFindAllErrors];

export type PaymentsControllerFindAllResponses = {
    200: Array<BillPaymentDto>;
};

export type PaymentsControllerFindAllResponse = PaymentsControllerFindAllResponses[keyof PaymentsControllerFindAllResponses];

export type PaymentsControllerCreateData = {
    body: CreatePaymentDto;
    path: {
        billId: string;
    };
    query?: never;
    url: '/billing/{billId}/payments';
};

export type PaymentsControllerCreateErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerCreateError = PaymentsControllerCreateErrors[keyof PaymentsControllerCreateErrors];

export type PaymentsControllerCreateResponses = {
    201: BillPaymentDto;
};

export type PaymentsControllerCreateResponse = PaymentsControllerCreateResponses[keyof PaymentsControllerCreateResponses];

export type PaymentsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{billId}/payments/{id}';
};

export type PaymentsControllerRemoveErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerRemoveError = PaymentsControllerRemoveErrors[keyof PaymentsControllerRemoveErrors];

export type PaymentsControllerRemoveResponses = {
    200: unknown;
};

export type PaymentsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{billId}/payments/{id}';
};

export type PaymentsControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerFindOneError = PaymentsControllerFindOneErrors[keyof PaymentsControllerFindOneErrors];

export type PaymentsControllerFindOneResponses = {
    200: BillPaymentDto;
};

export type PaymentsControllerFindOneResponse = PaymentsControllerFindOneResponses[keyof PaymentsControllerFindOneResponses];

export type PaymentsControllerUpdateData = {
    body: UpdateBillPaymentDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{billId}/payments/{id}';
};

export type PaymentsControllerUpdateErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerUpdateError = PaymentsControllerUpdateErrors[keyof PaymentsControllerUpdateErrors];

export type PaymentsControllerUpdateResponses = {
    200: BillPaymentDto;
};

export type PaymentsControllerUpdateResponse = PaymentsControllerUpdateResponses[keyof PaymentsControllerUpdateResponses];

export type ProgramControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
    };
    url: '/program';
};

export type ProgramControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerFindAllError = ProgramControllerFindAllErrors[keyof ProgramControllerFindAllErrors];

export type ProgramControllerFindAllResponses = {
    /**
     * List of programs retrieved successfully
     */
    200: PaginatedProgramsDto;
};

export type ProgramControllerFindAllResponse = ProgramControllerFindAllResponses[keyof ProgramControllerFindAllResponses];

export type ProgramControllerCreateData = {
    body: CreateProgramDto;
    path?: never;
    query?: never;
    url: '/program';
};

export type ProgramControllerCreateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerCreateError = ProgramControllerCreateErrors[keyof ProgramControllerCreateErrors];

export type ProgramControllerCreateResponses = {
    201: Program;
};

export type ProgramControllerCreateResponse = ProgramControllerCreateResponses[keyof ProgramControllerCreateResponses];

export type ProgramControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/program/{id}';
};

export type ProgramControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerRemoveError = ProgramControllerRemoveErrors[keyof ProgramControllerRemoveErrors];

export type ProgramControllerRemoveResponses = {
    /**
     * Program deleted successfully
     */
    200: {
        message?: string;
    };
};

export type ProgramControllerRemoveResponse = ProgramControllerRemoveResponses[keyof ProgramControllerRemoveResponses];

export type ProgramControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/program/{id}';
};

export type ProgramControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerFindOneError = ProgramControllerFindOneErrors[keyof ProgramControllerFindOneErrors];

export type ProgramControllerFindOneResponses = {
    /**
     * Program retrieved successfully
     */
    200: Program;
};

export type ProgramControllerFindOneResponse = ProgramControllerFindOneResponses[keyof ProgramControllerFindOneResponses];

export type ProgramControllerUpdateData = {
    body: UpdateProgramDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/program/{id}';
};

export type ProgramControllerUpdateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerUpdateError = ProgramControllerUpdateErrors[keyof ProgramControllerUpdateErrors];

export type ProgramControllerUpdateResponses = {
    /**
     * Program updated successfully
     */
    200: Program;
};

export type ProgramControllerUpdateResponse = ProgramControllerUpdateResponses[keyof ProgramControllerUpdateResponses];

export type ChatbotControllerPromptData = {
    body: PromptDto;
    path?: never;
    query?: never;
    url: '/chatbot';
};

export type ChatbotControllerPromptErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ChatbotControllerPromptError = ChatbotControllerPromptErrors[keyof ChatbotControllerPromptErrors];

export type ChatbotControllerPromptResponses = {
    201: ChatbotResponseDto;
};

export type ChatbotControllerPromptResponse = ChatbotControllerPromptResponses[keyof ChatbotControllerPromptResponses];

export type MajorControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
    };
    url: '/major';
};

export type MajorControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerFindAllError = MajorControllerFindAllErrors[keyof MajorControllerFindAllErrors];

export type MajorControllerFindAllResponses = {
    200: PaginatedMajorsDto;
};

export type MajorControllerFindAllResponse = MajorControllerFindAllResponses[keyof MajorControllerFindAllResponses];

export type MajorControllerCreateData = {
    body: CreateMajorDto;
    path?: never;
    query?: never;
    url: '/major';
};

export type MajorControllerCreateErrors = {
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerCreateError = MajorControllerCreateErrors[keyof MajorControllerCreateErrors];

export type MajorControllerCreateResponses = {
    201: Major;
};

export type MajorControllerCreateResponse = MajorControllerCreateResponses[keyof MajorControllerCreateResponses];

export type MajorControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/major/{id}';
};

export type MajorControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerRemoveError = MajorControllerRemoveErrors[keyof MajorControllerRemoveErrors];

export type MajorControllerRemoveResponses = {
    200: {
        message?: string;
    };
};

export type MajorControllerRemoveResponse = MajorControllerRemoveResponses[keyof MajorControllerRemoveResponses];

export type MajorControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/major/{id}';
};

export type MajorControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerFindOneError = MajorControllerFindOneErrors[keyof MajorControllerFindOneErrors];

export type MajorControllerFindOneResponses = {
    200: Major;
};

export type MajorControllerFindOneResponse = MajorControllerFindOneResponses[keyof MajorControllerFindOneResponses];

export type MajorControllerUpdateData = {
    body: UpdateMajorDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/major/{id}';
};

export type MajorControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerUpdateError = MajorControllerUpdateErrors[keyof MajorControllerUpdateErrors];

export type MajorControllerUpdateResponses = {
    200: Major;
};

export type MajorControllerUpdateResponse = MajorControllerUpdateResponses[keyof MajorControllerUpdateResponses];

export type ClientOptions = {
    baseUrl: string;
};