// This file is auto-generated by @hey-api/openapi-ts

export type Role = 'student' | 'mentor' | 'admin';

export type CreateUserDto = {
    firstName: string;
    middleName?: string | null;
    lastName: string;
};

export type UserCredentialsDto = {
    email: string;
    password?: string;
};

export type ConnectUserDto = {
    id: string;
};

export type CreateUserDetailsUserRelationInputDto = {
    connect: ConnectUserDto;
};

export type CreateUserDetailsDto = {
    dateJoined: string;
    dob?: string | null;
    gender?: string | null;
};

export type CreateUserFullDto = {
    role: Role;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type User = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    disabledAt: string | null;
    deletedAt: string | null;
};

export type CreateStudentDetailsUserRelationInputDto = {
    connect: ConnectUserDto;
};

export type StudentType = 'new' | 'regular' | 'irregular' | 'transfer' | 'returnee' | 'graduate' | 'special';

export type CreateStudentDetailsDto = {
    student_number: number;
    student_type: StudentType;
    admission_date: string;
    other_details: {
        [key: string]: unknown;
    };
};

export type CreateUserStudentDto = {
    specificDetails: CreateStudentDetailsDto;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type StaffRole = 'mentor' | 'admin';

export type CreateStaffDetailsUserRelationInputDto = {
    connect: ConnectUserDto;
};

export type CreateStaffDetailsDto = {
    employee_number: number;
    department: string;
    position: string;
    other_details: {
        [key: string]: unknown;
    };
};

export type CreateUserStaffDto = {
    role: StaffRole;
    specificDetails: CreateStaffDetailsDto;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type InviteUserDto = {
    firstName: string;
    middleName?: string | null;
    lastName: string;
    role: Role;
    email: string;
};

export type UserDetailsDto = {
    id: string;
    dateJoined: string;
    dob: string | null;
    gender: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type StudentDetailsDto = {
    id: string;
    student_number: number;
    student_type: StudentType;
    admission_date: string;
    other_details: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserStudentDetailsDto = {
    id: string;
    email: string | null;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: 'student' | 'mentor' | 'admin';
    userDetails: UserDetailsDto | null;
    studentDetails: StudentDetailsDto | null;
};

export type StaffDetailsDto = {
    id: string;
    employee_number: number;
    department: string;
    position: string;
    other_details: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserStaffDetailsDto = {
    id: string;
    email: string | null;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: 'student' | 'mentor' | 'admin';
    userDetails: UserDetailsDto | null;
    staffDetails: StaffDetailsDto | null;
};

export type UpdateStudentDetailsDto = {
    student_number?: number;
    student_type?: StudentType;
    admission_date?: string;
    other_details?: {
        [key: string]: unknown;
    };
};

export type UpdateUserDto = {
    firstName?: string;
    middleName?: string | null;
    lastName?: string;
};

export type UpdateUserDetailsDto = {
    dateJoined?: string;
    dob?: string | null;
    gender?: string | null;
};

export type UpdateUserStudentDto = {
    specificDetails?: UpdateStudentDetailsDto;
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type UpdateStaffDetailsDto = {
    employee_number?: number;
    department?: string;
    position?: string;
    other_details?: {
        [key: string]: unknown;
    };
};

export type UpdateUserStaffDto = {
    specificDetails?: UpdateStaffDetailsDto;
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type UpdateUserBaseDto = {
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type UserAccount = {
    id: string;
    userId: string;
    authUid: string;
    email?: string;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type UserDetails = {
    id: string;
    userId: string;
    dob?: string;
    gender?: string;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type UserWithRelations = {
    id: string;
    firstName: string;
    middleName?: string;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    userAccount: UserAccount | null;
    userDetails: UserDetails | null;
};

export type PaginationMetaDto = {
    isFirstPage: boolean;
    isLastPage: boolean;
    currentPage: number;
    previousPage: number | null;
    nextPage: number | null;
    pageCount: number;
    totalCount: number;
};

export type PaginatedUsersDto = {
    users: Array<UserWithRelations>;
    meta: PaginationMetaDto;
};

export type CreateCourseDto = {
    [key: string]: unknown;
};

export type UpdateCourseDto = {
    [key: string]: unknown;
};

export type UserStatus = 'active' | 'disabled' | 'deleted';

export type AuthMetadataDto = {
    role?: Role;
    status?: UserStatus;
    user_id?: string;
};

export type CreateBillingDto = {
    amount: number;
    billingId: string;
    description?: string;
    statement?: string;
    metadata?: {
        [key: string]: unknown;
    };
};

export type PaymentIntentAttributesDto = {
    amount: number;
    capture_type: string;
    client_key: string;
    created_at: number;
    currency: string;
    description: string;
    last_payment_error?: string | null;
    livemode: boolean;
    metadata?: {
        [key: string]: unknown;
    } | null;
    next_action?: {
        [key: string]: unknown;
    } | null;
    original_amount: number;
    payment_method_allowed: Array<string>;
    payment_method_options?: {
        [key: string]: unknown;
    } | null;
    payments: Array<{
        [key: string]: unknown;
    }>;
    setup_future_usage?: string | null;
    statement_descriptor: string;
    status: string;
    updated_at: number;
};

export type PaymentIntentDataDto = {
    id: string;
    type: string;
    attributes: PaymentIntentAttributesDto;
};

export type PaymentIntentResponseDto = {
    data: PaymentIntentDataDto;
    billingId: string;
};

export type UpdateBillingDto = {
    amount?: number;
    billingId?: string;
    description?: string;
    statement?: string;
    metadata?: {
        [key: string]: unknown;
    };
};

export type UsersControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        role?: 'student' | 'mentor' | 'admin';
        page?: number;
    };
    url: '/users';
};

export type UsersControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerFindAllError = UsersControllerFindAllErrors[keyof UsersControllerFindAllErrors];

export type UsersControllerFindAllResponses = {
    /**
     * List of users retrieved successfully
     */
    200: PaginatedUsersDto;
};

export type UsersControllerFindAllResponse = UsersControllerFindAllResponses[keyof UsersControllerFindAllResponses];

export type UsersControllerCreateData = {
    body: CreateUserFullDto;
    path?: never;
    query?: never;
    url: '/users';
};

export type UsersControllerCreateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateError = UsersControllerCreateErrors[keyof UsersControllerCreateErrors];

export type UsersControllerCreateResponses = {
    201: User;
};

export type UsersControllerCreateResponse = UsersControllerCreateResponses[keyof UsersControllerCreateResponses];

export type UsersControllerCreateStudentData = {
    body: CreateUserStudentDto;
    path?: never;
    query?: never;
    url: '/users/student';
};

export type UsersControllerCreateStudentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateStudentError = UsersControllerCreateStudentErrors[keyof UsersControllerCreateStudentErrors];

export type UsersControllerCreateStudentResponses = {
    201: User;
};

export type UsersControllerCreateStudentResponse = UsersControllerCreateStudentResponses[keyof UsersControllerCreateStudentResponses];

export type UsersControllerCreateStaffData = {
    body: CreateUserStaffDto;
    path?: never;
    query?: never;
    url: '/users/staff';
};

export type UsersControllerCreateStaffErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateStaffError = UsersControllerCreateStaffErrors[keyof UsersControllerCreateStaffErrors];

export type UsersControllerCreateStaffResponses = {
    201: User;
};

export type UsersControllerCreateStaffResponse = UsersControllerCreateStaffResponses[keyof UsersControllerCreateStaffResponses];

export type UsersControllerInviteUserData = {
    body: InviteUserDto;
    path?: never;
    query?: never;
    url: '/users/invite';
};

export type UsersControllerInviteUserErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerInviteUserError = UsersControllerInviteUserErrors[keyof UsersControllerInviteUserErrors];

export type UsersControllerInviteUserResponses = {
    201: User;
};

export type UsersControllerInviteUserResponse = UsersControllerInviteUserResponses[keyof UsersControllerInviteUserResponses];

export type UsersControllerGetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersControllerGetMeErrors = {
    401: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerGetMeError = UsersControllerGetMeErrors[keyof UsersControllerGetMeErrors];

export type UsersControllerGetMeResponses = {
    /**
     * Current user details fetched successfully
     */
    200: UserStudentDetailsDto | UserStaffDetailsDto;
};

export type UsersControllerGetMeResponse = UsersControllerGetMeResponses[keyof UsersControllerGetMeResponses];

export type UsersControllerUpdateOwnUserDetailsData = {
    body: UpdateUserBaseDto;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersControllerUpdateOwnUserDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateOwnUserDetailsError = UsersControllerUpdateOwnUserDetailsErrors[keyof UsersControllerUpdateOwnUserDetailsErrors];

export type UsersControllerUpdateOwnUserDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateOwnUserDetailsResponse = UsersControllerUpdateOwnUserDetailsResponses[keyof UsersControllerUpdateOwnUserDetailsResponses];

export type UsersControllerUpdateUserStudentDetailsData = {
    body: UpdateUserStudentDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/student';
};

export type UsersControllerUpdateUserStudentDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStudentDetailsError = UsersControllerUpdateUserStudentDetailsErrors[keyof UsersControllerUpdateUserStudentDetailsErrors];

export type UsersControllerUpdateUserStudentDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateUserStudentDetailsResponse = UsersControllerUpdateUserStudentDetailsResponses[keyof UsersControllerUpdateUserStudentDetailsResponses];

export type UsersControllerUpdateUserStaffDetailsData = {
    body: UpdateUserStaffDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/staff';
};

export type UsersControllerUpdateUserStaffDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStaffDetailsError = UsersControllerUpdateUserStaffDetailsErrors[keyof UsersControllerUpdateUserStaffDetailsErrors];

export type UsersControllerUpdateUserStaffDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateUserStaffDetailsResponse = UsersControllerUpdateUserStaffDetailsResponses[keyof UsersControllerUpdateUserStaffDetailsResponses];

export type UsersControllerFindOneData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/{id}';
};

export type UsersControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerFindOneError = UsersControllerFindOneErrors[keyof UsersControllerFindOneErrors];

export type UsersControllerFindOneResponses = {
    /**
     * User found successfully
     */
    200: User;
};

export type UsersControllerFindOneResponse = UsersControllerFindOneResponses[keyof UsersControllerFindOneResponses];

export type UsersControllerUpdateUserStatusData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/status';
};

export type UsersControllerUpdateUserStatusErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStatusError = UsersControllerUpdateUserStatusErrors[keyof UsersControllerUpdateUserStatusErrors];

export type UsersControllerUpdateUserStatusResponses = {
    /**
     * User status updated successfully
     */
    200: {
        message?: string;
    };
};

export type UsersControllerUpdateUserStatusResponse = UsersControllerUpdateUserStatusResponses[keyof UsersControllerUpdateUserStatusResponses];

export type CoursesControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/courses';
};

export type CoursesControllerFindAllResponses = {
    200: string;
};

export type CoursesControllerFindAllResponse = CoursesControllerFindAllResponses[keyof CoursesControllerFindAllResponses];

export type CoursesControllerCreateData = {
    body: CreateCourseDto;
    path?: never;
    query?: never;
    url: '/courses';
};

export type CoursesControllerCreateResponses = {
    201: string;
};

export type CoursesControllerCreateResponse = CoursesControllerCreateResponses[keyof CoursesControllerCreateResponses];

export type CoursesControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerRemoveResponses = {
    200: string;
};

export type CoursesControllerRemoveResponse = CoursesControllerRemoveResponses[keyof CoursesControllerRemoveResponses];

export type CoursesControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerFindOneResponses = {
    200: string;
};

export type CoursesControllerFindOneResponse = CoursesControllerFindOneResponses[keyof CoursesControllerFindOneResponses];

export type CoursesControllerUpdateData = {
    body: UpdateCourseDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerUpdateResponses = {
    200: string;
};

export type CoursesControllerUpdateResponse = CoursesControllerUpdateResponses[keyof CoursesControllerUpdateResponses];

export type TestControllerTestStudentData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/student';
};

export type TestControllerTestStudentResponses = {
    200: string;
};

export type TestControllerTestStudentResponse = TestControllerTestStudentResponses[keyof TestControllerTestStudentResponses];

export type TestControllerTestAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/admin';
};

export type TestControllerTestAdminResponses = {
    200: string;
};

export type TestControllerTestAdminResponse = TestControllerTestAdminResponses[keyof TestControllerTestAdminResponses];

export type AuthControllerGetMetadataData = {
    body?: never;
    path: {
        uid: string;
    };
    query?: never;
    url: '/auth/{uid}/metadata';
};

export type AuthControllerGetMetadataErrors = {
    /**
     * If the uid provided is invalid
     */
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    /**
     * If an unexpected server error has occured
     */
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AuthControllerGetMetadataError = AuthControllerGetMetadataErrors[keyof AuthControllerGetMetadataErrors];

export type AuthControllerGetMetadataResponses = {
    200: AuthMetadataDto;
};

export type AuthControllerGetMetadataResponse = AuthControllerGetMetadataResponses[keyof AuthControllerGetMetadataResponses];

export type BillingControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/billing';
};

export type BillingControllerFindAllResponses = {
    200: string;
};

export type BillingControllerFindAllResponse = BillingControllerFindAllResponses[keyof BillingControllerFindAllResponses];

export type BillingControllerCreateData = {
    body: CreateBillingDto;
    path?: never;
    query?: never;
    url: '/billing';
};

export type BillingControllerCreateResponses = {
    201: PaymentIntentResponseDto;
};

export type BillingControllerCreateResponse = BillingControllerCreateResponses[keyof BillingControllerCreateResponses];

export type BillingControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{id}';
};

export type BillingControllerRemoveResponses = {
    200: string;
};

export type BillingControllerRemoveResponse = BillingControllerRemoveResponses[keyof BillingControllerRemoveResponses];

export type BillingControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{id}';
};

export type BillingControllerFindOneResponses = {
    200: string;
};

export type BillingControllerFindOneResponse = BillingControllerFindOneResponses[keyof BillingControllerFindOneResponses];

export type BillingControllerUpdateData = {
    body: UpdateBillingDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{id}';
};

export type BillingControllerUpdateResponses = {
    200: string;
};

export type BillingControllerUpdateResponse = BillingControllerUpdateResponses[keyof BillingControllerUpdateResponses];

export type ClientOptions = {
    baseUrl: string;
};