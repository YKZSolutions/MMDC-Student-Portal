// This file is auto-generated by @hey-api/openapi-ts

export type TestBodyNestDto = {
    name: string;
};

export type TestBodyDto = {
    /**
     * The id shit
     */
    id: number;
    nested: TestBodyNestDto;
};

export type Role = 'student' | 'mentor' | 'admin';

export type CreateUserDto = {
    firstName: string;
    middleName?: string | null;
    lastName: string;
};

export type UserCredentialsDto = {
    email: string;
    password?: string;
};

export type CreateUserDetailsDto = {
    dateJoined: string;
    dob?: string | null;
    gender?: string | null;
};

export type CreateUserFullDto = {
    role: Role;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type User = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    disabledAt: string | null;
    deletedAt: string | null;
};

export type StudentType = 'new' | 'regular' | 'irregular' | 'transfer' | 'returnee' | 'graduate' | 'special';

export type CreateStudentDetailsDto = {
    studentNumber: string;
    studentType: StudentType;
    admissionDate: string;
    otherDetails: {
        [key: string]: unknown;
    };
};

export type CreateUserStudentDto = {
    specificDetails: CreateStudentDetailsDto;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type StaffRole = 'mentor' | 'admin';

export type CreateStaffDetailsDto = {
    employeeNumber: number;
    department: string;
    position: string;
    otherDetails: {
        [key: string]: unknown;
    };
};

export type CreateUserStaffDto = {
    role: StaffRole;
    specificDetails: CreateStaffDetailsDto;
    user: CreateUserDto;
    credentials: UserCredentialsDto;
    userDetails?: CreateUserDetailsDto;
};

export type InviteUserDto = {
    firstName: string;
    middleName?: string | null;
    lastName: string;
    role: Role;
    email: string;
};

export type UserDetailsDto = {
    id: string;
    dateJoined: string;
    dob: string | null;
    gender: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserDetailsFullDto = {
    id: string;
    email: string | null;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: 'student' | 'mentor' | 'admin';
    userDetails: UserDetailsDto | null;
};

export type StudentDetailsDto = {
    id: string;
    studentNumber: string;
    studentType: StudentType;
    admissionDate: string;
    otherDetails: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserStudentDetailsDto = {
    id: string;
    email: string | null;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: 'student' | 'mentor' | 'admin';
    userDetails: UserDetailsDto | null;
    studentDetails: StudentDetailsDto | null;
};

export type StaffDetailsDto = {
    id: string;
    employeeNumber: number;
    department: string;
    position: string;
    otherDetails: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserStaffDetailsDto = {
    id: string;
    email: string | null;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: 'student' | 'mentor' | 'admin';
    userDetails: UserDetailsDto | null;
    staffDetails: StaffDetailsDto | null;
};

export type UpdateStudentDetailsDto = {
    studentNumber?: string;
    studentType?: StudentType;
    admissionDate?: string;
    otherDetails?: {
        [key: string]: unknown;
    };
};

export type UpdateUserDto = {
    firstName?: string;
    middleName?: string | null;
    lastName?: string;
};

export type UpdateUserDetailsDto = {
    dateJoined?: string;
    dob?: string | null;
    gender?: string | null;
};

export type UpdateUserStudentDto = {
    specificDetails?: UpdateStudentDetailsDto;
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type UpdateStaffDetailsDto = {
    employeeNumber?: number;
    department?: string;
    position?: string;
    otherDetails?: {
        [key: string]: unknown;
    };
};

export type UpdateUserStaffDto = {
    specificDetails?: UpdateStaffDetailsDto;
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type UpdateUserBaseDto = {
    user?: UpdateUserDto;
    userDetails?: UpdateUserDetailsDto;
};

export type PaginationMetaDto = {
    isFirstPage: boolean;
    isLastPage: boolean;
    currentPage: number;
    previousPage: number | null;
    nextPage: number | null;
    pageCount: number;
    totalCount: number;
};

export type UserAccountDto = {
    id: string;
    authUid: string;
    email: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UserWithRelations = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    disabledAt: string | null;
    deletedAt: string | null;
    userAccount: UserAccountDto | null;
    userDetails: UserDetailsDto | null;
};

export type PaginatedUsersDto = {
    meta: PaginationMetaDto;
    users: Array<UserWithRelations>;
};

export type CreateCourseFullDto = {
    courseCode: string;
    name: string;
    description?: string | null;
    units: number;
    type: string;
    majorIds?: Array<string>;
    prereqIds?: Array<string>;
    coreqIds?: Array<string>;
};

export type CourseRelationDto = {
    id: string;
    courseCode: string;
    name: string;
};

export type CourseFullDto = {
    id: string;
    courseCode: string;
    name: string;
    description: string | null;
    units: number;
    type: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    prereqs: Array<CourseRelationDto>;
    coreqs: Array<CourseRelationDto>;
};

export type PaginatedCoursesDto = {
    meta: PaginationMetaDto;
    /**
     * List of courses for the current page
     */
    courses: Array<CourseFullDto>;
};

export type UpdateCourseDto = {
    courseCode?: string;
    name?: string;
    description?: string | null;
    units?: number;
    type?: string;
    majorIds?: Array<string>;
    prereqIds?: Array<string>;
    coreqIds?: Array<string>;
};

export type EnrollmentStatus = 'draft' | 'upcoming' | 'active' | 'extended' | 'closed' | 'canceled' | 'archived';

export type EnrollmentPeriodDto = {
    id: string;
    startYear: number;
    endYear: number;
    term: number;
    startDate: string;
    endDate: string;
    status: EnrollmentStatus;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type Days = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday';

export type UserDto = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    disabledAt: string | null;
    deletedAt: string | null;
};

export type DetailedCourseSectionDto = {
    id: string;
    name: string;
    maxSlot: number;
    startSched: string;
    endSched: string;
    days: Array<Days>;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    mentor: UserDto | null;
    mentorId: string | null;
    availableSlots?: number | null;
};

export type CustomDetailedCourseOfferingDto = {
    id: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    enrollmentPeriod?: EnrollmentPeriodDto | null;
    courseSections: Array<DetailedCourseSectionDto>;
    periodId: string;
};

export type CourseDto = {
    id: string;
    courseCode: string;
    name: string;
    description: string | null;
    units: number;
    type: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type DetailedModulesDto = {
    id: string;
    title: string;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    courseOffering: CustomDetailedCourseOfferingDto | null;
    course: CourseDto | null;
};

export type PaginatedModulesDto = {
    meta: PaginationMetaDto;
    modules: Array<DetailedModulesDto>;
};

export type UpdateModuleDto = {
    title?: string;
};

export type ModuleDto = {
    id: string;
    title: string;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type ModuleSection = {
    id: string;
    moduleId: string;
    parentSectionId: string | null;
    prerequisiteSectionId: string | null;
    title: string;
    order: number | null;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type ContentType = 'LESSON' | 'ASSIGNMENT';

export type RubricTemplate = {
    id: string;
    name: string;
    description: string | null;
    tags: Array<string>;
    criteriaJson: {
        [key: string]: unknown;
    } | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type AssignmentMode = 'INDIVIDUAL' | 'GROUP';

export type Assignment = {
    id: string;
    moduleContentId: string;
    rubricTemplate?: RubricTemplate | null;
    rubricTemplateId: string | null;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type ProgressStatus = 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETED';

export type ContentProgress = {
    id: string;
    studentId: string;
    moduleId: string;
    moduleContentId: string;
    status: ProgressStatus;
    completedAt: string | null;
    lastAccessedAt: string | null;
    createdAt: string;
    updatedAt: string;
};

export type ModuleContent = {
    id: string;
    moduleSection?: ModuleSection;
    moduleSectionId: string;
    contentType: ContentType;
    title: string;
    subtitle: string | null;
    content: Array<{
        [key: string]: unknown;
    }>;
    order: number;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    assignment?: Assignment | null;
    studentProgress?: Array<ContentProgress>;
};

export type ModuleTreeLessonItemDto = {
    id: string;
    moduleSectionId: string;
    title: string;
    subtitle: string | null;
    order: number;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    studentProgress?: Array<ContentProgress>;
    readonly contentType: string;
};

export type ModuleTreeAssignmentItemDto = {
    id: string;
    moduleSectionId: string;
    title: string;
    subtitle: string | null;
    order: number;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    studentProgress?: Array<ContentProgress>;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
    deletedAt: string | null;
    readonly contentType: string;
};

export type ModuleTreeSectionDto = {
    id: string;
    moduleId: string;
    parentSectionId: string | null;
    prerequisiteSectionId: string | null;
    title: string;
    order: number | null;
    publishedAt: string | null;
    unpublishedAt: string | null;
    subsections?: Array<ModuleTreeSectionDto> | null;
    moduleContents: Array<({
        contentType: 'LESSON';
    } & ModuleTreeLessonItemDto) | ({
        contentType: 'ASSIGNMENT';
    } & ModuleTreeAssignmentItemDto)>;
};

export type ModuleTreeDto = {
    id: string;
    title: string;
    courseId: string | null;
    publishedAt: string | null;
    unpublishedAt: string | null;
    moduleSections?: Array<ModuleTreeSectionDto>;
};

export type ModuleProgressOverview = {
    moduleId: string;
    moduleTitle: string;
    completedContentItems: number;
    totalContentItems: number;
    notStartedContentItems: number;
    overdueAssignmentsCount: number;
    progressPercentage: number;
    status: {
        [key: string]: unknown;
    };
    lastAccessedAt?: string | null;
    completedStudentsCount: number;
    totalStudentsCount: number;
    moduleCompletionPercentage: number;
};

export type ContentItemProgress = {
    id: string;
    title: string;
    status: {
        [key: string]: unknown;
    };
    completedAt?: string | null;
    lastAccessedAt?: string | null;
    completedStudentsCount: number;
    totalStudentsCount: number;
    completionPercentage: number;
};

export type ContentSectionProgress = {
    id: string;
    title: string;
    contentItems: Array<ContentItemProgress>;
    completedContentItems: number;
    totalContentItems: number;
    progressPercentage: number;
    completedStudentsCount: number;
    totalStudentsCount: number;
    completionPercentage: number;
};

export type ModuleProgressDetail = {
    moduleId: string;
    moduleTitle: string;
    sections: Array<ContentSectionProgress>;
    overallProgress: {
        completedContentItems: number;
        totalContentItems: number;
        progressPercentage: number;
        status: {
            [key: string]: unknown;
        };
        completedStudentsCount: number;
        totalStudentsCount: number;
        moduleCompletionPercentage: number;
    };
};

export type StudentProgressStats = {
    studentId: string;
    studentName: string;
    completedModules: number;
    totalModules: number;
    averageProgress: number;
    lastActivity: string | null;
};

export type DashboardProgress = {
    studentProgress: Array<ModuleProgressOverview>;
    overallStats?: {
        totalStudents: number;
        averageProgress: number;
        completedModules: number;
        inProgressModules: number;
        notStartedModules: number;
    };
    studentStats?: Array<StudentProgressStats>;
};

export type CreateDetailedGroupDto = {
    groupNumber: number;
    groupName?: string | null;
    /**
     * List of student IDs to assign as member
     */
    members: Array<string>;
};

export type StudentInfoDto = {
    firstName: string;
    lastName: string;
};

export type GroupMemberDto = {
    studentId: string;
    student: StudentInfoDto;
};

export type DetailedGroupDto = {
    id: string;
    groupNumber: number;
    groupName: string | null;
    members: Array<GroupMemberDto>;
};

export type UpdateGroupDto = {
    groupNumber?: number;
    groupName?: string | null;
    /**
     * List of student IDs to assign as member
     */
    members?: Array<string>;
};

export type NotificationCountDto = {
    total: number;
    read: number;
    unread: number;
};

export type NotificationItemDto = {
    id: string;
    title: string;
    content: string;
    role: Array<Role>;
    createdAt: string;
    userId?: string;
    isRead: boolean;
};

export type PaginatedNotificationDto = {
    meta: PaginationMetaDto;
    notifications: Array<NotificationItemDto>;
};

export type NotificationMarkRead = {
    notificationIds: Array<string>;
};

export type UserStatus = 'active' | 'disabled' | 'deleted';

export type AuthMetadataDto = {
    role?: Role;
    status?: UserStatus;
    user_id?: string;
};

export type BillType = 'academic' | 'administrative' | 'facilities' | 'studentServices' | 'activities' | 'penalties';

export type PaymentScheme = 'full' | 'installment1' | 'installment2';

export type BillingCostBreakdown = {
    cost: string;
    name: string;
    category: string;
};

export type CreateBillingTypedBreakdownDto = {
    payerName: string;
    payerEmail: string;
    billType: BillType;
    paymentScheme: PaymentScheme;
    totalAmount: string;
    costBreakdown: Array<BillingCostBreakdown>;
};

export type CreateBillingDto = {
    dueDates: Array<string>;
    bill: CreateBillingTypedBreakdownDto;
    userId?: string;
};

export type BillDto = {
    id: string;
    invoiceId: number;
    payerName: string;
    payerEmail: string;
    billType: BillType;
    paymentScheme: PaymentScheme;
    totalAmount: string;
    costBreakdown: {
        [key: string]: unknown;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type BillItemDto = {
    id: string;
    invoiceId: number;
    payerName: string;
    payerEmail: string;
    billType: BillType;
    paymentScheme: PaymentScheme;
    totalAmount: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    totalPaid: string;
    status: 'unpaid' | 'partial' | 'paid' | 'overpaid';
    totalInstallments: number;
    paidInstallments: number;
    installmentDueDates: Array<string>;
};

export type PaginatedBillsDto = {
    meta: PaginationMetaDto;
    bills: Array<BillItemDto>;
};

export type DetailedBillDto = {
    id: string;
    invoiceId: number;
    payerName: string;
    payerEmail: string;
    billType: BillType;
    paymentScheme: PaymentScheme;
    totalAmount: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    totalPaid: string;
    status: 'unpaid' | 'partial' | 'paid' | 'overpaid';
    costBreakdown: Array<BillingCostBreakdown>;
};

export type UpdateBillDto = {
    payerName?: string;
    payerEmail?: string;
    billType?: BillType;
    paymentScheme?: PaymentScheme;
    totalAmount?: string;
    costBreakdown?: {
        [key: string]: unknown;
    };
};

export type BillInstallmentItemDto = {
    id: string;
    name: string;
    installmentOrder: number;
    amountToPay: string;
    dueAt: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    totalPaid: string;
    status: 'unpaid' | 'partial' | 'paid' | 'overpaid';
};

export type InitiatePaymentDto = {
    installmentId: string;
    installmentOrder: number;
    description?: string;
    statementDescriptor?: string;
    amount: number;
};

export type PaymentIntentAttributesDto = {
    amount: number;
    capture_type: string;
    client_key: string;
    created_at: number;
    currency: string;
    description: string;
    last_payment_error?: string | null;
    livemode: boolean;
    metadata?: {
        [key: string]: unknown;
    } | null;
    next_action?: {
        [key: string]: unknown;
    } | null;
    original_amount: number;
    payment_method_allowed: Array<string>;
    payment_method_options?: {
        [key: string]: unknown;
    } | null;
    payments: Array<{
        [key: string]: unknown;
    }>;
    setup_future_usage?: string | null;
    statement_descriptor: string;
    status: string;
    updated_at: number;
};

export type PaymentIntentDataDto = {
    id: string;
    type: string;
    attributes: PaymentIntentAttributesDto;
};

export type PaymentIntentResponseDto = {
    data: PaymentIntentDataDto;
};

export type PaymentType = 'card' | 'paymaya' | 'gcash' | 'qrph' | 'manual';

export type CreatePayment = {
    amountPaid: string;
    paymentType: PaymentType;
    notes: string;
    paymentDate: string;
    paymongoData?: {
        [key: string]: unknown;
    } | null;
};

export type CreatePaymentDto = {
    payment: CreatePayment;
    installmentId?: string;
    description?: string;
    statementDescriptor?: string;
};

export type BillPaymentDto = {
    id: string;
    installmentOrder: number;
    amountPaid: string;
    paymentType: PaymentType;
    notes: string;
    paymentDate: string;
    paymongoData: {
        [key: string]: unknown;
    } | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UpdateBillPaymentDto = {
    installmentOrder?: number;
    amountPaid?: string;
    paymentType?: PaymentType;
    notes?: string;
    paymentDate?: string;
    paymongoData?: {
        [key: string]: unknown;
    } | null;
};

export type CreateProgramDto = {
    programCode: string;
    name: string;
    description: string;
    yearDuration: number;
};

export type Program = {
    id: string;
    programCode: string;
    name: string;
    description: string;
    yearDuration: number;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type ProgramDto = {
    id: string;
    programCode: string;
    name: string;
    description: string;
    yearDuration: number;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type PaginatedProgramsDto = {
    meta: PaginationMetaDto;
    programs: Array<ProgramDto>;
};

export type MajorItemDto = {
    id: string;
    majorCode: string;
    name: string;
    description: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    programId: string;
};

export type PaginatedMajorsDto = {
    meta: PaginationMetaDto;
    majors: Array<MajorItemDto>;
};

export type UpdateProgramDto = {
    programCode?: string;
    name?: string;
    description?: string;
    yearDuration?: number;
};

export type Turn = {
    role: 'user' | 'model';
    content: string;
};

export type PromptDto = {
    question: string;
    sessionHistory?: Array<Turn>;
};

export type ChatbotResponseDto = {
    response: string;
};

export type CreateEnrollmentPeriodItemDto = {
    startYear: number;
    endYear: number;
    term: number;
    startDate: string;
    endDate: string;
    status: EnrollmentStatus;
    pricingGroupId: string;
};

export type PaginatedEnrollmentPeriodsDto = {
    meta: PaginationMetaDto;
    /**
     * List of enrollment periods for the current page
     */
    enrollments: Array<EnrollmentPeriodDto>;
};

export type PricingGroupDto = {
    id: string;
    name: string;
    amount: string;
    enabled: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type EnrollmentPeriodItemDto = {
    id: string;
    startYear: number;
    endYear: number;
    term: number;
    startDate: string;
    endDate: string;
    status: EnrollmentStatus;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    pricingGroup?: PricingGroupDto;
};

export type UpdateEnrollmentPeriodItemDto = {
    startYear?: number;
    endYear?: number;
    term?: number;
    startDate?: string;
    endDate?: string;
    pricingGroupId: string;
};

export type UpdateEnrollmentStatusDto = {
    status: EnrollmentStatus;
};

export type CreateCourseOfferingDto = {
    courseId: string;
};

export type CourseOffering = {
    id: string;
    courseId: string;
    periodId: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type CreateCourseOfferingCurriculumDto = {
    curriculumId: string;
};

export type CourseEnrollmentStatus = 'enlisted' | 'finalized' | 'enrolled' | 'completed' | 'incomplete' | 'dropped' | 'failed';

export type DetailedCourseOfferingSubsetDto = {
    id: string;
    course: CourseDto;
};

export type DetailedCourseEnrollmentDto = {
    id: string;
    status: CourseEnrollmentStatus;
    startedAt: string;
    completedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    studentId: string;
    courseOfferingId: string;
    courseSectionId: string;
    courseSection?: DetailedCourseSectionDto;
    courseOffering?: DetailedCourseOfferingSubsetDto;
};

export type DetailedCourseOfferingDto = {
    id: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    course: CourseDto;
    courseSections: Array<DetailedCourseSectionDto>;
    courseEnrollments: Array<DetailedCourseEnrollmentDto>;
    periodId: string;
};

export type PaginatedCourseOfferingsDto = {
    meta: PaginationMetaDto;
    /**
     * List of course offerings for the current page
     */
    courseOfferings: Array<DetailedCourseOfferingDto>;
};

export type CourseOfferingDto = {
    id: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type CourseSectionDto = {
    id: string;
    name: string;
    maxSlot: number;
    startSched: string;
    endSched: string;
    days: Array<Days>;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type PaginatedCourseSectionsDto = {
    meta: PaginationMetaDto;
    /**
     * List of course sections for the current page
     */
    courseSections: Array<CourseSectionDto>;
};

export type CreateCourseSectionFullDto = {
    name: string;
    maxSlot: number;
    days: Array<Days>;
    startSched: string;
    endSched: string;
    mentorId?: string;
};

export type CourseOfferingWithCourseAndPeriod = {
    id: string;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    course: CourseDto;
    enrollmentPeriod: EnrollmentPeriodDto;
};

export type CourseSectionWithCourseOfferingDto = {
    id: string;
    name: string;
    maxSlot: number;
    startSched: string;
    endSched: string;
    days: Array<Days>;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    courseOffering: CourseOfferingWithCourseAndPeriod;
};

export type UpdateCourseSectionDto = {
    [key: string]: unknown;
};

export type StudentDto = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
};

export type CustomDetailedCourseEnrollmentDto = {
    id: string;
    status: CourseEnrollmentStatus;
    startedAt: string;
    completedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    studentId: string;
    courseOfferingId: string;
    courseSectionId: string;
    courseSection?: DetailedCourseSectionDto;
    courseOffering?: DetailedCourseOfferingSubsetDto;
    student: StudentDto;
};

export type PaginatedCourseEnrollmentsDto = {
    meta: PaginationMetaDto;
    /**
     * List of course enrollments for the current page
     */
    enrollments: Array<CustomDetailedCourseEnrollmentDto>;
};

export type StudentIdentifierDto = {
    studentId?: string;
};

export type CourseEnrollmentDto = {
    id: string;
    status: CourseEnrollmentStatus;
    startedAt: string;
    completedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type FinalizeEnrollmentDto = {
    paymentScheme: PaymentScheme;
    studentId?: string;
};

export type AssignmentItemDto = {
    id: string;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    rubricTemplateId?: string | null;
    contentType: ContentType;
    title: string;
    subtitle: string | null;
    content: Array<{
        [key: string]: unknown;
    }>;
    order: number;
    publishedAt: string | null;
    unpublishedAt: string | null;
};

export type LessonItemDto = {
    id: string;
    contentType: ContentType;
    title: string;
    subtitle: string | null;
    content: Array<{
        [key: string]: unknown;
    }>;
    order: number;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type ConnectModuleSectionDto = {
    id: string;
};

export type CreateModuleContentModuleSectionRelationInputDto = {
    connect: ConnectModuleSectionDto;
};

export type CreateModuleContentDto = {
    moduleSection: CreateModuleContentModuleSectionRelationInputDto;
    contentType?: ContentType;
    title: string;
    subtitle?: string | null;
    content: Array<{
        [key: string]: unknown;
    }>;
    publishedAt?: string | null;
    unpublishedAt?: string | null;
};

export type UpdateModuleContentModuleSectionRelationInputDto = {
    connect: ConnectModuleSectionDto;
};

export type UpdateAssignmentItemDto = {
    mode?: AssignmentMode;
    maxScore?: number;
    weightPercentage?: number;
    maxAttempts?: number | null;
    allowLateSubmission?: boolean | null;
    latePenalty?: number | null;
    dueDate?: string | null;
    gracePeriodMinutes?: number | null;
    rubricTemplateId?: string | null;
    moduleSection?: UpdateModuleContentModuleSectionRelationInputDto;
    title?: string;
    subtitle?: string | null;
    content?: Array<{
        [key: string]: unknown;
    }>;
    order?: number;
    publishedAt?: string | null;
    unpublishedAt?: string | null;
    contentType: 'ASSIGNMENT';
};

export type UpdateLessonItemDto = {
    moduleSection?: UpdateModuleContentModuleSectionRelationInputDto;
    title?: string;
    subtitle?: string | null;
    content?: Array<{
        [key: string]: unknown;
    }>;
    order?: number;
    publishedAt?: string | null;
    unpublishedAt?: string | null;
    contentType: 'LESSON';
};

export type PaginatedModuleContentDto = {
    meta: PaginationMetaDto;
    moduleContents: Array<({
        contentType: 'LESSON';
    } & LessonItemDto) | ({
        contentType: 'ASSIGNMENT';
    } & AssignmentItemDto)>;
};

export type MessageDto = {
    message: string;
};

export type ModuleContentInfoDto = {
    id: string;
    moduleSectionId: string;
    contentType: ContentType;
    order: number;
};

export type DetailedContentProgressDto = {
    id: string;
    completedAt: string | null;
    studentId: string;
    moduleContent: ModuleContentInfoDto;
};

export type CreateMajorDto = {
    majorCode: string;
    name: string;
    description: string;
};

export type CreateProgramMajorDto = {
    major: CreateMajorDto;
    programId: string;
};

export type MajorDto = {
    id: string;
    majorCode: string;
    name: string;
    description: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UpdateMajorDto = {
    majorCode?: string;
    name?: string;
    description?: string;
};

export type Major = {
    id: string;
    programId: string;
    majorCode: string;
    name: string;
    description: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type CreateCurriculumDto = {
    icon?: string | null;
    name?: string | null;
    description?: string | null;
};

export type CreateCurriculumCourseItemDto = {
    courseId: string;
    order: number;
    year: number;
    semester: number;
};

export type CreateCurriculumWithCoursesDto = {
    majorId: string;
    curriculum: CreateCurriculumDto;
    courses: Array<CreateCurriculumCourseItemDto>;
};

export type CurriculumDto = {
    id: string;
    icon: string | null;
    name: string | null;
    description: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type CurriculumItemDto = {
    id: string;
    icon: string | null;
    name: string | null;
    description: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    program: ProgramDto;
    major: MajorDto;
};

export type CurriculumCourseItemDto = {
    id: string;
    order: number;
    year: number;
    semester: number;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    course: CourseDto;
};

export type CurriculumWithCoursesDto = {
    curriculum: CurriculumItemDto;
    courses: Array<CurriculumCourseItemDto>;
};

export type UpdateCurriculumDto = {
    icon?: string | null;
    name?: string | null;
    description?: string | null;
};

export type UpdateCurriculumCourseItemDto = {
    courseId: string;
    order: number;
    year: number;
    semester: number;
};

export type UpdateCurriculumWithCourseDto = {
    majorId?: string;
    curriculum: UpdateCurriculumDto;
    courses: Array<UpdateCurriculumCourseItemDto>;
};

export type SubmissionState = 'DRAFT' | 'SUBMITTED' | 'UNDER_REVIEW' | 'GRADED' | 'RETURNED';

export type SubmitAssignmentDto = {
    state: SubmissionState;
    content: Array<{
        [key: string]: unknown;
    }>;
};

export type AssignmentStatsDto = {
    submitted: number;
    graded: number;
    total: number;
};

export type AdminAssignmentItemDto = {
    id: string;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    rubricTemplateId: string | null;
    title: string;
    subtitle: string | null;
    content: Array<{
        [key: string]: unknown;
    }>;
    stats: AssignmentStatsDto;
};

export type PaginatedAssignmentDto = {
    meta: PaginationMetaDto;
    assignments: Array<AdminAssignmentItemDto>;
};

export type SubmissionAttachmentDto = {
    id: string;
    name: string;
    url: string;
    type: string;
    size: number;
    createdAt: string;
};

export type GradeRecordItemDto = {
    id: string;
    rawScore: string;
    finalScore: string;
    grade: string;
    gradedAt: string;
};

export type MentorAssignmentSubmissionItemDto = {
    id: string;
    submittedAt: string | null;
    attachments?: Array<SubmissionAttachmentDto>;
    grade?: GradeRecordItemDto | null;
    student: UserDto;
};

export type MentorAssignmentItemDto = {
    id: string;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    rubricTemplateId: string | null;
    title: string;
    subtitle: string | null;
    content: Array<{
        [key: string]: unknown;
    }>;
    stats: AssignmentStatsDto;
    submissions: Array<MentorAssignmentSubmissionItemDto>;
};

export type PaginatedMentorAssignmentDto = {
    meta: PaginationMetaDto;
    assignments: Array<MentorAssignmentItemDto>;
};

export type GradeRecordDto = {
    id: string;
    rawScore: string;
    finalScore: string;
    grade: string;
    feedback: string | null;
    rubricEvaluationDetails: Array<{
        [key: string]: unknown;
    }>;
    gradedAt: string;
    updatedAt: string;
};

export type StudentAssignmentSubmissionItemDto = {
    id: string;
    groupSnapshot: {
        [key: string]: unknown;
    } | null;
    state: SubmissionState;
    content: Array<{
        [key: string]: unknown;
    }>;
    submittedAt: string | null;
    attemptNumber: number;
    lateDays: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    attachments?: Array<SubmissionAttachmentDto>;
    grade?: GradeRecordDto | null;
};

export type StudentAssignmentItemDto = {
    id: string;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    rubricTemplateId: string | null;
    title: string;
    subtitle: string | null;
    content: Array<{
        [key: string]: unknown;
    }>;
    submissions: Array<StudentAssignmentSubmissionItemDto>;
};

export type PaginatedStudentAssignmentDto = {
    meta: PaginationMetaDto;
    assignments: Array<StudentAssignmentItemDto>;
};

export type AssignmentDto = {
    id: string;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UpdateAssignmentConfigDto = {
    mode?: AssignmentMode;
    maxScore?: number;
    weightPercentage?: number;
    maxAttempts?: number | null;
    allowLateSubmission?: boolean | null;
    latePenalty?: number | null;
    dueDate?: string | null;
    gracePeriodMinutes?: number | null;
    rubricTemplateId?: string | null;
};

export type CreateModuleSectionDto = {
    title: string;
    order?: number | null;
    parentSectionId?: string | null;
    prerequisiteSectionId?: string | null;
};

export type DetailedModuleSectionDto = {
    id: string;
    title: string;
    order: number | null;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    prerequisiteSectionId?: string | null;
    parentSectionId?: string | null;
    moduleId: string;
};

export type UpdateModuleSectionDto = {
    [key: string]: unknown;
};

export type CreateSubmissionAttachmentDto = {
    name: string;
    url: string;
    type: string;
    size: number;
};

export type CreateAssignmentSubmissionAttachmentsRelationInputDto = {
    create: Array<CreateSubmissionAttachmentDto>;
};

export type CreateAssignmentSubmissionDto = {
    groupSnapshot?: {
        [key: string]: unknown;
    } | null;
    state: SubmissionState;
    content: Array<{
        [key: string]: unknown;
    }>;
    submittedAt?: string | null;
    lateDays?: number | null;
    attachments?: CreateAssignmentSubmissionAttachmentsRelationInputDto;
};

export type AssignmentSubmissionDto = {
    id: string;
    groupSnapshot: {
        [key: string]: unknown;
    } | null;
    state: SubmissionState;
    content: Array<{
        [key: string]: unknown;
    }>;
    submittedAt: string | null;
    attemptNumber: number;
    lateDays: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type GradeSubmissionDto = {
    studentId: string;
    grade: number;
};

export type AssignmentSubmissionDetailsDto = {
    id: string;
    groupSnapshot: {
        [key: string]: unknown;
    } | null;
    state: SubmissionState;
    content: Array<{
        [key: string]: unknown;
    }>;
    submittedAt: string | null;
    attemptNumber: number;
    lateDays: number | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    gradeRecord?: GradeRecordDto | null;
    student: UserDto;
    assignment?: Assignment;
    attachments?: Array<SubmissionAttachmentDto>;
};

export type CurrentGradeDto = {
    id: string;
    rawScore: string;
    finalScore: string;
    grade: string;
    feedback: string | null;
    rubricEvaluationDetails: Array<{
        [key: string]: unknown;
    }>;
    gradedAt: string;
};

export type GradableAssignmentItem = {
    /**
     * The unique ID of the ModuleContent record.
     */
    contentId: string;
    /**
     * The module id of the ModuleContent record.
     */
    moduleId: string;
    /**
     * The title of the gradable item.
     */
    title: string;
    moduleContentId: string;
    rubricTemplate?: RubricTemplate | null;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
};

export type StudentViewGradeEntryDto = {
    currentGrade?: CurrentGradeDto | null;
    submission: Array<AssignmentSubmissionDto>;
    gradableItem: GradableAssignmentItem;
};

export type GradebookForStudentDto = {
    meta: PaginationMetaDto;
    student: UserDto;
    gradeRecords: Array<StudentViewGradeEntryDto>;
};

export type BasicAssignmentSubmissionItemWithGrade = {
    id: string;
    groupSnapshot: {
        [key: string]: unknown;
    } | null;
    state: SubmissionState;
    submittedAt: string | null;
    lateDays: number | null;
    student: UserDto;
    currentGrade?: CurrentGradeDto | null;
};

export type FullGradableAssignmentItem = {
    /**
     * The unique ID of the ModuleContent record.
     */
    contentId: string;
    /**
     * The module id of the ModuleContent record.
     */
    moduleId: string;
    /**
     * The title of the gradable item.
     */
    title: string;
    rubricTemplate?: RubricTemplate | null;
    mode: AssignmentMode;
    maxScore: number;
    weightPercentage: number;
    maxAttempts: number | null;
    allowLateSubmission: boolean | null;
    latePenalty: number | null;
    dueDate: string | null;
    gracePeriodMinutes: number | null;
    /**
     * The submissions of the assignment.
     */
    submissions: Array<BasicAssignmentSubmissionItemWithGrade>;
};

export type GradebookForMentorDto = {
    meta: PaginationMetaDto;
    gradeRecords: Array<FullGradableAssignmentItem>;
};

export type GradeAssignmentSubmissionDto = {
    /**
     * The raw score given to the submission before any penalties.
     */
    rawScore?: string;
    feedback?: string | null;
    rubricEvaluationDetails?: Array<{
        [key: string]: unknown;
    }>;
};

export type UpdateGradeRecordDto = {
    rawScore?: string;
    finalScore?: string;
    grade?: string;
    feedback?: string | null;
    rubricEvaluationDetails?: Array<{
        [key: string]: unknown;
    }>;
};

export type Module = {
    id: string;
    title: string;
    courseId: string | null;
    courseOfferingId: string | null;
    publishedAt: string | null;
    unpublishedAt: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type Group = {
    id: string;
    moduleId: string;
    module?: Module;
    groupNumber: number;
    groupName: string | null;
    createdAt: string;
    updatedAt: string;
};

export type SubmissionAttachment = {
    id: string;
    assignmentSubmissionId: string | null;
    name: string;
    url: string;
    type: string;
    size: number;
    createdAt: string;
};

export type AssignmentSubmission = {
    id: string;
    assignment?: Assignment;
    assignmentId: string;
    studentId: string;
    groupId: string | null;
    group?: Group | null;
    groupSnapshot: {
        [key: string]: unknown;
    } | null;
    state: SubmissionState;
    content: Array<{
        [key: string]: unknown;
    }>;
    submittedAt: string | null;
    attemptNumber: number;
    lateDays: number | null;
    attachments?: Array<SubmissionAttachment>;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type GradeRecord = {
    id: string;
    studentId: string;
    assignmentSubmission?: AssignmentSubmission | null;
    assignmentSubmissionId: string | null;
    rawScore: string;
    finalScore: string;
    grade: string;
    feedback: string | null;
    rubricEvaluationDetails: Array<{
        [key: string]: unknown;
    }>;
    gradedAt: string;
    updatedAt: string;
};

export type PricingType = 'tuition' | 'lab' | 'misc' | 'other';

export type CreatePricingDto = {
    type: PricingType;
    name: string;
    amount: string;
};

export type PricingDto = {
    id: string;
    type: PricingType;
    name: string;
    amount: string;
    enabled: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type PaginatedPricingDto = {
    meta: PaginationMetaDto;
    pricings: Array<PricingDto>;
};

export type UpdatePricingDto = {
    type?: PricingType;
    name?: string;
    amount?: string;
};

export type CreatePricingGroupDto = {
    name: string;
    amount: string;
};

export type CreatePricingGroupItemDto = {
    group: CreatePricingGroupDto;
    pricings: Array<string>;
};

export type PricingGroupItemDto = {
    id: string;
    name: string;
    amount: string;
    enabled: boolean;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    prices: Array<PricingDto>;
};

export type PaginatedPricingGroupDto = {
    meta: PaginationMetaDto;
    pricingGroups: Array<PricingGroupItemDto>;
};

export type UpdatePricingGroupDto = {
    name?: string;
    amount?: string;
};

export type UpdatePricingGroupItemDto = {
    group: UpdatePricingGroupDto;
    pricings?: Array<string>;
};

export type CreateAppointmentItemDto = {
    title: string;
    startAt: string;
    endAt: string;
    gmeetLink?: string | null;
    cancelReason?: string | null;
    courseOfferingId: string;
    studentId: string;
    mentorId: string;
    description: string;
};

export type AppointmentStatus = 'booked' | 'approved' | 'cancelled' | 'rescheduled' | 'finished' | 'extended';

export type AppointmentCourseDto = {
    id: string;
    courseCode: string;
    name: string;
};

export type AppointmentUserDto = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
};

export type AppointmentItemDto = {
    id: string;
    title: string;
    description: string;
    startAt: string;
    endAt: string;
    status: AppointmentStatus;
    gmeetLink: string | null;
    cancelReason: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    course: AppointmentCourseDto;
    student: AppointmentUserDto;
    mentor: AppointmentUserDto;
};

export type BookedAppointment = {
    id: string;
    startAt: string;
    endAt: string;
};

export type PaginatedAppointmentDto = {
    meta: PaginationMetaDto;
    appointments: Array<AppointmentItemDto>;
};

export type BookedAppointmentDto = {
    id: string;
    startAt: string;
    endAt: string;
};

export type AppointmentSectionDto = {
    id: string;
    startSched: string;
    endSched: string;
    days: Array<Days>;
};

export type AppointmentDetailsDto = {
    id: string;
    title: string;
    description: string;
    startAt: string;
    endAt: string;
    status: AppointmentStatus;
    gmeetLink: string | null;
    cancelReason: string | null;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
    course: AppointmentCourseDto;
    section: AppointmentSectionDto;
    student: AppointmentUserDto;
    mentor: AppointmentUserDto;
};

export type UpdateAppointmentItemDto = {
    title?: string;
    description?: string;
    gmeetLink?: string | null;
};

export type UpdateAppointmentStatusDto = {
    startAt?: string;
    endAt?: string;
    cancelReason?: string | null;
    status: AppointmentStatus;
};

export type TestControllerTestStudentData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/student';
};

export type TestControllerTestStudentResponses = {
    200: string;
};

export type TestControllerTestStudentResponse = TestControllerTestStudentResponses[keyof TestControllerTestStudentResponses];

export type TestControllerTestAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/admin';
};

export type TestControllerTestAdminResponses = {
    200: string;
};

export type TestControllerTestAdminResponse = TestControllerTestAdminResponses[keyof TestControllerTestAdminResponses];

export type TestControllerTestData = {
    body: TestBodyDto;
    path: {
        id: string;
    };
    query: {
        page: number;
    };
    url: '/test/{id}';
};

export type TestControllerTestResponses = {
    201: string;
};

export type TestControllerTestResponse = TestControllerTestResponses[keyof TestControllerTestResponses];

export type UsersControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        role?: 'student' | 'mentor' | 'admin';
    };
    url: '/users';
};

export type UsersControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerFindAllError = UsersControllerFindAllErrors[keyof UsersControllerFindAllErrors];

export type UsersControllerFindAllResponses = {
    /**
     * List of users retrieved successfully
     */
    200: PaginatedUsersDto;
};

export type UsersControllerFindAllResponse = UsersControllerFindAllResponses[keyof UsersControllerFindAllResponses];

export type UsersControllerCreateData = {
    body: CreateUserFullDto;
    path?: never;
    query?: never;
    url: '/users';
};

export type UsersControllerCreateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateError = UsersControllerCreateErrors[keyof UsersControllerCreateErrors];

export type UsersControllerCreateResponses = {
    201: User;
};

export type UsersControllerCreateResponse = UsersControllerCreateResponses[keyof UsersControllerCreateResponses];

export type UsersControllerCreateStudentData = {
    body: CreateUserStudentDto;
    path?: never;
    query?: never;
    url: '/users/student';
};

export type UsersControllerCreateStudentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateStudentError = UsersControllerCreateStudentErrors[keyof UsersControllerCreateStudentErrors];

export type UsersControllerCreateStudentResponses = {
    201: User;
};

export type UsersControllerCreateStudentResponse = UsersControllerCreateStudentResponses[keyof UsersControllerCreateStudentResponses];

export type UsersControllerCreateStaffData = {
    body: CreateUserStaffDto;
    path?: never;
    query?: never;
    url: '/users/staff';
};

export type UsersControllerCreateStaffErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateStaffError = UsersControllerCreateStaffErrors[keyof UsersControllerCreateStaffErrors];

export type UsersControllerCreateStaffResponses = {
    201: User;
};

export type UsersControllerCreateStaffResponse = UsersControllerCreateStaffResponses[keyof UsersControllerCreateStaffResponses];

export type UsersControllerInviteUserData = {
    body: InviteUserDto;
    path?: never;
    query?: never;
    url: '/users/invite';
};

export type UsersControllerInviteUserErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerInviteUserError = UsersControllerInviteUserErrors[keyof UsersControllerInviteUserErrors];

export type UsersControllerInviteUserResponses = {
    201: User;
};

export type UsersControllerInviteUserResponse = UsersControllerInviteUserResponses[keyof UsersControllerInviteUserResponses];

export type UsersControllerGetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersControllerGetMeErrors = {
    401: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerGetMeError = UsersControllerGetMeErrors[keyof UsersControllerGetMeErrors];

export type UsersControllerGetMeResponses = {
    /**
     * Current user details fetched successfully
     */
    200: UserStudentDetailsDto | UserStaffDetailsDto;
};

export type UsersControllerGetMeResponse = UsersControllerGetMeResponses[keyof UsersControllerGetMeResponses];

export type UsersControllerUpdateOwnUserDetailsData = {
    body: UpdateUserBaseDto;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersControllerUpdateOwnUserDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateOwnUserDetailsError = UsersControllerUpdateOwnUserDetailsErrors[keyof UsersControllerUpdateOwnUserDetailsErrors];

export type UsersControllerUpdateOwnUserDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateOwnUserDetailsResponse = UsersControllerUpdateOwnUserDetailsResponses[keyof UsersControllerUpdateOwnUserDetailsResponses];

export type UsersControllerUpdateUserStudentDetailsData = {
    body: UpdateUserStudentDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/student';
};

export type UsersControllerUpdateUserStudentDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStudentDetailsError = UsersControllerUpdateUserStudentDetailsErrors[keyof UsersControllerUpdateUserStudentDetailsErrors];

export type UsersControllerUpdateUserStudentDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateUserStudentDetailsResponse = UsersControllerUpdateUserStudentDetailsResponses[keyof UsersControllerUpdateUserStudentDetailsResponses];

export type UsersControllerUpdateUserStaffDetailsData = {
    body: UpdateUserStaffDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/staff';
};

export type UsersControllerUpdateUserStaffDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStaffDetailsError = UsersControllerUpdateUserStaffDetailsErrors[keyof UsersControllerUpdateUserStaffDetailsErrors];

export type UsersControllerUpdateUserStaffDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateUserStaffDetailsResponse = UsersControllerUpdateUserStaffDetailsResponses[keyof UsersControllerUpdateUserStaffDetailsResponses];

export type UsersControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/users/{id}';
};

export type UsersControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerRemoveError = UsersControllerRemoveErrors[keyof UsersControllerRemoveErrors];

export type UsersControllerRemoveResponses = {
    /**
     * User deleted successfully
     */
    200: {
        message?: string;
    };
};

export type UsersControllerRemoveResponse = UsersControllerRemoveResponses[keyof UsersControllerRemoveResponses];

export type UsersControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerFindOneError = UsersControllerFindOneErrors[keyof UsersControllerFindOneErrors];

export type UsersControllerFindOneResponses = {
    200: UserWithRelations;
};

export type UsersControllerFindOneResponse = UsersControllerFindOneResponses[keyof UsersControllerFindOneResponses];

export type UsersControllerUpdateUserStatusData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}/status';
};

export type UsersControllerUpdateUserStatusErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserStatusError = UsersControllerUpdateUserStatusErrors[keyof UsersControllerUpdateUserStatusErrors];

export type UsersControllerUpdateUserStatusResponses = {
    /**
     * User status updated successfully
     */
    200: {
        message?: string;
    };
};

export type UsersControllerUpdateUserStatusResponse = UsersControllerUpdateUserStatusResponses[keyof UsersControllerUpdateUserStatusResponses];

export type CoursesControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/courses';
};

export type CoursesControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CoursesControllerFindAllError = CoursesControllerFindAllErrors[keyof CoursesControllerFindAllErrors];

export type CoursesControllerFindAllResponses = {
    200: PaginatedCoursesDto;
};

export type CoursesControllerFindAllResponse = CoursesControllerFindAllResponses[keyof CoursesControllerFindAllResponses];

export type CoursesControllerCreateData = {
    body: CreateCourseFullDto;
    path?: never;
    query?: never;
    url: '/courses';
};

export type CoursesControllerCreateErrors = {
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CoursesControllerCreateError = CoursesControllerCreateErrors[keyof CoursesControllerCreateErrors];

export type CoursesControllerCreateResponses = {
    201: CourseFullDto;
};

export type CoursesControllerCreateResponse = CoursesControllerCreateResponses[keyof CoursesControllerCreateResponses];

export type CoursesControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/courses/{id}';
};

export type CoursesControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CoursesControllerRemoveError = CoursesControllerRemoveErrors[keyof CoursesControllerRemoveErrors];

export type CoursesControllerRemoveResponses = {
    200: unknown;
};

export type CoursesControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CoursesControllerFindOneError = CoursesControllerFindOneErrors[keyof CoursesControllerFindOneErrors];

export type CoursesControllerFindOneResponses = {
    200: CourseFullDto;
};

export type CoursesControllerFindOneResponse = CoursesControllerFindOneResponses[keyof CoursesControllerFindOneResponses];

export type CoursesControllerUpdateData = {
    body: UpdateCourseDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CoursesControllerUpdateError = CoursesControllerUpdateErrors[keyof CoursesControllerUpdateErrors];

export type CoursesControllerUpdateResponses = {
    200: CourseFullDto;
};

export type CoursesControllerUpdateResponse = CoursesControllerUpdateResponses[keyof CoursesControllerUpdateResponses];

export type LmsControllerFindAllForStudentData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        /**
         * Filter modules by enrollment period ID
         */
        enrollmentPeriodId?: string;
    };
    url: '/modules/student';
};

export type LmsControllerFindAllForStudentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerFindAllForStudentError = LmsControllerFindAllForStudentErrors[keyof LmsControllerFindAllForStudentErrors];

export type LmsControllerFindAllForStudentResponses = {
    200: PaginatedModulesDto;
};

export type LmsControllerFindAllForStudentResponse = LmsControllerFindAllForStudentResponses[keyof LmsControllerFindAllForStudentResponses];

export type LmsControllerFindAllForMentorData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        /**
         * Filter modules by enrollment period ID
         */
        enrollmentPeriodId?: string;
    };
    url: '/modules/mentor';
};

export type LmsControllerFindAllForMentorErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerFindAllForMentorError = LmsControllerFindAllForMentorErrors[keyof LmsControllerFindAllForMentorErrors];

export type LmsControllerFindAllForMentorResponses = {
    200: PaginatedModulesDto;
};

export type LmsControllerFindAllForMentorResponse = LmsControllerFindAllForMentorResponses[keyof LmsControllerFindAllForMentorResponses];

export type LmsControllerFindAllForAdminData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        /**
         * Filter modules by enrollment period ID
         */
        enrollmentPeriodId?: string;
    };
    url: '/modules/admin';
};

export type LmsControllerFindAllForAdminErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerFindAllForAdminError = LmsControllerFindAllForAdminErrors[keyof LmsControllerFindAllForAdminErrors];

export type LmsControllerFindAllForAdminResponses = {
    200: PaginatedModulesDto;
};

export type LmsControllerFindAllForAdminResponse = LmsControllerFindAllForAdminResponses[keyof LmsControllerFindAllForAdminResponses];

export type LmsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/modules/{id}';
};

export type LmsControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerRemoveError = LmsControllerRemoveErrors[keyof LmsControllerRemoveErrors];

export type LmsControllerRemoveResponses = {
    /**
     * Module deleted successfully
     */
    200: {
        message?: string;
    };
};

export type LmsControllerRemoveResponse = LmsControllerRemoveResponses[keyof LmsControllerRemoveResponses];

export type LmsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{id}';
};

export type LmsControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerFindOneError = LmsControllerFindOneErrors[keyof LmsControllerFindOneErrors];

export type LmsControllerFindOneResponses = {
    200: DetailedModulesDto;
};

export type LmsControllerFindOneResponse = LmsControllerFindOneResponses[keyof LmsControllerFindOneResponses];

export type LmsControllerUpdateData = {
    body: UpdateModuleDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{id}';
};

export type LmsControllerUpdateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerUpdateError = LmsControllerUpdateErrors[keyof LmsControllerUpdateErrors];

export type LmsControllerUpdateResponses = {
    200: ModuleDto;
};

export type LmsControllerUpdateResponse = LmsControllerUpdateResponses[keyof LmsControllerUpdateResponses];

export type LmsControllerPublishData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{id}/publish';
};

export type LmsControllerPublishErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerPublishError = LmsControllerPublishErrors[keyof LmsControllerPublishErrors];

export type LmsControllerPublishResponses = {
    201: unknown;
};

export type LmsControllerUnpublishData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{id}/unpublish';
};

export type LmsControllerUnpublishErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerUnpublishError = LmsControllerUnpublishErrors[keyof LmsControllerUnpublishErrors];

export type LmsControllerUnpublishResponses = {
    201: unknown;
};

export type LmsControllerFindTodosData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        dueDateFrom?: string;
        dueDateTo?: string;
    };
    url: '/modules/todo';
};

export type LmsControllerFindTodosErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerFindTodosError = LmsControllerFindTodosErrors[keyof LmsControllerFindTodosErrors];

export type LmsControllerFindTodosResponses = {
    200: ModuleContent;
};

export type LmsControllerFindTodosResponse = LmsControllerFindTodosResponses[keyof LmsControllerFindTodosResponses];

export type LmsControllerFindModuleTreeData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{id}/tree';
};

export type LmsControllerFindModuleTreeErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsControllerFindModuleTreeError = LmsControllerFindModuleTreeErrors[keyof LmsControllerFindModuleTreeErrors];

export type LmsControllerFindModuleTreeResponses = {
    /**
     * Module tree retrieved successfully
     */
    200: ModuleTreeDto;
};

export type LmsControllerFindModuleTreeResponse = LmsControllerFindModuleTreeResponses[keyof LmsControllerFindModuleTreeResponses];

export type LmsControllerGetModuleProgressOverviewData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{id}/progress/overview';
};

export type LmsControllerGetModuleProgressOverviewResponses = {
    200: ModuleProgressOverview;
};

export type LmsControllerGetModuleProgressOverviewResponse = LmsControllerGetModuleProgressOverviewResponses[keyof LmsControllerGetModuleProgressOverviewResponses];

export type LmsControllerGetModuleProgressDetailData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{id}/progress/detail';
};

export type LmsControllerGetModuleProgressDetailResponses = {
    200: ModuleProgressDetail;
};

export type LmsControllerGetModuleProgressDetailResponse = LmsControllerGetModuleProgressDetailResponses[keyof LmsControllerGetModuleProgressDetailResponses];

export type LmsControllerGetDashboardProgressData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/modules/dashboard';
};

export type LmsControllerGetDashboardProgressResponses = {
    200: DashboardProgress;
};

export type LmsControllerGetDashboardProgressResponse = LmsControllerGetDashboardProgressResponses[keyof LmsControllerGetDashboardProgressResponses];

export type GroupControllerFindAllData = {
    body?: never;
    path: {
        moduleId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/groups';
};

export type GroupControllerFindAllErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GroupControllerFindAllError = GroupControllerFindAllErrors[keyof GroupControllerFindAllErrors];

export type GroupControllerFindAllResponses = {
    200: Array<DetailedGroupDto>;
};

export type GroupControllerFindAllResponse = GroupControllerFindAllResponses[keyof GroupControllerFindAllResponses];

export type GroupControllerCreateData = {
    body: CreateDetailedGroupDto;
    path: {
        moduleId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/groups';
};

export type GroupControllerCreateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GroupControllerCreateError = GroupControllerCreateErrors[keyof GroupControllerCreateErrors];

export type GroupControllerCreateResponses = {
    201: DetailedGroupDto;
};

export type GroupControllerCreateResponse = GroupControllerCreateResponses[keyof GroupControllerCreateResponses];

export type GroupControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{moduleId}/groups/{id}';
};

export type GroupControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GroupControllerRemoveError = GroupControllerRemoveErrors[keyof GroupControllerRemoveErrors];

export type GroupControllerRemoveResponses = {
    200: unknown;
};

export type GroupControllerUpdateData = {
    body: UpdateGroupDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{moduleId}/groups/{id}';
};

export type GroupControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GroupControllerUpdateError = GroupControllerUpdateErrors[keyof GroupControllerUpdateErrors];

export type GroupControllerUpdateResponses = {
    200: DetailedGroupDto;
};

export type GroupControllerUpdateResponse = GroupControllerUpdateResponses[keyof GroupControllerUpdateResponses];

export type NotificationsControllerSubscribeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/subscribe';
};

export type NotificationsControllerSubscribeResponses = {
    200: {
        [key: string]: unknown;
    };
};

export type NotificationsControllerSubscribeResponse = NotificationsControllerSubscribeResponses[keyof NotificationsControllerSubscribeResponses];

export type NotificationsControllerGetCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/count';
};

export type NotificationsControllerGetCountResponses = {
    200: NotificationCountDto;
};

export type NotificationsControllerGetCountResponse = NotificationsControllerGetCountResponses[keyof NotificationsControllerGetCountResponses];

export type NotificationsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        type?: 'read' | 'unread';
    };
    url: '/notifications';
};

export type NotificationsControllerFindAllResponses = {
    200: PaginatedNotificationDto;
};

export type NotificationsControllerFindAllResponse = NotificationsControllerFindAllResponses[keyof NotificationsControllerFindAllResponses];

export type NotificationsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/notifications/{id}';
};

export type NotificationsControllerFindOneResponses = {
    200: NotificationItemDto;
};

export type NotificationsControllerFindOneResponse = NotificationsControllerFindOneResponses[keyof NotificationsControllerFindOneResponses];

export type NotificationsControllerMarkAsReadData = {
    body: NotificationMarkRead;
    path?: never;
    query?: never;
    url: '/notifications/mark-read';
};

export type NotificationsControllerMarkAsReadResponses = {
    201: unknown;
};

export type NotificationsControllerMarkAllAsReadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/mark-read/all';
};

export type NotificationsControllerMarkAllAsReadResponses = {
    201: unknown;
};

export type AuthControllerGetMetadataData = {
    body?: never;
    path: {
        uid: string;
    };
    query?: never;
    url: '/auth/{uid}/metadata';
};

export type AuthControllerGetMetadataErrors = {
    /**
     * If the uid provided is invalid
     */
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    /**
     * If an unexpected server error has occured
     */
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AuthControllerGetMetadataError = AuthControllerGetMetadataErrors[keyof AuthControllerGetMetadataErrors];

export type AuthControllerGetMetadataResponses = {
    200: AuthMetadataDto;
};

export type AuthControllerGetMetadataResponse = AuthControllerGetMetadataResponses[keyof AuthControllerGetMetadataResponses];

export type AuthControllerLoginData = {
    body: UserCredentialsDto;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type AuthControllerLoginErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    401: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AuthControllerLoginError = AuthControllerLoginErrors[keyof AuthControllerLoginErrors];

export type AuthControllerLoginResponses = {
    201: string;
};

export type AuthControllerLoginResponse = AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type BillingControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        sortOrder?: 'asc' | 'desc';
        scheme?: PaymentScheme;
        type?: BillType;
        isDeleted?: boolean;
        sort?: 'amountToPay' | 'totalPaid' | 'createdAt';
        status?: 'unpaid' | 'partial' | 'paid' | 'overpaid';
    };
    url: '/billing';
};

export type BillingControllerFindAllErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerFindAllError = BillingControllerFindAllErrors[keyof BillingControllerFindAllErrors];

export type BillingControllerFindAllResponses = {
    200: PaginatedBillsDto;
};

export type BillingControllerFindAllResponse = BillingControllerFindAllResponses[keyof BillingControllerFindAllResponses];

export type BillingControllerCreateData = {
    body: CreateBillingDto;
    path?: never;
    query?: never;
    url: '/billing';
};

export type BillingControllerCreateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerCreateError = BillingControllerCreateErrors[keyof BillingControllerCreateErrors];

export type BillingControllerCreateResponses = {
    201: BillDto;
};

export type BillingControllerCreateResponse = BillingControllerCreateResponses[keyof BillingControllerCreateResponses];

export type BillingControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/billing/{id}';
};

export type BillingControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerRemoveError = BillingControllerRemoveErrors[keyof BillingControllerRemoveErrors];

export type BillingControllerRemoveResponses = {
    200: unknown;
};

export type BillingControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{id}';
};

export type BillingControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerFindOneError = BillingControllerFindOneErrors[keyof BillingControllerFindOneErrors];

export type BillingControllerFindOneResponses = {
    200: DetailedBillDto;
};

export type BillingControllerFindOneResponse = BillingControllerFindOneResponses[keyof BillingControllerFindOneResponses];

export type BillingControllerUpdateData = {
    body: UpdateBillDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{id}';
};

export type BillingControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type BillingControllerUpdateError = BillingControllerUpdateErrors[keyof BillingControllerUpdateErrors];

export type BillingControllerUpdateResponses = {
    200: BillDto;
};

export type BillingControllerUpdateResponse = BillingControllerUpdateResponses[keyof BillingControllerUpdateResponses];

export type InstallmentControllerFindAllData = {
    body?: never;
    path: {
        billId: string;
    };
    query?: never;
    url: '/billing/{billId}/installments';
};

export type InstallmentControllerFindAllErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type InstallmentControllerFindAllError = InstallmentControllerFindAllErrors[keyof InstallmentControllerFindAllErrors];

export type InstallmentControllerFindAllResponses = {
    200: Array<BillInstallmentItemDto>;
};

export type InstallmentControllerFindAllResponse = InstallmentControllerFindAllResponses[keyof InstallmentControllerFindAllResponses];

export type InstallmentControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{billId}/installments/{id}';
};

export type InstallmentControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type InstallmentControllerFindOneError = InstallmentControllerFindOneErrors[keyof InstallmentControllerFindOneErrors];

export type InstallmentControllerFindOneResponses = {
    200: BillInstallmentItemDto;
};

export type InstallmentControllerFindOneResponse = InstallmentControllerFindOneResponses[keyof InstallmentControllerFindOneResponses];

export type PaymentsControllerPayData = {
    body: InitiatePaymentDto;
    path: {
        billId: string;
    };
    query?: never;
    url: '/billing/{billId}/payments/pay';
};

export type PaymentsControllerPayErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerPayError = PaymentsControllerPayErrors[keyof PaymentsControllerPayErrors];

export type PaymentsControllerPayResponses = {
    201: PaymentIntentResponseDto;
};

export type PaymentsControllerPayResponse = PaymentsControllerPayResponses[keyof PaymentsControllerPayResponses];

export type PaymentsControllerFindAllData = {
    body?: never;
    path: {
        billId: string;
    };
    query?: never;
    url: '/billing/{billId}/payments';
};

export type PaymentsControllerFindAllErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerFindAllError = PaymentsControllerFindAllErrors[keyof PaymentsControllerFindAllErrors];

export type PaymentsControllerFindAllResponses = {
    200: Array<BillPaymentDto>;
};

export type PaymentsControllerFindAllResponse = PaymentsControllerFindAllResponses[keyof PaymentsControllerFindAllResponses];

export type PaymentsControllerCreateData = {
    body: CreatePaymentDto;
    path: {
        billId: string;
    };
    query?: never;
    url: '/billing/{billId}/payments';
};

export type PaymentsControllerCreateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerCreateError = PaymentsControllerCreateErrors[keyof PaymentsControllerCreateErrors];

export type PaymentsControllerCreateResponses = {
    201: BillPaymentDto;
};

export type PaymentsControllerCreateResponse = PaymentsControllerCreateResponses[keyof PaymentsControllerCreateResponses];

export type PaymentsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/billing/{billId}/payments/{id}';
};

export type PaymentsControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerRemoveError = PaymentsControllerRemoveErrors[keyof PaymentsControllerRemoveErrors];

export type PaymentsControllerRemoveResponses = {
    200: unknown;
};

export type PaymentsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{billId}/payments/{id}';
};

export type PaymentsControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerFindOneError = PaymentsControllerFindOneErrors[keyof PaymentsControllerFindOneErrors];

export type PaymentsControllerFindOneResponses = {
    200: BillPaymentDto;
};

export type PaymentsControllerFindOneResponse = PaymentsControllerFindOneResponses[keyof PaymentsControllerFindOneResponses];

export type PaymentsControllerUpdateData = {
    body: UpdateBillPaymentDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/billing/{billId}/payments/{id}';
};

export type PaymentsControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PaymentsControllerUpdateError = PaymentsControllerUpdateErrors[keyof PaymentsControllerUpdateErrors];

export type PaymentsControllerUpdateResponses = {
    200: BillPaymentDto;
};

export type PaymentsControllerUpdateResponse = PaymentsControllerUpdateResponses[keyof PaymentsControllerUpdateResponses];

export type ProgramControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/programs';
};

export type ProgramControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerFindAllError = ProgramControllerFindAllErrors[keyof ProgramControllerFindAllErrors];

export type ProgramControllerFindAllResponses = {
    /**
     * List of programs retrieved successfully
     */
    200: PaginatedProgramsDto;
};

export type ProgramControllerFindAllResponse = ProgramControllerFindAllResponses[keyof ProgramControllerFindAllResponses];

export type ProgramControllerCreateData = {
    body: CreateProgramDto;
    path?: never;
    query?: never;
    url: '/programs';
};

export type ProgramControllerCreateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerCreateError = ProgramControllerCreateErrors[keyof ProgramControllerCreateErrors];

export type ProgramControllerCreateResponses = {
    201: Program;
};

export type ProgramControllerCreateResponse = ProgramControllerCreateResponses[keyof ProgramControllerCreateResponses];

export type ProgramControllerFindAllMajorsData = {
    body?: never;
    path: {
        programId: string;
    };
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/programs/{programId}/majors';
};

export type ProgramControllerFindAllMajorsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerFindAllMajorsError = ProgramControllerFindAllMajorsErrors[keyof ProgramControllerFindAllMajorsErrors];

export type ProgramControllerFindAllMajorsResponses = {
    200: PaginatedMajorsDto;
};

export type ProgramControllerFindAllMajorsResponse = ProgramControllerFindAllMajorsResponses[keyof ProgramControllerFindAllMajorsResponses];

export type ProgramControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/programs/{id}';
};

export type ProgramControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerRemoveError = ProgramControllerRemoveErrors[keyof ProgramControllerRemoveErrors];

export type ProgramControllerRemoveResponses = {
    /**
     * Program deleted successfully
     */
    200: {
        message?: string;
    };
};

export type ProgramControllerRemoveResponse = ProgramControllerRemoveResponses[keyof ProgramControllerRemoveResponses];

export type ProgramControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/programs/{id}';
};

export type ProgramControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerFindOneError = ProgramControllerFindOneErrors[keyof ProgramControllerFindOneErrors];

export type ProgramControllerFindOneResponses = {
    /**
     * Program retrieved successfully
     */
    200: Program;
};

export type ProgramControllerFindOneResponse = ProgramControllerFindOneResponses[keyof ProgramControllerFindOneResponses];

export type ProgramControllerUpdateData = {
    body: UpdateProgramDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/programs/{id}';
};

export type ProgramControllerUpdateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ProgramControllerUpdateError = ProgramControllerUpdateErrors[keyof ProgramControllerUpdateErrors];

export type ProgramControllerUpdateResponses = {
    /**
     * Program updated successfully
     */
    200: Program;
};

export type ProgramControllerUpdateResponse = ProgramControllerUpdateResponses[keyof ProgramControllerUpdateResponses];

export type ChatbotControllerPromptData = {
    body: PromptDto;
    path?: never;
    query?: never;
    url: '/chatbot';
};

export type ChatbotControllerPromptErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type ChatbotControllerPromptError = ChatbotControllerPromptErrors[keyof ChatbotControllerPromptErrors];

export type ChatbotControllerPromptResponses = {
    201: ChatbotResponseDto;
};

export type ChatbotControllerPromptResponse = ChatbotControllerPromptResponses[keyof ChatbotControllerPromptResponses];

export type EnrollmentControllerFindAllEnrollmentsData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/enrollments';
};

export type EnrollmentControllerFindAllEnrollmentsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type EnrollmentControllerFindAllEnrollmentsError = EnrollmentControllerFindAllEnrollmentsErrors[keyof EnrollmentControllerFindAllEnrollmentsErrors];

export type EnrollmentControllerFindAllEnrollmentsResponses = {
    200: PaginatedEnrollmentPeriodsDto;
};

export type EnrollmentControllerFindAllEnrollmentsResponse = EnrollmentControllerFindAllEnrollmentsResponses[keyof EnrollmentControllerFindAllEnrollmentsResponses];

export type EnrollmentControllerCreateEnrollmentData = {
    body: CreateEnrollmentPeriodItemDto;
    path?: never;
    query?: never;
    url: '/enrollments';
};

export type EnrollmentControllerCreateEnrollmentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type EnrollmentControllerCreateEnrollmentError = EnrollmentControllerCreateEnrollmentErrors[keyof EnrollmentControllerCreateEnrollmentErrors];

export type EnrollmentControllerCreateEnrollmentResponses = {
    201: EnrollmentPeriodDto;
};

export type EnrollmentControllerCreateEnrollmentResponse = EnrollmentControllerCreateEnrollmentResponses[keyof EnrollmentControllerCreateEnrollmentResponses];

export type EnrollmentControllerFindActiveEnrollmentData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/enrollments/active';
};

export type EnrollmentControllerFindActiveEnrollmentErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type EnrollmentControllerFindActiveEnrollmentError = EnrollmentControllerFindActiveEnrollmentErrors[keyof EnrollmentControllerFindActiveEnrollmentErrors];

export type EnrollmentControllerFindActiveEnrollmentResponses = {
    200: EnrollmentPeriodDto;
};

export type EnrollmentControllerFindActiveEnrollmentResponse = EnrollmentControllerFindActiveEnrollmentResponses[keyof EnrollmentControllerFindActiveEnrollmentResponses];

export type EnrollmentControllerRemoveEnrollmentData = {
    body?: never;
    path: {
        enrollmentId: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/enrollments/{enrollmentId}';
};

export type EnrollmentControllerRemoveEnrollmentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type EnrollmentControllerRemoveEnrollmentError = EnrollmentControllerRemoveEnrollmentErrors[keyof EnrollmentControllerRemoveEnrollmentErrors];

export type EnrollmentControllerRemoveEnrollmentResponses = {
    200: {
        message?: string;
    };
};

export type EnrollmentControllerRemoveEnrollmentResponse = EnrollmentControllerRemoveEnrollmentResponses[keyof EnrollmentControllerRemoveEnrollmentResponses];

export type EnrollmentControllerFindOneEnrollmentData = {
    body?: never;
    path: {
        enrollmentId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}';
};

export type EnrollmentControllerFindOneEnrollmentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type EnrollmentControllerFindOneEnrollmentError = EnrollmentControllerFindOneEnrollmentErrors[keyof EnrollmentControllerFindOneEnrollmentErrors];

export type EnrollmentControllerFindOneEnrollmentResponses = {
    200: EnrollmentPeriodItemDto;
};

export type EnrollmentControllerFindOneEnrollmentResponse = EnrollmentControllerFindOneEnrollmentResponses[keyof EnrollmentControllerFindOneEnrollmentResponses];

export type EnrollmentControllerUpdateEnrollmentData = {
    body: UpdateEnrollmentPeriodItemDto;
    path: {
        enrollmentId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}';
};

export type EnrollmentControllerUpdateEnrollmentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type EnrollmentControllerUpdateEnrollmentError = EnrollmentControllerUpdateEnrollmentErrors[keyof EnrollmentControllerUpdateEnrollmentErrors];

export type EnrollmentControllerUpdateEnrollmentResponses = {
    200: EnrollmentPeriodDto;
};

export type EnrollmentControllerUpdateEnrollmentResponse = EnrollmentControllerUpdateEnrollmentResponses[keyof EnrollmentControllerUpdateEnrollmentResponses];

export type EnrollmentControllerUpdateEnrollmentStatusData = {
    body: UpdateEnrollmentStatusDto;
    path: {
        enrollmentId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/status';
};

export type EnrollmentControllerUpdateEnrollmentStatusErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type EnrollmentControllerUpdateEnrollmentStatusError = EnrollmentControllerUpdateEnrollmentStatusErrors[keyof EnrollmentControllerUpdateEnrollmentStatusErrors];

export type EnrollmentControllerUpdateEnrollmentStatusResponses = {
    200: EnrollmentPeriodDto;
};

export type EnrollmentControllerUpdateEnrollmentStatusResponse = EnrollmentControllerUpdateEnrollmentStatusResponses[keyof EnrollmentControllerUpdateEnrollmentStatusResponses];

export type CourseOfferingControllerFindCourseOfferingsByPeriodData = {
    body?: never;
    path: {
        enrollmentId: string;
    };
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        periodId?: string;
        status?: 'not enrolled' | 'enrolled';
    };
    url: '/enrollments/{enrollmentId}/offerings';
};

export type CourseOfferingControllerFindCourseOfferingsByPeriodResponses = {
    200: PaginatedCourseOfferingsDto;
};

export type CourseOfferingControllerFindCourseOfferingsByPeriodResponse = CourseOfferingControllerFindCourseOfferingsByPeriodResponses[keyof CourseOfferingControllerFindCourseOfferingsByPeriodResponses];

export type CourseOfferingControllerCreateCourseOfferingData = {
    body: CreateCourseOfferingDto;
    path: {
        enrollmentId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/offerings';
};

export type CourseOfferingControllerCreateCourseOfferingErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseOfferingControllerCreateCourseOfferingError = CourseOfferingControllerCreateCourseOfferingErrors[keyof CourseOfferingControllerCreateCourseOfferingErrors];

export type CourseOfferingControllerCreateCourseOfferingResponses = {
    201: CourseOffering;
};

export type CourseOfferingControllerCreateCourseOfferingResponse = CourseOfferingControllerCreateCourseOfferingResponses[keyof CourseOfferingControllerCreateCourseOfferingResponses];

export type CourseOfferingControllerCreateCourseOfferingsByCurriculumIdData = {
    body: CreateCourseOfferingCurriculumDto;
    path: {
        enrollmentId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/curriculum';
};

export type CourseOfferingControllerCreateCourseOfferingsByCurriculumIdErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseOfferingControllerCreateCourseOfferingsByCurriculumIdError = CourseOfferingControllerCreateCourseOfferingsByCurriculumIdErrors[keyof CourseOfferingControllerCreateCourseOfferingsByCurriculumIdErrors];

export type CourseOfferingControllerCreateCourseOfferingsByCurriculumIdResponses = {
    201: Array<CourseOffering>;
};

export type CourseOfferingControllerCreateCourseOfferingsByCurriculumIdResponse = CourseOfferingControllerCreateCourseOfferingsByCurriculumIdResponses[keyof CourseOfferingControllerCreateCourseOfferingsByCurriculumIdResponses];

export type CourseOfferingControllerRemoveCourseOfferingData = {
    body?: never;
    path: {
        enrollmentId: string;
        offeringId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/offerings/{offeringId}';
};

export type CourseOfferingControllerRemoveCourseOfferingErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseOfferingControllerRemoveCourseOfferingError = CourseOfferingControllerRemoveCourseOfferingErrors[keyof CourseOfferingControllerRemoveCourseOfferingErrors];

export type CourseOfferingControllerRemoveCourseOfferingResponses = {
    200: {
        message?: string;
    };
};

export type CourseOfferingControllerRemoveCourseOfferingResponse = CourseOfferingControllerRemoveCourseOfferingResponses[keyof CourseOfferingControllerRemoveCourseOfferingResponses];

export type CourseOfferingControllerFindOneCourseOfferingData = {
    body?: never;
    path: {
        enrollmentId: string;
        offeringId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/offerings/{offeringId}';
};

export type CourseOfferingControllerFindOneCourseOfferingErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseOfferingControllerFindOneCourseOfferingError = CourseOfferingControllerFindOneCourseOfferingErrors[keyof CourseOfferingControllerFindOneCourseOfferingErrors];

export type CourseOfferingControllerFindOneCourseOfferingResponses = {
    200: CourseOfferingDto;
};

export type CourseOfferingControllerFindOneCourseOfferingResponse = CourseOfferingControllerFindOneCourseOfferingResponses[keyof CourseOfferingControllerFindOneCourseOfferingResponses];

export type CourseSectionControllerFindAllCourseSectionsData = {
    body?: never;
    path: {
        enrollmentId: string;
    };
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/enrollments/{enrollmentId}/sections';
};

export type CourseSectionControllerFindAllCourseSectionsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseSectionControllerFindAllCourseSectionsError = CourseSectionControllerFindAllCourseSectionsErrors[keyof CourseSectionControllerFindAllCourseSectionsErrors];

export type CourseSectionControllerFindAllCourseSectionsResponses = {
    200: PaginatedCourseSectionsDto;
};

export type CourseSectionControllerFindAllCourseSectionsResponse = CourseSectionControllerFindAllCourseSectionsResponses[keyof CourseSectionControllerFindAllCourseSectionsResponses];

export type CourseSectionControllerFindAllCourseSectionsForOfferingData = {
    body?: never;
    path: {
        enrollmentId: string;
        offeringId: string;
    };
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections';
};

export type CourseSectionControllerFindAllCourseSectionsForOfferingErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseSectionControllerFindAllCourseSectionsForOfferingError = CourseSectionControllerFindAllCourseSectionsForOfferingErrors[keyof CourseSectionControllerFindAllCourseSectionsForOfferingErrors];

export type CourseSectionControllerFindAllCourseSectionsForOfferingResponses = {
    200: PaginatedCourseSectionsDto;
};

export type CourseSectionControllerFindAllCourseSectionsForOfferingResponse = CourseSectionControllerFindAllCourseSectionsForOfferingResponses[keyof CourseSectionControllerFindAllCourseSectionsForOfferingResponses];

export type CourseSectionControllerCreateCourseSectionData = {
    body: CreateCourseSectionFullDto;
    path: {
        enrollmentId: string;
        offeringId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections';
};

export type CourseSectionControllerCreateCourseSectionErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseSectionControllerCreateCourseSectionError = CourseSectionControllerCreateCourseSectionErrors[keyof CourseSectionControllerCreateCourseSectionErrors];

export type CourseSectionControllerCreateCourseSectionResponses = {
    201: CourseSectionDto;
};

export type CourseSectionControllerCreateCourseSectionResponse = CourseSectionControllerCreateCourseSectionResponses[keyof CourseSectionControllerCreateCourseSectionResponses];

export type CourseSectionControllerRemoveCourseSectionData = {
    body?: never;
    path: {
        enrollmentId: string;
        offeringId: string;
        sectionId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections/{sectionId}';
};

export type CourseSectionControllerRemoveCourseSectionErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseSectionControllerRemoveCourseSectionError = CourseSectionControllerRemoveCourseSectionErrors[keyof CourseSectionControllerRemoveCourseSectionErrors];

export type CourseSectionControllerRemoveCourseSectionResponses = {
    200: {
        message?: string;
    };
};

export type CourseSectionControllerRemoveCourseSectionResponse = CourseSectionControllerRemoveCourseSectionResponses[keyof CourseSectionControllerRemoveCourseSectionResponses];

export type CourseSectionControllerFindOneCourseSectionData = {
    body?: never;
    path: {
        enrollmentId: string;
        offeringId: string;
        sectionId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections/{sectionId}';
};

export type CourseSectionControllerFindOneCourseSectionErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseSectionControllerFindOneCourseSectionError = CourseSectionControllerFindOneCourseSectionErrors[keyof CourseSectionControllerFindOneCourseSectionErrors];

export type CourseSectionControllerFindOneCourseSectionResponses = {
    200: CourseSectionDto;
};

export type CourseSectionControllerFindOneCourseSectionResponse = CourseSectionControllerFindOneCourseSectionResponses[keyof CourseSectionControllerFindOneCourseSectionResponses];

export type CourseSectionControllerUpdateCourseSectionData = {
    body: UpdateCourseSectionDto;
    path: {
        enrollmentId: string;
        offeringId: string;
        sectionId: string;
    };
    query?: never;
    url: '/enrollments/{enrollmentId}/offerings/{offeringId}/sections/{sectionId}';
};

export type CourseSectionControllerUpdateCourseSectionErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseSectionControllerUpdateCourseSectionError = CourseSectionControllerUpdateCourseSectionErrors[keyof CourseSectionControllerUpdateCourseSectionErrors];

export type CourseSectionControllerUpdateCourseSectionResponses = {
    200: CourseSectionDto;
};

export type CourseSectionControllerUpdateCourseSectionResponse = CourseSectionControllerUpdateCourseSectionResponses[keyof CourseSectionControllerUpdateCourseSectionResponses];

export type CourseSectionControllerFindOneCourseSectionByIdData = {
    body?: never;
    path: {
        sectionId: string;
    };
    query?: never;
    url: '/enrollments/sections/{sectionId}/course';
};

export type CourseSectionControllerFindOneCourseSectionByIdErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseSectionControllerFindOneCourseSectionByIdError = CourseSectionControllerFindOneCourseSectionByIdErrors[keyof CourseSectionControllerFindOneCourseSectionByIdErrors];

export type CourseSectionControllerFindOneCourseSectionByIdResponses = {
    200: CourseSectionWithCourseOfferingDto;
};

export type CourseSectionControllerFindOneCourseSectionByIdResponse = CourseSectionControllerFindOneCourseSectionByIdResponses[keyof CourseSectionControllerFindOneCourseSectionByIdResponses];

export type CourseEnrollmentControllerGetCourseEnrollmentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/enrollment/student/sections';
};

export type CourseEnrollmentControllerGetCourseEnrollmentsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseEnrollmentControllerGetCourseEnrollmentsError = CourseEnrollmentControllerGetCourseEnrollmentsErrors[keyof CourseEnrollmentControllerGetCourseEnrollmentsErrors];

export type CourseEnrollmentControllerGetCourseEnrollmentsResponses = {
    201: Array<DetailedCourseEnrollmentDto>;
};

export type CourseEnrollmentControllerGetCourseEnrollmentsResponse = CourseEnrollmentControllerGetCourseEnrollmentsResponses[keyof CourseEnrollmentControllerGetCourseEnrollmentsResponses];

export type CourseEnrollmentControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/enrollment/student';
};

export type CourseEnrollmentControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseEnrollmentControllerFindAllError = CourseEnrollmentControllerFindAllErrors[keyof CourseEnrollmentControllerFindAllErrors];

export type CourseEnrollmentControllerFindAllResponses = {
    200: PaginatedCourseEnrollmentsDto;
};

export type CourseEnrollmentControllerFindAllResponse = CourseEnrollmentControllerFindAllResponses[keyof CourseEnrollmentControllerFindAllResponses];

export type CourseEnrollmentControllerDropCourseEnrollmentData = {
    body: StudentIdentifierDto;
    path: {
        sectionId: string;
    };
    query?: never;
    url: '/enrollment/student/sections/{sectionId}';
};

export type CourseEnrollmentControllerDropCourseEnrollmentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseEnrollmentControllerDropCourseEnrollmentError = CourseEnrollmentControllerDropCourseEnrollmentErrors[keyof CourseEnrollmentControllerDropCourseEnrollmentErrors];

export type CourseEnrollmentControllerDropCourseEnrollmentResponses = {
    200: {
        message?: string;
    };
};

export type CourseEnrollmentControllerDropCourseEnrollmentResponse = CourseEnrollmentControllerDropCourseEnrollmentResponses[keyof CourseEnrollmentControllerDropCourseEnrollmentResponses];

export type CourseEnrollmentControllerCreateCourseEnrollmentData = {
    body: StudentIdentifierDto;
    path: {
        sectionId: string;
    };
    query?: never;
    url: '/enrollment/student/sections/{sectionId}';
};

export type CourseEnrollmentControllerCreateCourseEnrollmentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseEnrollmentControllerCreateCourseEnrollmentError = CourseEnrollmentControllerCreateCourseEnrollmentErrors[keyof CourseEnrollmentControllerCreateCourseEnrollmentErrors];

export type CourseEnrollmentControllerCreateCourseEnrollmentResponses = {
    201: CourseEnrollmentDto;
};

export type CourseEnrollmentControllerCreateCourseEnrollmentResponse = CourseEnrollmentControllerCreateCourseEnrollmentResponses[keyof CourseEnrollmentControllerCreateCourseEnrollmentResponses];

export type CourseEnrollmentControllerFinalizeCourseEnrollmentData = {
    body: FinalizeEnrollmentDto;
    path?: never;
    query?: never;
    url: '/enrollment/student/finalize';
};

export type CourseEnrollmentControllerFinalizeCourseEnrollmentErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CourseEnrollmentControllerFinalizeCourseEnrollmentError = CourseEnrollmentControllerFinalizeCourseEnrollmentErrors[keyof CourseEnrollmentControllerFinalizeCourseEnrollmentErrors];

export type CourseEnrollmentControllerFinalizeCourseEnrollmentResponses = {
    200: {
        message?: string;
        studentId?: string;
    };
    201: unknown;
};

export type CourseEnrollmentControllerFinalizeCourseEnrollmentResponse = CourseEnrollmentControllerFinalizeCourseEnrollmentResponses[keyof CourseEnrollmentControllerFinalizeCourseEnrollmentResponses];

export type LmsContentControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        contentType?: ContentType;
        progress?: ProgressStatus;
    };
    url: '/modules/{moduleId}/contents';
};

export type LmsContentControllerFindAllErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerFindAllError = LmsContentControllerFindAllErrors[keyof LmsContentControllerFindAllErrors];

export type LmsContentControllerFindAllResponses = {
    200: PaginatedModuleContentDto;
};

export type LmsContentControllerFindAllResponse = LmsContentControllerFindAllResponses[keyof LmsContentControllerFindAllResponses];

export type LmsContentControllerCreateData = {
    body: CreateModuleContentDto;
    path: {
        moduleId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/contents';
};

export type LmsContentControllerCreateErrors = {
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerCreateError = LmsContentControllerCreateErrors[keyof LmsContentControllerCreateErrors];

export type LmsContentControllerCreateResponses = {
    201: ({
        contentType: 'LESSON';
    } & LessonItemDto) | ({
        contentType: 'ASSIGNMENT';
    } & AssignmentItemDto);
};

export type LmsContentControllerCreateResponse = LmsContentControllerCreateResponses[keyof LmsContentControllerCreateResponses];

export type LmsContentControllerRemoveData = {
    body?: never;
    path: {
        moduleContentId: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/modules/{moduleId}/contents/{moduleContentId}';
};

export type LmsContentControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerRemoveError = LmsContentControllerRemoveErrors[keyof LmsContentControllerRemoveErrors];

export type LmsContentControllerRemoveResponses = {
    200: {
        message?: string;
    };
};

export type LmsContentControllerRemoveResponse = LmsContentControllerRemoveResponses[keyof LmsContentControllerRemoveResponses];

export type LmsContentControllerFindOneData = {
    body?: never;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/contents/{moduleContentId}';
};

export type LmsContentControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerFindOneError = LmsContentControllerFindOneErrors[keyof LmsContentControllerFindOneErrors];

export type LmsContentControllerFindOneResponses = {
    200: ({
        contentType: 'LESSON';
    } & LessonItemDto) | ({
        contentType: 'ASSIGNMENT';
    } & AssignmentItemDto);
};

export type LmsContentControllerFindOneResponse = LmsContentControllerFindOneResponses[keyof LmsContentControllerFindOneResponses];

export type LmsContentControllerUpdateData = {
    body: ({
        contentType: 'LESSON';
    } & UpdateLessonItemDto) | ({
        contentType: 'ASSIGNMENT';
    } & UpdateAssignmentItemDto);
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/contents/{moduleContentId}';
};

export type LmsContentControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerUpdateError = LmsContentControllerUpdateErrors[keyof LmsContentControllerUpdateErrors];

export type LmsContentControllerUpdateResponses = {
    200: ModuleContent;
};

export type LmsContentControllerUpdateResponse = LmsContentControllerUpdateResponses[keyof LmsContentControllerUpdateResponses];

export type LmsContentControllerPublishData = {
    body?: never;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/contents/{moduleContentId}/publish';
};

export type LmsContentControllerPublishErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerPublishError = LmsContentControllerPublishErrors[keyof LmsContentControllerPublishErrors];

export type LmsContentControllerPublishResponses = {
    200: MessageDto;
};

export type LmsContentControllerPublishResponse = LmsContentControllerPublishResponses[keyof LmsContentControllerPublishResponses];

export type LmsContentControllerUnpublishData = {
    body?: never;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/contents/{moduleContentId}/unpublish';
};

export type LmsContentControllerUnpublishErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerUnpublishError = LmsContentControllerUnpublishErrors[keyof LmsContentControllerUnpublishErrors];

export type LmsContentControllerUnpublishResponses = {
    200: MessageDto;
};

export type LmsContentControllerUnpublishResponse = LmsContentControllerUnpublishResponses[keyof LmsContentControllerUnpublishResponses];

export type LmsContentControllerFindAllContentProgressData = {
    body?: never;
    path: {
        moduleId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/contents/{moduleContentId}/progress';
};

export type LmsContentControllerFindAllContentProgressErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerFindAllContentProgressError = LmsContentControllerFindAllContentProgressErrors[keyof LmsContentControllerFindAllContentProgressErrors];

export type LmsContentControllerFindAllContentProgressResponses = {
    200: Array<DetailedContentProgressDto>;
};

export type LmsContentControllerFindAllContentProgressResponse = LmsContentControllerFindAllContentProgressResponses[keyof LmsContentControllerFindAllContentProgressResponses];

export type LmsContentControllerCreateContentProgressData = {
    body?: never;
    path: {
        moduleId: string;
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/contents/{moduleContentId}/progress';
};

export type LmsContentControllerCreateContentProgressErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsContentControllerCreateContentProgressError = LmsContentControllerCreateContentProgressErrors[keyof LmsContentControllerCreateContentProgressErrors];

export type LmsContentControllerCreateContentProgressResponses = {
    201: DetailedContentProgressDto;
};

export type LmsContentControllerCreateContentProgressResponse = LmsContentControllerCreateContentProgressResponses[keyof LmsContentControllerCreateContentProgressResponses];

export type MajorControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/majors';
};

export type MajorControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerFindAllError = MajorControllerFindAllErrors[keyof MajorControllerFindAllErrors];

export type MajorControllerFindAllResponses = {
    200: PaginatedMajorsDto;
};

export type MajorControllerFindAllResponse = MajorControllerFindAllResponses[keyof MajorControllerFindAllResponses];

export type MajorControllerCreateData = {
    body: CreateProgramMajorDto;
    path?: never;
    query?: never;
    url: '/majors';
};

export type MajorControllerCreateErrors = {
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerCreateError = MajorControllerCreateErrors[keyof MajorControllerCreateErrors];

export type MajorControllerCreateResponses = {
    201: MajorDto;
};

export type MajorControllerCreateResponse = MajorControllerCreateResponses[keyof MajorControllerCreateResponses];

export type MajorControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/majors/{id}';
};

export type MajorControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerRemoveError = MajorControllerRemoveErrors[keyof MajorControllerRemoveErrors];

export type MajorControllerRemoveResponses = {
    200: {
        message?: string;
    };
};

export type MajorControllerRemoveResponse = MajorControllerRemoveResponses[keyof MajorControllerRemoveResponses];

export type MajorControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/majors/{id}';
};

export type MajorControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerFindOneError = MajorControllerFindOneErrors[keyof MajorControllerFindOneErrors];

export type MajorControllerFindOneResponses = {
    200: MajorItemDto;
};

export type MajorControllerFindOneResponse = MajorControllerFindOneResponses[keyof MajorControllerFindOneResponses];

export type MajorControllerUpdateData = {
    body: UpdateMajorDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/majors/{id}';
};

export type MajorControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type MajorControllerUpdateError = MajorControllerUpdateErrors[keyof MajorControllerUpdateErrors];

export type MajorControllerUpdateResponses = {
    200: Major;
};

export type MajorControllerUpdateResponse = MajorControllerUpdateResponses[keyof MajorControllerUpdateResponses];

export type CurriculumControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/curriculum';
};

export type CurriculumControllerFindAllErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CurriculumControllerFindAllError = CurriculumControllerFindAllErrors[keyof CurriculumControllerFindAllErrors];

export type CurriculumControllerFindAllResponses = {
    200: Array<CurriculumItemDto>;
};

export type CurriculumControllerFindAllResponse = CurriculumControllerFindAllResponses[keyof CurriculumControllerFindAllResponses];

export type CurriculumControllerCreateData = {
    body: CreateCurriculumWithCoursesDto;
    path?: never;
    query?: never;
    url: '/curriculum';
};

export type CurriculumControllerCreateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CurriculumControllerCreateError = CurriculumControllerCreateErrors[keyof CurriculumControllerCreateErrors];

export type CurriculumControllerCreateResponses = {
    201: CurriculumDto;
};

export type CurriculumControllerCreateResponse = CurriculumControllerCreateResponses[keyof CurriculumControllerCreateResponses];

export type CurriculumControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/curriculum/{id}';
};

export type CurriculumControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CurriculumControllerRemoveError = CurriculumControllerRemoveErrors[keyof CurriculumControllerRemoveErrors];

export type CurriculumControllerRemoveResponses = {
    200: unknown;
};

export type CurriculumControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/curriculum/{id}';
};

export type CurriculumControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CurriculumControllerFindOneError = CurriculumControllerFindOneErrors[keyof CurriculumControllerFindOneErrors];

export type CurriculumControllerFindOneResponses = {
    200: CurriculumWithCoursesDto;
};

export type CurriculumControllerFindOneResponse = CurriculumControllerFindOneResponses[keyof CurriculumControllerFindOneResponses];

export type CurriculumControllerUpdateData = {
    body: UpdateCurriculumWithCourseDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/curriculum/{id}';
};

export type CurriculumControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type CurriculumControllerUpdateError = CurriculumControllerUpdateErrors[keyof CurriculumControllerUpdateErrors];

export type CurriculumControllerUpdateResponses = {
    200: CurriculumDto;
};

export type CurriculumControllerUpdateResponse = CurriculumControllerUpdateResponses[keyof CurriculumControllerUpdateResponses];

export type AssignmentControllerFindOneData = {
    body?: never;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/{moduleContentId}/assignments';
};

export type AssignmentControllerFindOneErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AssignmentControllerFindOneError = AssignmentControllerFindOneErrors[keyof AssignmentControllerFindOneErrors];

export type AssignmentControllerFindOneResponses = {
    200: AssignmentDto;
};

export type AssignmentControllerFindOneResponse = AssignmentControllerFindOneResponses[keyof AssignmentControllerFindOneResponses];

export type AssignmentControllerUpdateData = {
    body: UpdateAssignmentConfigDto;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/{moduleContentId}/assignments';
};

export type AssignmentControllerUpdateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AssignmentControllerUpdateError = AssignmentControllerUpdateErrors[keyof AssignmentControllerUpdateErrors];

export type AssignmentControllerUpdateResponses = {
    200: unknown;
};

export type AssignmentControllerSubmitData = {
    body: SubmitAssignmentDto;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/{moduleContentId}/assignments';
};

export type AssignmentControllerSubmitErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AssignmentControllerSubmitError = AssignmentControllerSubmitErrors[keyof AssignmentControllerSubmitErrors];

export type AssignmentControllerSubmitResponses = {
    201: unknown;
};

export type AssignmentControllerFindAllForAdminData = {
    body?: never;
    path: {
        moduleId: string;
    };
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/modules/{moduleId}/{moduleContentId}/assignments/admin/all';
};

export type AssignmentControllerFindAllForAdminErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AssignmentControllerFindAllForAdminError = AssignmentControllerFindAllForAdminErrors[keyof AssignmentControllerFindAllForAdminErrors];

export type AssignmentControllerFindAllForAdminResponses = {
    200: PaginatedAssignmentDto;
};

export type AssignmentControllerFindAllForAdminResponse = AssignmentControllerFindAllForAdminResponses[keyof AssignmentControllerFindAllForAdminResponses];

export type AssignmentControllerFindAllForMentorData = {
    body?: never;
    path: {
        moduleId: string;
    };
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/modules/{moduleId}/{moduleContentId}/assignments/mentor/all';
};

export type AssignmentControllerFindAllForMentorErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AssignmentControllerFindAllForMentorError = AssignmentControllerFindAllForMentorErrors[keyof AssignmentControllerFindAllForMentorErrors];

export type AssignmentControllerFindAllForMentorResponses = {
    200: PaginatedMentorAssignmentDto;
};

export type AssignmentControllerFindAllForMentorResponse = AssignmentControllerFindAllForMentorResponses[keyof AssignmentControllerFindAllForMentorResponses];

export type AssignmentControllerFindAllForStudentData = {
    body?: never;
    path: {
        moduleId: string;
    };
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/modules/{moduleId}/{moduleContentId}/assignments/student/all';
};

export type AssignmentControllerFindAllForStudentErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AssignmentControllerFindAllForStudentError = AssignmentControllerFindAllForStudentErrors[keyof AssignmentControllerFindAllForStudentErrors];

export type AssignmentControllerFindAllForStudentResponses = {
    200: PaginatedStudentAssignmentDto;
};

export type AssignmentControllerFindAllForStudentResponse = AssignmentControllerFindAllForStudentResponses[keyof AssignmentControllerFindAllForStudentResponses];

export type AssignmentControllerFindOneForStudentData = {
    body?: never;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/{moduleContentId}/assignments/student';
};

export type AssignmentControllerFindOneForStudentErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AssignmentControllerFindOneForStudentError = AssignmentControllerFindOneForStudentErrors[keyof AssignmentControllerFindOneForStudentErrors];

export type AssignmentControllerFindOneForStudentResponses = {
    200: StudentAssignmentItemDto;
};

export type AssignmentControllerFindOneForStudentResponse = AssignmentControllerFindOneForStudentResponses[keyof AssignmentControllerFindOneForStudentResponses];

export type LmsSectionControllerFindAllModuleSectionsData = {
    body?: never;
    path: {
        moduleId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/sections';
};

export type LmsSectionControllerFindAllModuleSectionsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsSectionControllerFindAllModuleSectionsError = LmsSectionControllerFindAllModuleSectionsErrors[keyof LmsSectionControllerFindAllModuleSectionsErrors];

export type LmsSectionControllerFindAllModuleSectionsResponses = {
    200: Array<DetailedModuleSectionDto>;
};

export type LmsSectionControllerFindAllModuleSectionsResponse = LmsSectionControllerFindAllModuleSectionsResponses[keyof LmsSectionControllerFindAllModuleSectionsResponses];

export type LmsSectionControllerCreateData = {
    body: CreateModuleSectionDto;
    path: {
        moduleId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/sections';
};

export type LmsSectionControllerCreateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsSectionControllerCreateError = LmsSectionControllerCreateErrors[keyof LmsSectionControllerCreateErrors];

export type LmsSectionControllerCreateResponses = {
    201: DetailedModuleSectionDto;
};

export type LmsSectionControllerCreateResponse = LmsSectionControllerCreateResponses[keyof LmsSectionControllerCreateResponses];

export type LmsSectionControllerRemoveData = {
    body?: never;
    path: {
        moduleSectionId: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/modules/{moduleId}/sections/{moduleSectionId}';
};

export type LmsSectionControllerRemoveErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsSectionControllerRemoveError = LmsSectionControllerRemoveErrors[keyof LmsSectionControllerRemoveErrors];

export type LmsSectionControllerRemoveResponses = {
    200: unknown;
};

export type LmsSectionControllerFindOneData = {
    body?: never;
    path: {
        moduleSectionId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/sections/{moduleSectionId}';
};

export type LmsSectionControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsSectionControllerFindOneError = LmsSectionControllerFindOneErrors[keyof LmsSectionControllerFindOneErrors];

export type LmsSectionControllerFindOneResponses = {
    200: DetailedModuleSectionDto;
};

export type LmsSectionControllerFindOneResponse = LmsSectionControllerFindOneResponses[keyof LmsSectionControllerFindOneResponses];

export type LmsSectionControllerUpdateData = {
    body: UpdateModuleSectionDto;
    path: {
        moduleSectionId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/sections/{moduleSectionId}';
};

export type LmsSectionControllerUpdateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsSectionControllerUpdateError = LmsSectionControllerUpdateErrors[keyof LmsSectionControllerUpdateErrors];

export type LmsSectionControllerUpdateResponses = {
    200: DetailedModuleSectionDto;
};

export type LmsSectionControllerUpdateResponse = LmsSectionControllerUpdateResponses[keyof LmsSectionControllerUpdateResponses];

export type LmsSectionControllerPublishSectionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{moduleId}/sections/{id}/publish';
};

export type LmsSectionControllerPublishSectionErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsSectionControllerPublishSectionError = LmsSectionControllerPublishSectionErrors[keyof LmsSectionControllerPublishSectionErrors];

export type LmsSectionControllerPublishSectionResponses = {
    201: unknown;
};

export type LmsSectionControllerUnpublishSectionData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/modules/{moduleId}/sections/{id}/unpublish';
};

export type LmsSectionControllerUnpublishSectionErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type LmsSectionControllerUnpublishSectionError = LmsSectionControllerUnpublishSectionErrors[keyof LmsSectionControllerUnpublishSectionErrors];

export type LmsSectionControllerUnpublishSectionResponses = {
    201: unknown;
};

export type SubmissionControllerFindAssignmentSubmissionsForAssignmentData = {
    body?: never;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/submissions/assignment/{moduleContentId}';
};

export type SubmissionControllerFindAssignmentSubmissionsForAssignmentErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type SubmissionControllerFindAssignmentSubmissionsForAssignmentError = SubmissionControllerFindAssignmentSubmissionsForAssignmentErrors[keyof SubmissionControllerFindAssignmentSubmissionsForAssignmentErrors];

export type SubmissionControllerFindAssignmentSubmissionsForAssignmentResponses = {
    200: Array<AssignmentSubmissionDetailsDto>;
};

export type SubmissionControllerFindAssignmentSubmissionsForAssignmentResponse = SubmissionControllerFindAssignmentSubmissionsForAssignmentResponses[keyof SubmissionControllerFindAssignmentSubmissionsForAssignmentResponses];

export type SubmissionControllerSubmitAssignmentData = {
    body: CreateAssignmentSubmissionDto;
    path: {
        moduleContentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/submissions/assignment/{moduleContentId}';
};

export type SubmissionControllerSubmitAssignmentErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type SubmissionControllerSubmitAssignmentError = SubmissionControllerSubmitAssignmentErrors[keyof SubmissionControllerSubmitAssignmentErrors];

export type SubmissionControllerSubmitAssignmentResponses = {
    201: AssignmentSubmissionDto;
};

export type SubmissionControllerSubmitAssignmentResponse = SubmissionControllerSubmitAssignmentResponses[keyof SubmissionControllerSubmitAssignmentResponses];

export type SubmissionControllerFindOneData = {
    body?: never;
    path: {
        submissionId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/submissions/{submissionId}';
};

export type SubmissionControllerFindOneErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type SubmissionControllerFindOneError = SubmissionControllerFindOneErrors[keyof SubmissionControllerFindOneErrors];

export type SubmissionControllerFindOneResponses = {
    200: AssignmentSubmissionDetailsDto;
};

export type SubmissionControllerFindOneResponse = SubmissionControllerFindOneResponses[keyof SubmissionControllerFindOneResponses];

export type SubmissionControllerGradeData = {
    body: GradeSubmissionDto;
    path: {
        submissionId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/submissions/{submissionId}';
};

export type SubmissionControllerGradeErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type SubmissionControllerGradeError = SubmissionControllerGradeErrors[keyof SubmissionControllerGradeErrors];

export type SubmissionControllerGradeResponses = {
    200: GradeRecordDto;
};

export type SubmissionControllerGradeResponse = SubmissionControllerGradeResponses[keyof SubmissionControllerGradeResponses];

export type SubmissionControllerFindAssignmentSubmissionsOfStudentData = {
    body?: never;
    path: {
        studentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/submissions/assignment/student/{studentId}';
};

export type SubmissionControllerFindAssignmentSubmissionsOfStudentErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type SubmissionControllerFindAssignmentSubmissionsOfStudentError = SubmissionControllerFindAssignmentSubmissionsOfStudentErrors[keyof SubmissionControllerFindAssignmentSubmissionsOfStudentErrors];

export type SubmissionControllerFindAssignmentSubmissionsOfStudentResponses = {
    200: Array<AssignmentSubmissionDetailsDto>;
};

export type SubmissionControllerFindAssignmentSubmissionsOfStudentResponse = SubmissionControllerFindAssignmentSubmissionsOfStudentResponses[keyof SubmissionControllerFindAssignmentSubmissionsOfStudentResponses];

export type SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentData = {
    body?: never;
    path: {
        moduleContentId: string;
        studentId: string;
    };
    query?: never;
    url: '/modules/{moduleId}/submissions/assignment/{moduleContentId}/student/{studentId}';
};

export type SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentError = SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentErrors[keyof SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentErrors];

export type SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentResponses = {
    200: Array<AssignmentSubmissionDetailsDto>;
};

export type SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentResponse = SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentResponses[keyof SubmissionControllerFindAssignmentSubmissionsOfStudentForAssignmentResponses];

export type GradingControllerGetStudentGradebookData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        /**
         * Filter by Module ID.
         */
        moduleId?: string;
        /**
         * Filter by a specific Student ID (Admin only).
         */
        studentId?: string;
        /**
         * Filter by a specific Course Offering ID (Admin only).
         */
        courseOfferingId?: string;
        /**
         * Filter by a specific Course Section ID (Admin only).
         */
        courseSectionId?: string;
    };
    url: '/grading/gradebook/student';
};

export type GradingControllerGetStudentGradebookErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GradingControllerGetStudentGradebookError = GradingControllerGetStudentGradebookErrors[keyof GradingControllerGetStudentGradebookErrors];

export type GradingControllerGetStudentGradebookResponses = {
    /**
     * Student gradebook retrieved successfully
     */
    200: GradebookForStudentDto;
};

export type GradingControllerGetStudentGradebookResponse = GradingControllerGetStudentGradebookResponses[keyof GradingControllerGetStudentGradebookResponses];

export type GradingControllerGetMentorGradebookData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        /**
         * Filter by Module ID.
         */
        moduleId?: string;
        /**
         * Filter by a specific Student ID (Admin only).
         */
        studentId?: string;
        /**
         * Filter by a specific Course Offering ID (Admin only).
         */
        courseOfferingId?: string;
        /**
         * Filter by a specific Course Section ID (Admin only).
         */
        courseSectionId?: string;
    };
    url: '/grading/gradebook/mentor';
};

export type GradingControllerGetMentorGradebookErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    403: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GradingControllerGetMentorGradebookError = GradingControllerGetMentorGradebookErrors[keyof GradingControllerGetMentorGradebookErrors];

export type GradingControllerGetMentorGradebookResponses = {
    /**
     * Mentor gradebook retrieved successfully
     */
    200: GradebookForMentorDto;
};

export type GradingControllerGetMentorGradebookResponse = GradingControllerGetMentorGradebookResponses[keyof GradingControllerGetMentorGradebookResponses];

export type GradingControllerGetAdminGradebookData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        /**
         * Filter by Module ID.
         */
        moduleId?: string;
        /**
         * Filter by a specific Student ID (Admin only).
         */
        studentId?: string;
        /**
         * Filter by a specific Course Offering ID (Admin only).
         */
        courseOfferingId?: string;
        /**
         * Filter by a specific Course Section ID (Admin only).
         */
        courseSectionId?: string;
    };
    url: '/grading/gradebook/admin';
};

export type GradingControllerGetAdminGradebookErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GradingControllerGetAdminGradebookError = GradingControllerGetAdminGradebookErrors[keyof GradingControllerGetAdminGradebookErrors];

export type GradingControllerGetAdminGradebookResponses = {
    /**
     * Admin gradebook retrieved successfully
     */
    200: GradebookForMentorDto;
};

export type GradingControllerGetAdminGradebookResponse = GradingControllerGetAdminGradebookResponses[keyof GradingControllerGetAdminGradebookResponses];

export type GradingControllerGradeAssignmentSubmissionData = {
    body: GradeAssignmentSubmissionDto;
    path: {
        submissionId: string;
    };
    query?: never;
    url: '/grading/submissions/{submissionId}/grade';
};

export type GradingControllerGradeAssignmentSubmissionErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    403: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    409: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GradingControllerGradeAssignmentSubmissionError = GradingControllerGradeAssignmentSubmissionErrors[keyof GradingControllerGradeAssignmentSubmissionErrors];

export type GradingControllerGradeAssignmentSubmissionResponses = {
    /**
     * Assignment graded successfully
     */
    200: GradeRecordDto;
    201: GradeRecordDto;
};

export type GradingControllerGradeAssignmentSubmissionResponse = GradingControllerGradeAssignmentSubmissionResponses[keyof GradingControllerGradeAssignmentSubmissionResponses];

export type GradingControllerUpdateGradeRecordData = {
    body: UpdateGradeRecordDto;
    path: {
        recordId: string;
    };
    query?: never;
    url: '/grading/grade-records/{recordId}';
};

export type GradingControllerUpdateGradeRecordErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    403: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type GradingControllerUpdateGradeRecordError = GradingControllerUpdateGradeRecordErrors[keyof GradingControllerUpdateGradeRecordErrors];

export type GradingControllerUpdateGradeRecordResponses = {
    /**
     * Grade record updated successfully
     */
    200: GradeRecord;
};

export type GradingControllerUpdateGradeRecordResponse = GradingControllerUpdateGradeRecordResponses[keyof GradingControllerUpdateGradeRecordResponses];

export type SwaggerControllerDownloadAllSpecsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/swaggy';
};

export type SwaggerControllerDownloadAllSpecsResponses = {
    200: unknown;
};

export type PricingControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/pricing';
};

export type PricingControllerFindAllErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingControllerFindAllError = PricingControllerFindAllErrors[keyof PricingControllerFindAllErrors];

export type PricingControllerFindAllResponses = {
    200: PaginatedPricingDto;
};

export type PricingControllerFindAllResponse = PricingControllerFindAllResponses[keyof PricingControllerFindAllResponses];

export type PricingControllerCreateData = {
    body: CreatePricingDto;
    path?: never;
    query?: never;
    url: '/pricing';
};

export type PricingControllerCreateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingControllerCreateError = PricingControllerCreateErrors[keyof PricingControllerCreateErrors];

export type PricingControllerCreateResponses = {
    201: PricingDto;
};

export type PricingControllerCreateResponse = PricingControllerCreateResponses[keyof PricingControllerCreateResponses];

export type PricingControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/pricing/{id}';
};

export type PricingControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingControllerRemoveError = PricingControllerRemoveErrors[keyof PricingControllerRemoveErrors];

export type PricingControllerRemoveResponses = {
    200: unknown;
};

export type PricingControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/pricing/{id}';
};

export type PricingControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingControllerFindOneError = PricingControllerFindOneErrors[keyof PricingControllerFindOneErrors];

export type PricingControllerFindOneResponses = {
    200: PricingDto;
};

export type PricingControllerFindOneResponse = PricingControllerFindOneResponses[keyof PricingControllerFindOneResponses];

export type PricingControllerUpdateData = {
    body: UpdatePricingDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/pricing/{id}';
};

export type PricingControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingControllerUpdateError = PricingControllerUpdateErrors[keyof PricingControllerUpdateErrors];

export type PricingControllerUpdateResponses = {
    200: PricingDto;
};

export type PricingControllerUpdateResponse = PricingControllerUpdateResponses[keyof PricingControllerUpdateResponses];

export type PricingGroupControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/pricing-group';
};

export type PricingGroupControllerFindAllErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingGroupControllerFindAllError = PricingGroupControllerFindAllErrors[keyof PricingGroupControllerFindAllErrors];

export type PricingGroupControllerFindAllResponses = {
    200: PaginatedPricingGroupDto;
};

export type PricingGroupControllerFindAllResponse = PricingGroupControllerFindAllResponses[keyof PricingGroupControllerFindAllResponses];

export type PricingGroupControllerCreateData = {
    body: CreatePricingGroupItemDto;
    path?: never;
    query?: never;
    url: '/pricing-group';
};

export type PricingGroupControllerCreateErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingGroupControllerCreateError = PricingGroupControllerCreateErrors[keyof PricingGroupControllerCreateErrors];

export type PricingGroupControllerCreateResponses = {
    201: PricingGroupDto;
};

export type PricingGroupControllerCreateResponse = PricingGroupControllerCreateResponses[keyof PricingGroupControllerCreateResponses];

export type PricingGroupControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/pricing-group/{id}';
};

export type PricingGroupControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingGroupControllerRemoveError = PricingGroupControllerRemoveErrors[keyof PricingGroupControllerRemoveErrors];

export type PricingGroupControllerRemoveResponses = {
    200: unknown;
};

export type PricingGroupControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/pricing-group/{id}';
};

export type PricingGroupControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingGroupControllerFindOneError = PricingGroupControllerFindOneErrors[keyof PricingGroupControllerFindOneErrors];

export type PricingGroupControllerFindOneResponses = {
    200: PricingGroupItemDto;
};

export type PricingGroupControllerFindOneResponse = PricingGroupControllerFindOneResponses[keyof PricingGroupControllerFindOneResponses];

export type PricingGroupControllerUpdateData = {
    body: UpdatePricingGroupItemDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/pricing-group/{id}';
};

export type PricingGroupControllerUpdateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type PricingGroupControllerUpdateError = PricingGroupControllerUpdateErrors[keyof PricingGroupControllerUpdateErrors];

export type PricingGroupControllerUpdateResponses = {
    200: PricingGroupItemDto;
};

export type PricingGroupControllerUpdateResponse = PricingGroupControllerUpdateResponses[keyof PricingGroupControllerUpdateResponses];

export type AppointmentsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
        status?: Array<AppointmentStatus>;
    };
    url: '/appointments';
};

export type AppointmentsControllerFindAllErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AppointmentsControllerFindAllError = AppointmentsControllerFindAllErrors[keyof AppointmentsControllerFindAllErrors];

export type AppointmentsControllerFindAllResponses = {
    200: PaginatedAppointmentDto;
};

export type AppointmentsControllerFindAllResponse = AppointmentsControllerFindAllResponses[keyof AppointmentsControllerFindAllResponses];

export type AppointmentsControllerCreateData = {
    body: CreateAppointmentItemDto;
    path?: never;
    query?: never;
    url: '/appointments';
};

export type AppointmentsControllerCreateErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AppointmentsControllerCreateError = AppointmentsControllerCreateErrors[keyof AppointmentsControllerCreateErrors];

export type AppointmentsControllerCreateResponses = {
    201: AppointmentItemDto;
};

export type AppointmentsControllerCreateResponse = AppointmentsControllerCreateResponses[keyof AppointmentsControllerCreateResponses];

export type AppointmentsControllerFindMentorData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        page?: number;
        limit?: number;
    };
    url: '/appointments/mentors';
};

export type AppointmentsControllerFindMentorResponses = {
    200: PaginatedUsersDto;
};

export type AppointmentsControllerFindMentorResponse = AppointmentsControllerFindMentorResponses[keyof AppointmentsControllerFindMentorResponses];

export type AppointmentsControllerFindCoursesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/appointments/courses';
};

export type AppointmentsControllerFindCoursesResponses = {
    200: Array<DetailedCourseEnrollmentDto>;
};

export type AppointmentsControllerFindCoursesResponse = AppointmentsControllerFindCoursesResponses[keyof AppointmentsControllerFindCoursesResponses];

export type AppointmentsControllerFindBookedRangeData = {
    body?: never;
    path?: never;
    query: {
        from: string;
        to: string;
        courseId: string;
        mentorId: string;
    };
    url: '/appointments/booked';
};

export type AppointmentsControllerFindBookedRangeResponses = {
    200: Array<BookedAppointment>;
};

export type AppointmentsControllerFindBookedRangeResponse = AppointmentsControllerFindBookedRangeResponses[keyof AppointmentsControllerFindBookedRangeResponses];

export type AppointmentsControllerFindAllBookedData = {
    body?: never;
    path: {
        mentorId: string;
    };
    query?: {
        startAt?: string;
        endAt?: string;
    };
    url: '/appointments/{mentorId}/mentor';
};

export type AppointmentsControllerFindAllBookedErrors = {
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AppointmentsControllerFindAllBookedError = AppointmentsControllerFindAllBookedErrors[keyof AppointmentsControllerFindAllBookedErrors];

export type AppointmentsControllerFindAllBookedResponses = {
    200: Array<BookedAppointmentDto>;
};

export type AppointmentsControllerFindAllBookedResponse = AppointmentsControllerFindAllBookedResponses[keyof AppointmentsControllerFindAllBookedResponses];

export type AppointmentsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * If set to true, will skip the soft delete process
         */
        directDelete?: boolean;
    };
    url: '/appointments/{id}';
};

export type AppointmentsControllerRemoveErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AppointmentsControllerRemoveError = AppointmentsControllerRemoveErrors[keyof AppointmentsControllerRemoveErrors];

export type AppointmentsControllerRemoveResponses = {
    200: unknown;
};

export type AppointmentsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/appointments/{id}';
};

export type AppointmentsControllerFindOneErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AppointmentsControllerFindOneError = AppointmentsControllerFindOneErrors[keyof AppointmentsControllerFindOneErrors];

export type AppointmentsControllerFindOneResponses = {
    200: AppointmentDetailsDto;
};

export type AppointmentsControllerFindOneResponse = AppointmentsControllerFindOneResponses[keyof AppointmentsControllerFindOneResponses];

export type AppointmentsControllerUpdateDetailsData = {
    body: UpdateAppointmentItemDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/appointments/{id}';
};

export type AppointmentsControllerUpdateDetailsErrors = {
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AppointmentsControllerUpdateDetailsError = AppointmentsControllerUpdateDetailsErrors[keyof AppointmentsControllerUpdateDetailsErrors];

export type AppointmentsControllerUpdateDetailsResponses = {
    200: AppointmentItemDto;
};

export type AppointmentsControllerUpdateDetailsResponse = AppointmentsControllerUpdateDetailsResponses[keyof AppointmentsControllerUpdateDetailsResponses];

export type AppointmentsControllerUpdateStatusData = {
    body: UpdateAppointmentStatusDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/appointments/{id}/status';
};

export type AppointmentsControllerUpdateStatusErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type AppointmentsControllerUpdateStatusError = AppointmentsControllerUpdateStatusErrors[keyof AppointmentsControllerUpdateStatusErrors];

export type AppointmentsControllerUpdateStatusResponses = {
    200: AppointmentItemDto;
};

export type AppointmentsControllerUpdateStatusResponse = AppointmentsControllerUpdateStatusResponses[keyof AppointmentsControllerUpdateStatusResponses];

export type ClientOptions = {
    baseUrl: string;
};