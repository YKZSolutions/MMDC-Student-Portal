// This file is auto-generated by @hey-api/openapi-ts

export type Role = 'student' | 'mentor' | 'admin';

export type UserCredentialsDto = {
    email: string;
    password: string;
};

export type CreateUserWithAccountDto = {
    firstName: string;
    middleName?: string | null;
    lastName: string;
    role: Role;
    credentials?: UserCredentialsDto;
};

export type User = {
    id: string;
    firstName: string;
    middleName: string | null;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    deletedAt: string | null;
};

export type UpdateUserDetailsDto = {
    [key: string]: unknown;
};

export type UserAccount = {
    id: string;
    userId: string;
    authUid: string;
    email?: string;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type UserDetails = {
    id: string;
    userId: string;
    dob?: string;
    gender?: string;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};

export type UserWithRelations = {
    id: string;
    firstName: string;
    middleName?: string;
    lastName: string;
    role: Role;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    userAccount: UserAccount | null;
    userDetails: UserDetails | null;
};

export type PaginationMetaDto = {
    isFirstPage: boolean;
    isLastPage: boolean;
    currentPage: number;
    previousPage: number | null;
    nextPage: number | null;
    pageCount: number;
    totalCount: number;
};

export type PaginatedUsersDto = {
    users: Array<UserWithRelations>;
    meta: PaginationMetaDto;
};

export type CreateCourseDto = {
    [key: string]: unknown;
};

export type UpdateCourseDto = {
    [key: string]: unknown;
};

export type UsersControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        search?: string;
        role?: 'student' | 'mentor' | 'admin';
        page?: number;
    };
    url: '/users';
};

export type UsersControllerFindAllErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerFindAllError = UsersControllerFindAllErrors[keyof UsersControllerFindAllErrors];

export type UsersControllerFindAllResponses = {
    /**
     * List of users retrieved successfully
     */
    200: PaginatedUsersDto;
};

export type UsersControllerFindAllResponse = UsersControllerFindAllResponses[keyof UsersControllerFindAllResponses];

export type UsersControllerCreateData = {
    body: CreateUserWithAccountDto;
    path?: never;
    query?: never;
    url: '/users';
};

export type UsersControllerCreateErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerCreateError = UsersControllerCreateErrors[keyof UsersControllerCreateErrors];

export type UsersControllerCreateResponses = {
    201: User;
};

export type UsersControllerCreateResponse = UsersControllerCreateResponses[keyof UsersControllerCreateResponses];

export type UsersControllerUpdateOwnUserDetailsData = {
    body: UpdateUserDetailsDto;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type UsersControllerUpdateOwnUserDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateOwnUserDetailsError = UsersControllerUpdateOwnUserDetailsErrors[keyof UsersControllerUpdateOwnUserDetailsErrors];

export type UsersControllerUpdateOwnUserDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateOwnUserDetailsResponse = UsersControllerUpdateOwnUserDetailsResponses[keyof UsersControllerUpdateOwnUserDetailsResponses];

export type UsersControllerFindOneData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/{id}';
};

export type UsersControllerFindOneErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    404: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerFindOneError = UsersControllerFindOneErrors[keyof UsersControllerFindOneErrors];

export type UsersControllerFindOneResponses = {
    /**
     * User found successfully
     */
    200: User;
};

export type UsersControllerFindOneResponse = UsersControllerFindOneResponses[keyof UsersControllerFindOneResponses];

export type UsersControllerUpdateUserDetailsData = {
    body: UpdateUserDetailsDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersControllerUpdateUserDetailsErrors = {
    400: {
        statusCode: number;
        message: string;
        error?: string;
    };
    500: {
        statusCode: number;
        message: string;
        error?: string;
    };
};

export type UsersControllerUpdateUserDetailsError = UsersControllerUpdateUserDetailsErrors[keyof UsersControllerUpdateUserDetailsErrors];

export type UsersControllerUpdateUserDetailsResponses = {
    200: User;
    201: User;
};

export type UsersControllerUpdateUserDetailsResponse = UsersControllerUpdateUserDetailsResponses[keyof UsersControllerUpdateUserDetailsResponses];

export type CoursesControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/courses';
};

export type CoursesControllerFindAllResponses = {
    200: string;
};

export type CoursesControllerFindAllResponse = CoursesControllerFindAllResponses[keyof CoursesControllerFindAllResponses];

export type CoursesControllerCreateData = {
    body: CreateCourseDto;
    path?: never;
    query?: never;
    url: '/courses';
};

export type CoursesControllerCreateResponses = {
    201: string;
};

export type CoursesControllerCreateResponse = CoursesControllerCreateResponses[keyof CoursesControllerCreateResponses];

export type CoursesControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerRemoveResponses = {
    200: string;
};

export type CoursesControllerRemoveResponse = CoursesControllerRemoveResponses[keyof CoursesControllerRemoveResponses];

export type CoursesControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerFindOneResponses = {
    200: string;
};

export type CoursesControllerFindOneResponse = CoursesControllerFindOneResponses[keyof CoursesControllerFindOneResponses];

export type CoursesControllerUpdateData = {
    body: UpdateCourseDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/courses/{id}';
};

export type CoursesControllerUpdateResponses = {
    200: string;
};

export type CoursesControllerUpdateResponse = CoursesControllerUpdateResponses[keyof CoursesControllerUpdateResponses];

export type TestControllerTestStudentData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/student';
};

export type TestControllerTestStudentResponses = {
    200: string;
};

export type TestControllerTestStudentResponse = TestControllerTestStudentResponses[keyof TestControllerTestStudentResponses];

export type TestControllerTestAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/admin';
};

export type TestControllerTestAdminResponses = {
    200: string;
};

export type TestControllerTestAdminResponse = TestControllerTestAdminResponses[keyof TestControllerTestAdminResponses];

export type ClientOptions = {
    baseUrl: string;
};